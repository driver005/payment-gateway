{
    "schemes": [
        "http"
    ],
    "swagger": "2.0",
    "info": {
        "description": "This is a sample server server.",
        "title": "Fiber Swagger Example API",
        "termsOfService": "http://swagger.io/terms/",
        "contact": {
            "name": "API Support",
            "url": "http://www.swagger.io/support",
            "email": "support@swagger.io"
        },
        "license": {
            "name": "Apache 2.0",
            "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
        },
        "version": "2.0"
    },
    "host": "localhost",
    "basePath": "/api",
    "paths": {
        "/v1/balance/{id}": {
            "get": {
                "description": "Get Balance by given ID or 404 error.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Balance"
                ],
                "summary": "get Balance by given ID or 404 error.",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Balance ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/balance.Balance"
                        }
                    }
                }
            }
        },
        "/v1/balance_transactions": {
            "get": {
                "description": "Get all existing BalanceTransaction.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "BalanceTransaction"
                ],
                "summary": "get all existing BalanceTransaction",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/balance.BalanceTransaction"
                            }
                        }
                    }
                }
            }
        },
        "/v1/balance_transactions/{id}": {
            "get": {
                "description": "Get BalanceTransaction by given ID or 404 error.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "BalanceTransaction"
                ],
                "summary": "get BalanceTransaction by given ID or 404 error.",
                "parameters": [
                    {
                        "type": "string",
                        "description": "BalanceTransaction ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/balance.BalanceTransaction"
                        }
                    }
                }
            }
        },
        "/v1/charges": {
            "get": {
                "description": "Get all existing Charges.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Charge"
                ],
                "summary": "get all existing Charges",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/charge.Charge"
                            }
                        }
                    }
                }
            },
            "post": {
                "description": "Create a new Charge.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Charge"
                ],
                "summary": "create a new Charge",
                "parameters": [
                    {
                        "description": "Request Data",
                        "name": "model",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/charge.Bind.request"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/charge.Charge"
                        }
                    }
                }
            }
        },
        "/v1/charges/{id}": {
            "get": {
                "description": "Get Charge by given ID or 404 error.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Charge"
                ],
                "summary": "get Charge by given ID or 404 error.",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Charge ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/charge.Charge"
                        }
                    }
                }
            },
            "post": {
                "description": "Update Charge.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Charge"
                ],
                "summary": "update Charge",
                "parameters": [
                    {
                        "description": "Request Data",
                        "name": "model",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/charge.Bind.request"
                        }
                    },
                    {
                        "type": "string",
                        "description": "Charge ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/charge.Charge"
                        }
                    }
                }
            },
            "delete": {
                "description": "Delete Charge by given ID.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Charge"
                ],
                "summary": "delete Charge by given ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Charge ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "ok",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/v1/charges/{id}/capture": {
            "post": {
                "description": "Capture Charge.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Charge"
                ],
                "summary": "capture Charge",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Charge ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/charge.Charge"
                        }
                    }
                }
            }
        },
        "/v1/checkout/sessions": {
            "get": {
                "description": "Get all existing CheckoutSessions.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "CheckoutSession"
                ],
                "summary": "get all existing CheckoutSessions",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/checkout.CheckoutSession"
                            }
                        }
                    }
                }
            },
            "post": {
                "description": "Create a new CheckoutSession.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "CheckoutSession"
                ],
                "summary": "create a new CheckoutSession",
                "parameters": [
                    {
                        "description": "Request Data",
                        "name": "model",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/checkout.CheckoutSession"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/checkout.CheckoutSession"
                        }
                    }
                }
            }
        },
        "/v1/checkout/sessions/{id}": {
            "get": {
                "description": "Get CheckoutSession by given ID or 404 error.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "CheckoutSession"
                ],
                "summary": "get CheckoutSession by given ID or 404 error.",
                "parameters": [
                    {
                        "type": "string",
                        "description": "CheckoutSession ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/checkout.CheckoutSession"
                        }
                    }
                }
            },
            "post": {
                "description": "Update CheckoutSession.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "CheckoutSession"
                ],
                "summary": "update CheckoutSession",
                "parameters": [
                    {
                        "description": "Request Data",
                        "name": "model",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/checkout.CheckoutSession"
                        }
                    },
                    {
                        "type": "string",
                        "description": "CheckoutSession ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/checkout.CheckoutSession"
                        }
                    }
                }
            },
            "delete": {
                "description": "Delete CheckoutSession by given ID.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "CheckoutSession"
                ],
                "summary": "delete CheckoutSession by given ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "CheckoutSession ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "ok",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/v1/checkout/sessions/{id}/expire": {
            "post": {
                "description": "Expire CheckoutSession.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "CheckoutSession"
                ],
                "summary": "expire CheckoutSession",
                "parameters": [
                    {
                        "type": "string",
                        "description": "CheckoutSession ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/checkout.CheckoutSession"
                        }
                    }
                }
            }
        },
        "/v1/coupons": {
            "get": {
                "description": "Get all existing Coupons.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Coupon"
                ],
                "summary": "get all existing Coupons",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/coupon.Coupon"
                            }
                        }
                    }
                }
            },
            "post": {
                "description": "Create a new Coupon.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Coupon"
                ],
                "summary": "create a new Coupon",
                "parameters": [
                    {
                        "description": "Request Data",
                        "name": "model",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/coupon.Bind.request"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/coupon.Coupon"
                        }
                    }
                }
            }
        },
        "/v1/coupons/{id}": {
            "get": {
                "description": "Get Coupon by given ID or 404 error.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Coupon"
                ],
                "summary": "get Coupon by given ID or 404 error.",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Coupon ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/coupon.Coupon"
                        }
                    }
                }
            },
            "post": {
                "description": "Update Coupon.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Coupon"
                ],
                "summary": "update Coupon",
                "parameters": [
                    {
                        "description": "Request Data",
                        "name": "model",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/coupon.Bind.request"
                        }
                    },
                    {
                        "type": "string",
                        "description": "Coupon ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/coupon.Coupon"
                        }
                    }
                }
            },
            "delete": {
                "description": "Delete Coupon by given ID.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Coupon"
                ],
                "summary": "delete Coupon by given ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Coupon ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "ok",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/v1/credit_notes": {
            "get": {
                "description": "Get all existing CreditNotes.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "CreditNote"
                ],
                "summary": "get all existing CreditNotes",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/credit.CreditNote"
                            }
                        }
                    }
                }
            },
            "post": {
                "description": "Create a new CreditNote.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "CreditNote"
                ],
                "summary": "create a new CreditNote",
                "parameters": [
                    {
                        "description": "Request Data",
                        "name": "model",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/credit.Bind.request"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/credit.CreditNote"
                        }
                    }
                }
            }
        },
        "/v1/credit_notes/{id}": {
            "get": {
                "description": "Get CreditNote by given ID or 404 error.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "CreditNote"
                ],
                "summary": "get CreditNote by given ID or 404 error.",
                "parameters": [
                    {
                        "type": "string",
                        "description": "CreditNote ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/credit.CreditNote"
                        }
                    }
                }
            },
            "post": {
                "description": "Update CreditNote.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "CreditNote"
                ],
                "summary": "update CreditNote",
                "parameters": [
                    {
                        "description": "Request Data",
                        "name": "model",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/credit.Bind.request"
                        }
                    },
                    {
                        "type": "string",
                        "description": "CreditNote ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/credit.CreditNote"
                        }
                    }
                }
            },
            "delete": {
                "description": "Delete CreditNote by given ID.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "CreditNote"
                ],
                "summary": "delete CreditNote by given ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "CreditNote ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "ok",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/v1/credit_notes/{id}/lines": {
            "get": {
                "description": "Get CreditNote by given ID and return his Linitems.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "CreditNote"
                ],
                "summary": "get CreditNote by given ID and return his Linitems.",
                "parameters": [
                    {
                        "type": "string",
                        "description": "CreditNote ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/credit.CreditNote"
                        }
                    }
                }
            }
        },
        "/v1/credit_notes/{id}/void": {
            "get": {
                "description": "Update CreditNote to status void.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "CreditNote"
                ],
                "summary": "update CreditNote to status void",
                "parameters": [
                    {
                        "type": "string",
                        "description": "CreditNote ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/credit.CreditNote"
                        }
                    }
                }
            }
        },
        "/v1/customers": {
            "get": {
                "description": "Get all existing Customers.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Customer"
                ],
                "summary": "get all existing Customers",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/customer.Customer"
                            }
                        }
                    }
                }
            },
            "post": {
                "description": "Create a new Customer.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Customer"
                ],
                "summary": "create a new Customer",
                "parameters": [
                    {
                        "description": "Request Data",
                        "name": "model",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/customer.Customer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/customer.Customer"
                        }
                    }
                }
            }
        },
        "/v1/customers/{customer_id}/cash_balance": {
            "get": {
                "description": "Get all existing CashBalances.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "CashBalance"
                ],
                "summary": "get all existing CashBalances",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Customer ID",
                        "name": "customer_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/cash.CashBalance"
                            }
                        }
                    }
                }
            },
            "post": {
                "description": "Create a new CashBalance.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "CashBalance"
                ],
                "summary": "create a new CashBalance",
                "parameters": [
                    {
                        "description": "Request Data",
                        "name": "model",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/cash.CashBalance"
                        }
                    },
                    {
                        "type": "string",
                        "description": "Customer ID",
                        "name": "customer_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/cash.CashBalance"
                        }
                    }
                }
            }
        },
        "/v1/customers/{customer_id}/cash_balance/{id}": {
            "get": {
                "description": "Get CashBalance by given ID or 404 error.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "CashBalance"
                ],
                "summary": "get CashBalance by given ID or 404 error.",
                "parameters": [
                    {
                        "type": "string",
                        "description": "CashBalance ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Customer ID",
                        "name": "customer_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/cash.CashBalance"
                        }
                    }
                }
            },
            "post": {
                "description": "Update CashBalance.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "CashBalance"
                ],
                "summary": "update CashBalance",
                "parameters": [
                    {
                        "description": "Request Data",
                        "name": "model",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/cash.CashBalance"
                        }
                    },
                    {
                        "type": "string",
                        "description": "CashBalance ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Customer ID",
                        "name": "customer_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/cash.CashBalance"
                        }
                    }
                }
            },
            "delete": {
                "description": "Delete CashBalance by given ID.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "CashBalance"
                ],
                "summary": "delete CashBalance by given ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "CashBalance ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Customer ID",
                        "name": "customer_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "ok",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/v1/customers/{customer_id}/discount": {
            "get": {
                "description": "Get all existing Discounts.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Discount"
                ],
                "summary": "get all existing Discounts",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Customer ID",
                        "name": "customer_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/discount.Discount"
                            }
                        }
                    }
                }
            },
            "post": {
                "description": "Create a new Discount.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Discount"
                ],
                "summary": "create a new Discount",
                "parameters": [
                    {
                        "description": "Request Data",
                        "name": "model",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/discount.Bind.request"
                        }
                    },
                    {
                        "type": "string",
                        "description": "Customer ID",
                        "name": "customer_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/discount.Discount"
                        }
                    }
                }
            }
        },
        "/v1/customers/{customer_id}/discount/{id}": {
            "get": {
                "description": "Get Discount by given ID or 404 error.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Discount"
                ],
                "summary": "get Discount by given ID or 404 error.",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Discount ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Customer ID",
                        "name": "customer_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/discount.Discount"
                        }
                    }
                }
            },
            "post": {
                "description": "Update Discount.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Discount"
                ],
                "summary": "update Discount",
                "parameters": [
                    {
                        "description": "Request Data",
                        "name": "model",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/discount.Bind.request"
                        }
                    },
                    {
                        "type": "string",
                        "description": "Discount ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Customer ID",
                        "name": "customer_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/discount.Discount"
                        }
                    }
                }
            },
            "delete": {
                "description": "Delete Discount by given ID.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Discount"
                ],
                "summary": "delete Discount by given ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Discount ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Customer ID",
                        "name": "customer_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "ok",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/v1/customers/{customer_id}/sources": {
            "get": {
                "description": "Get all existing Cards.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Card"
                ],
                "summary": "get all existing Cards",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Customer ID",
                        "name": "customer_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/github_com_driver005_gateway_payment_card.Card"
                            }
                        }
                    }
                }
            },
            "post": {
                "description": "Create a new Card.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Card"
                ],
                "summary": "create a new Card",
                "parameters": [
                    {
                        "description": "Request Data",
                        "name": "model",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/card.Bind.request"
                        }
                    },
                    {
                        "type": "string",
                        "description": "Customer ID",
                        "name": "customer_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/github_com_driver005_gateway_payment_card.Card"
                        }
                    }
                }
            }
        },
        "/v1/customers/{customer_id}/sources/{id}": {
            "get": {
                "description": "Get Card by given ID or 404 error.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Card"
                ],
                "summary": "get Card by given ID or 404 error.",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Card ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Customer ID",
                        "name": "customer_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/github_com_driver005_gateway_payment_card.Card"
                        }
                    }
                }
            },
            "post": {
                "description": "Attaching Source to Customer by given ID.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Source"
                ],
                "summary": "attaching Source to Customer by given ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Source ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Customer ID",
                        "name": "customer_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "ok",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "delete": {
                "description": "dettaching Source from Customer by given ID.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Source"
                ],
                "summary": "dettaching Source from Customer by given ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Source ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Customer ID",
                        "name": "customer_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "ok",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/v1/customers/{customer_id}/sources/{id}/verify": {
            "post": {
                "description": "Verify BankAccount.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "BankAccount"
                ],
                "summary": "verify BankAccount",
                "parameters": [
                    {
                        "type": "string",
                        "description": "BankAccount ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Customer ID",
                        "name": "customer_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/bank.BankAccount"
                        }
                    }
                }
            }
        },
        "/v1/customers/{id}": {
            "get": {
                "description": "Get Customer by given ID or 404 error.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Customer"
                ],
                "summary": "get Customer by given ID or 404 error.",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Customer ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/customer.Customer"
                        }
                    }
                }
            },
            "post": {
                "description": "Update Customer.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Customer"
                ],
                "summary": "update Customer",
                "parameters": [
                    {
                        "description": "Request Data",
                        "name": "model",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/customer.Customer"
                        }
                    },
                    {
                        "type": "string",
                        "description": "Customer ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/customer.Customer"
                        }
                    }
                }
            },
            "delete": {
                "description": "Delete Customer by given ID.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Customer"
                ],
                "summary": "delete Customer by given ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Customer ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "ok",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/v1/customers/{id}/tax_ids": {
            "get": {
                "description": "Get all existing Customers.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Customer"
                ],
                "summary": "get all existing Customers",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Customer ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/customer.Customer"
                            }
                        }
                    }
                }
            },
            "post": {
                "description": "Create a new Customer.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Customer"
                ],
                "summary": "create a new Customer",
                "parameters": [
                    {
                        "description": "Request Data",
                        "name": "model",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/customer.Customer"
                        }
                    },
                    {
                        "type": "string",
                        "description": "Customer ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/customer.Customer"
                        }
                    }
                }
            }
        },
        "/v1/customers/{id}/tax_ids/{tax_id}": {
            "get": {
                "description": "Get Customer by given ID or 404 error.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Customer"
                ],
                "summary": "get Customer by given ID or 404 error.",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Customer ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Tax ID",
                        "name": "tax_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/customer.Customer"
                        }
                    }
                }
            },
            "delete": {
                "description": "Delete Customer by given ID.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Customer"
                ],
                "summary": "delete Customer by given ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Customer ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Tax ID",
                        "name": "tax_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "ok",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/v1/disputes": {
            "get": {
                "description": "Get all existing Disputes.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Dispute"
                ],
                "summary": "get all existing Disputes",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/dispute.Dispute"
                            }
                        }
                    }
                }
            },
            "post": {
                "description": "Create a new Dispute.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Dispute"
                ],
                "summary": "create a new Dispute",
                "parameters": [
                    {
                        "description": "Request Data",
                        "name": "model",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dispute.Bind.request"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/dispute.Dispute"
                        }
                    }
                }
            }
        },
        "/v1/disputes/{id}": {
            "get": {
                "description": "Get Dispute by given ID or 404 error.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Dispute"
                ],
                "summary": "get Dispute by given ID or 404 error.",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Dispute ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/dispute.Dispute"
                        }
                    }
                }
            },
            "post": {
                "description": "Update Dispute.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Dispute"
                ],
                "summary": "update Dispute",
                "parameters": [
                    {
                        "description": "Request Data",
                        "name": "model",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dispute.Bind.request"
                        }
                    },
                    {
                        "type": "string",
                        "description": "Dispute ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/dispute.Dispute"
                        }
                    }
                }
            },
            "delete": {
                "description": "Delete Dispute by given ID.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Dispute"
                ],
                "summary": "delete Dispute by given ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Dispute ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "ok",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/v1/disputes/{id}/close": {
            "post": {
                "description": "Close Dispute.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Dispute"
                ],
                "summary": "close Dispute",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Dispute ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/dispute.Dispute"
                        }
                    }
                }
            }
        },
        "/v1/files": {
            "get": {
                "description": "Get all existing Files.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "File"
                ],
                "summary": "get all existing Files",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/file.File"
                            }
                        }
                    }
                }
            },
            "post": {
                "description": "Create a new File.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "File"
                ],
                "summary": "create a new File",
                "parameters": [
                    {
                        "description": "Request Data",
                        "name": "model",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/file.File"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/file.File"
                        }
                    }
                }
            }
        },
        "/v1/files/{id}": {
            "get": {
                "description": "Get File by given ID or 404 error.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "File"
                ],
                "summary": "get File by given ID or 404 error.",
                "parameters": [
                    {
                        "type": "string",
                        "description": "File ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/file.File"
                        }
                    }
                }
            },
            "post": {
                "description": "Update File.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "File"
                ],
                "summary": "update File",
                "parameters": [
                    {
                        "description": "Request Data",
                        "name": "model",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/file.File"
                        }
                    },
                    {
                        "type": "string",
                        "description": "File ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/file.File"
                        }
                    }
                }
            },
            "delete": {
                "description": "Delete File by given ID.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "File"
                ],
                "summary": "delete File by given ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "File ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "ok",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/v1/invoiceitems": {
            "get": {
                "description": "Get all existing Invoiceitems.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Invoiceitem"
                ],
                "summary": "get all existing Invoiceitems",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/invoiceItem.Invoiceitem"
                            }
                        }
                    }
                }
            },
            "post": {
                "description": "Create a new Invoiceitem.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Invoiceitem"
                ],
                "summary": "create a new Invoiceitem",
                "parameters": [
                    {
                        "description": "Request Data",
                        "name": "model",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/invoiceItem.Bind.request"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/invoiceItem.Invoiceitem"
                        }
                    }
                }
            }
        },
        "/v1/invoiceitems/{id}": {
            "get": {
                "description": "Get Invoiceitem by given ID or 404 error.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Invoiceitem"
                ],
                "summary": "get Invoiceitem by given ID or 404 error.",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Invoiceitem ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/invoiceItem.Invoiceitem"
                        }
                    }
                }
            },
            "post": {
                "description": "Update Invoiceitem.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Invoiceitem"
                ],
                "summary": "update Invoiceitem",
                "parameters": [
                    {
                        "description": "Request Data",
                        "name": "model",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/invoiceItem.Bind.request"
                        }
                    },
                    {
                        "type": "string",
                        "description": "Invoiceitem ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/invoiceItem.Invoiceitem"
                        }
                    }
                }
            },
            "delete": {
                "description": "Delete Invoiceitem by given ID.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Invoiceitem"
                ],
                "summary": "delete Invoiceitem by given ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Invoiceitem ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "ok",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/v1/invoices": {
            "get": {
                "description": "Get all existing Invoices.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Invoice"
                ],
                "summary": "get all existing Invoices",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/invoice.Invoice"
                            }
                        }
                    }
                }
            },
            "post": {
                "description": "Create a new Invoice.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Invoice"
                ],
                "summary": "create a new Invoice",
                "parameters": [
                    {
                        "description": "Request Data",
                        "name": "model",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/invoice.Bind.request"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/invoice.Invoice"
                        }
                    }
                }
            }
        },
        "/v1/invoices/{id}": {
            "get": {
                "description": "Get Invoice by given ID or 404 error.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Invoice"
                ],
                "summary": "get Invoice by given ID or 404 error.",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Invoice ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/invoice.Invoice"
                        }
                    }
                }
            },
            "post": {
                "description": "Update Invoice.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Invoice"
                ],
                "summary": "update Invoice",
                "parameters": [
                    {
                        "description": "Request Data",
                        "name": "model",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/invoice.Bind.request"
                        }
                    },
                    {
                        "type": "string",
                        "description": "Invoice ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/invoice.Invoice"
                        }
                    }
                }
            },
            "delete": {
                "description": "Delete Invoice by given ID.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Invoice"
                ],
                "summary": "delete Invoice by given ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Invoice ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "ok",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/v1/invoices/{id}/cancel": {
            "post": {
                "description": "Cancel Invoice.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Invoice"
                ],
                "summary": "cancel Invoice",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Invoice ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/invoice.Invoice"
                        }
                    }
                }
            }
        },
        "/v1/invoices/{id}/capture": {
            "post": {
                "description": "Capture Invoice.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Invoice"
                ],
                "summary": "capture Invoice",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Invoice ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/invoice.Invoice"
                        }
                    }
                }
            }
        },
        "/v1/invoices/{id}/finalize": {
            "post": {
                "description": "Finalize Invoice.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Invoice"
                ],
                "summary": "finalize Invoice",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Invoice ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/invoice.Invoice"
                        }
                    }
                }
            }
        },
        "/v1/invoices/{id}/mark_uncollectible": {
            "post": {
                "description": "Mark Invoice as uncollectible.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Invoice"
                ],
                "summary": "mark Invoice as uncollectible",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Invoice ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/invoice.Invoice"
                        }
                    }
                }
            }
        },
        "/v1/invoices/{id}/pay": {
            "post": {
                "description": "Pay Invoice.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Invoice"
                ],
                "summary": "pay Invoice",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Invoice ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/invoice.Invoice"
                        }
                    }
                }
            }
        },
        "/v1/invoices/{id}/send": {
            "post": {
                "description": "Send Invoice.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Invoice"
                ],
                "summary": "send Invoice",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Invoice ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/invoice.Invoice"
                        }
                    }
                }
            }
        },
        "/v1/invoices/{id}/upcoming": {
            "post": {
                "description": "Upcoming Invoice.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Invoice"
                ],
                "summary": "upcoming Invoice",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Invoice ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/invoice.Invoice"
                        }
                    }
                }
            }
        },
        "/v1/invoices/{id}/void": {
            "post": {
                "description": "Void Invoice.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Invoice"
                ],
                "summary": "void Invoice",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Invoice ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/invoice.Invoice"
                        }
                    }
                }
            }
        },
        "/v1/lineItem": {
            "get": {
                "description": "Get all existing LineItems.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "LineItem"
                ],
                "summary": "get all existing LineItems",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/item.LineItem"
                            }
                        }
                    }
                }
            },
            "post": {
                "description": "Create a new LineItem.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "LineItem"
                ],
                "summary": "create a new LineItem",
                "parameters": [
                    {
                        "description": "Request Data",
                        "name": "model",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/item.Bind.request"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/item.LineItem"
                        }
                    }
                }
            }
        },
        "/v1/lineItem/{id}": {
            "get": {
                "description": "Get LineItem by given ID or 404 error.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "LineItem"
                ],
                "summary": "get LineItem by given ID or 404 error.",
                "parameters": [
                    {
                        "type": "string",
                        "description": "LineItem ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/item.LineItem"
                        }
                    }
                }
            },
            "post": {
                "description": "Update LineItem.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "LineItem"
                ],
                "summary": "update LineItem",
                "parameters": [
                    {
                        "description": "Request Data",
                        "name": "model",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/item.Bind.request"
                        }
                    },
                    {
                        "type": "string",
                        "description": "LineItem ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/item.LineItem"
                        }
                    }
                }
            },
            "delete": {
                "description": "Delete LineItem by given ID.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "LineItem"
                ],
                "summary": "delete LineItem by given ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "LineItem ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "ok",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/v1/mandates": {
            "get": {
                "description": "Get all existing Mandates.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Mandate"
                ],
                "summary": "get all existing Mandates",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/mandate.Mandate"
                            }
                        }
                    }
                }
            },
            "post": {
                "description": "Create a new Mandate.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Mandate"
                ],
                "summary": "create a new Mandate",
                "parameters": [
                    {
                        "description": "Request Data",
                        "name": "model",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/mandate.Bind.request"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/mandate.Mandate"
                        }
                    }
                }
            }
        },
        "/v1/mandates/{id}": {
            "get": {
                "description": "Get Mandate by given ID or 404 error.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Mandate"
                ],
                "summary": "get Mandate by given ID or 404 error.",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Mandate ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/mandate.Mandate"
                        }
                    }
                }
            },
            "post": {
                "description": "Update Mandate.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Mandate"
                ],
                "summary": "update Mandate",
                "parameters": [
                    {
                        "description": "Request Data",
                        "name": "model",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/mandate.Bind.request"
                        }
                    },
                    {
                        "type": "string",
                        "description": "Mandate ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/mandate.Mandate"
                        }
                    }
                }
            },
            "delete": {
                "description": "Delete Mandate by given ID.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Mandate"
                ],
                "summary": "delete Mandate by given ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Mandate ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "ok",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/v1/payment_intents": {
            "get": {
                "description": "Get all existing PaymentIntents.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "PaymentIntent"
                ],
                "summary": "get all existing PaymentIntents",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/intent.PaymentIntent"
                            }
                        }
                    }
                }
            },
            "post": {
                "description": "Create a new PaymentIntent.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "PaymentIntent"
                ],
                "summary": "create a new PaymentIntent",
                "parameters": [
                    {
                        "description": "Request Data",
                        "name": "model",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/intent.Bind.request"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/intent.PaymentIntent"
                        }
                    }
                }
            }
        },
        "/v1/payment_intents/{id}": {
            "get": {
                "description": "Get PaymentIntent by given ID or 404 error.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "PaymentIntent"
                ],
                "summary": "get PaymentIntent by given ID or 404 error.",
                "parameters": [
                    {
                        "type": "string",
                        "description": "PaymentIntent ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/intent.PaymentIntent"
                        }
                    }
                }
            },
            "post": {
                "description": "Update PaymentIntent.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "PaymentIntent"
                ],
                "summary": "update PaymentIntent",
                "parameters": [
                    {
                        "description": "Request Data",
                        "name": "model",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/intent.Bind.request"
                        }
                    },
                    {
                        "type": "string",
                        "description": "PaymentIntent ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/intent.PaymentIntent"
                        }
                    }
                }
            },
            "delete": {
                "description": "Delete PaymentIntent by given ID.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "PaymentIntent"
                ],
                "summary": "delete PaymentIntent by given ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "PaymentIntent ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "ok",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/v1/payment_intents/{id}/cancel": {
            "post": {
                "description": "Cancel PaymentIntent.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "PaymentIntent"
                ],
                "summary": "cancel PaymentIntent",
                "parameters": [
                    {
                        "type": "string",
                        "description": "PaymentIntent ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/intent.PaymentIntent"
                        }
                    }
                }
            }
        },
        "/v1/payment_intents/{id}/capture": {
            "post": {
                "description": "Capture PaymentIntent.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "PaymentIntent"
                ],
                "summary": "capture PaymentIntent",
                "parameters": [
                    {
                        "type": "string",
                        "description": "PaymentIntent ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/intent.PaymentIntent"
                        }
                    }
                }
            }
        },
        "/v1/payment_intents/{id}/confirm": {
            "post": {
                "description": "Confirm PaymentIntent.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "PaymentIntent"
                ],
                "summary": "confirm PaymentIntent",
                "parameters": [
                    {
                        "type": "string",
                        "description": "PaymentIntent ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/intent.PaymentIntent"
                        }
                    }
                }
            }
        },
        "/v1/payment_links": {
            "get": {
                "description": "Get all existing PaymentLinks.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "PaymentLink"
                ],
                "summary": "get all existing PaymentLinks",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/link.PaymentLink"
                            }
                        }
                    }
                }
            },
            "post": {
                "description": "Create a new PaymentLink.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "PaymentLink"
                ],
                "summary": "create a new PaymentLink",
                "parameters": [
                    {
                        "description": "Request Data",
                        "name": "model",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/link.PaymentLink"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/link.PaymentLink"
                        }
                    }
                }
            }
        },
        "/v1/payment_links/{id}": {
            "get": {
                "description": "Get PaymentLink by given ID or 404 error.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "PaymentLink"
                ],
                "summary": "get PaymentLink by given ID or 404 error.",
                "parameters": [
                    {
                        "type": "string",
                        "description": "PaymentLink ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/link.PaymentLink"
                        }
                    }
                }
            },
            "post": {
                "description": "Update PaymentLink.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "PaymentLink"
                ],
                "summary": "update PaymentLink",
                "parameters": [
                    {
                        "description": "Request Data",
                        "name": "model",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/link.PaymentLink"
                        }
                    },
                    {
                        "type": "string",
                        "description": "PaymentLink ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/link.PaymentLink"
                        }
                    }
                }
            },
            "delete": {
                "description": "Delete PaymentLink by given ID.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "PaymentLink"
                ],
                "summary": "delete PaymentLink by given ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "PaymentLink ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "ok",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/v1/payment_methods": {
            "get": {
                "description": "Get all existing PaymentMethods.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "PaymentMethod"
                ],
                "summary": "get all existing PaymentMethods",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/method.PaymentMethod"
                            }
                        }
                    }
                }
            },
            "post": {
                "description": "Create a new PaymentMethod.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "PaymentMethod"
                ],
                "summary": "create a new PaymentMethod",
                "parameters": [
                    {
                        "description": "Request Data",
                        "name": "model",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/method.Bind.request"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/method.PaymentMethod"
                        }
                    }
                }
            }
        },
        "/v1/payment_methods/{id}": {
            "get": {
                "description": "Get PaymentMethod by given ID or 404 error.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "PaymentMethod"
                ],
                "summary": "get PaymentMethod by given ID or 404 error.",
                "parameters": [
                    {
                        "type": "string",
                        "description": "PaymentMethod ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/method.PaymentMethod"
                        }
                    }
                }
            },
            "post": {
                "description": "Update PaymentMethod.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "PaymentMethod"
                ],
                "summary": "update PaymentMethod",
                "parameters": [
                    {
                        "description": "Request Data",
                        "name": "model",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/method.Bind.request"
                        }
                    },
                    {
                        "type": "string",
                        "description": "PaymentMethod ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/method.PaymentMethod"
                        }
                    }
                }
            },
            "delete": {
                "description": "Delete PaymentMethod by given ID.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "PaymentMethod"
                ],
                "summary": "delete PaymentMethod by given ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "PaymentMethod ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "ok",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/v1/payment_methods/{id}/attach": {
            "post": {
                "description": "Attaching PaymentMethod to Customer by given ID.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "PaymentMethod"
                ],
                "summary": "attaching PaymentMethod to Customer by given ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "PaymentMethod ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "ok",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/v1/payment_methods/{id}/dettach": {
            "post": {
                "description": "dettaching PaymentMethod from Customer by given ID.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "PaymentMethod"
                ],
                "summary": "dettaching PaymentMethod from Customer by given ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "PaymentMethod ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "ok",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/v1/payouts": {
            "get": {
                "description": "Get all existing Payouts.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Payout"
                ],
                "summary": "get all existing Payouts",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/payout.Payout"
                            }
                        }
                    }
                }
            },
            "post": {
                "description": "Create a new Payout.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Payout"
                ],
                "summary": "create a new Payout",
                "parameters": [
                    {
                        "description": "Request Data",
                        "name": "model",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/payout.Bind.request"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/payout.Payout"
                        }
                    }
                }
            }
        },
        "/v1/payouts/{id}": {
            "get": {
                "description": "Get Payout by given ID or 404 error.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Payout"
                ],
                "summary": "get Payout by given ID or 404 error.",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Payout ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/payout.Payout"
                        }
                    }
                }
            },
            "post": {
                "description": "Update Payout.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Payout"
                ],
                "summary": "update Payout",
                "parameters": [
                    {
                        "description": "Request Data",
                        "name": "model",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/payout.Bind.request"
                        }
                    },
                    {
                        "type": "string",
                        "description": "Payout ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/payout.Payout"
                        }
                    }
                }
            },
            "delete": {
                "description": "Delete Payout by given ID.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Payout"
                ],
                "summary": "delete Payout by given ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Payout ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "ok",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/v1/payouts/{id}/cancele": {
            "post": {
                "description": "Cancel Payout.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Payout"
                ],
                "summary": "cancel Payout",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Payout ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/payout.Payout"
                        }
                    }
                }
            }
        },
        "/v1/payouts/{id}/reverse": {
            "post": {
                "description": "Reverse Payout.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Payout"
                ],
                "summary": "reverse Payout",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Payout ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/payout.Payout"
                        }
                    }
                }
            }
        },
        "/v1/plans": {
            "get": {
                "description": "Get all existing Plans.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Plan"
                ],
                "summary": "get all existing Plans",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/plan.Plan"
                            }
                        }
                    }
                }
            },
            "post": {
                "description": "Create a new Plan.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Plan"
                ],
                "summary": "create a new Plan",
                "parameters": [
                    {
                        "description": "Request Data",
                        "name": "model",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/plan.Bind.request"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/plan.Plan"
                        }
                    }
                }
            }
        },
        "/v1/plans/{id}": {
            "get": {
                "description": "Get Plan by given ID or 404 error.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Plan"
                ],
                "summary": "get Plan by given ID or 404 error.",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Plan ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/plan.Plan"
                        }
                    }
                }
            },
            "post": {
                "description": "Update Plan.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Plan"
                ],
                "summary": "update Plan",
                "parameters": [
                    {
                        "description": "Request Data",
                        "name": "model",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/plan.Bind.request"
                        }
                    },
                    {
                        "type": "string",
                        "description": "Plan ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/plan.Plan"
                        }
                    }
                }
            },
            "delete": {
                "description": "Delete Plan by given ID.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Plan"
                ],
                "summary": "delete Plan by given ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Plan ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "ok",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/v1/prices": {
            "get": {
                "description": "Get all existing Prices.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Price"
                ],
                "summary": "get all existing Prices",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/price.Price"
                            }
                        }
                    }
                }
            },
            "post": {
                "description": "Create a new Price.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Price"
                ],
                "summary": "create a new Price",
                "parameters": [
                    {
                        "description": "Request Data",
                        "name": "model",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/price.Bind.request"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/price.Price"
                        }
                    }
                }
            }
        },
        "/v1/prices/{id}": {
            "get": {
                "description": "Get Price by given ID or 404 error.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Price"
                ],
                "summary": "get Price by given ID or 404 error.",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Price ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/price.Price"
                        }
                    }
                }
            },
            "post": {
                "description": "Update Price.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Price"
                ],
                "summary": "update Price",
                "parameters": [
                    {
                        "description": "Request Data",
                        "name": "model",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/price.Bind.request"
                        }
                    },
                    {
                        "type": "string",
                        "description": "Price ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/price.Price"
                        }
                    }
                }
            },
            "delete": {
                "description": "Delete Price by given ID.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Price"
                ],
                "summary": "delete Price by given ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Price ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "ok",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/v1/products": {
            "get": {
                "description": "Get all existing Products.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Product"
                ],
                "summary": "get all existing Products",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/product.Product"
                            }
                        }
                    }
                }
            },
            "post": {
                "description": "Create a new Product.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Product"
                ],
                "summary": "create a new Product",
                "parameters": [
                    {
                        "description": "Request Data",
                        "name": "model",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/product.Bind.request"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/product.Product"
                        }
                    }
                }
            }
        },
        "/v1/products/{id}": {
            "get": {
                "description": "Get Product by given ID or 404 error.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Product"
                ],
                "summary": "get Product by given ID or 404 error.",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Product ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/product.Product"
                        }
                    }
                }
            },
            "post": {
                "description": "Update Product.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Product"
                ],
                "summary": "update Product",
                "parameters": [
                    {
                        "description": "Request Data",
                        "name": "model",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/product.Bind.request"
                        }
                    },
                    {
                        "type": "string",
                        "description": "Product ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/product.Product"
                        }
                    }
                }
            },
            "delete": {
                "description": "Delete Product by given ID.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Product"
                ],
                "summary": "delete Product by given ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Product ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "ok",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/v1/promotion_codes": {
            "get": {
                "description": "Get all existing PromotionCodes.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "PromotionCode"
                ],
                "summary": "get all existing PromotionCodes",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/promotion.PromotionCode"
                            }
                        }
                    }
                }
            },
            "post": {
                "description": "Create a new PromotionCode.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "PromotionCode"
                ],
                "summary": "create a new PromotionCode",
                "parameters": [
                    {
                        "description": "Request Data",
                        "name": "model",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/promotion.Bind.request"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/promotion.PromotionCode"
                        }
                    }
                }
            }
        },
        "/v1/promotion_codes/{id}": {
            "get": {
                "description": "Get PromotionCode by given ID or 404 error.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "PromotionCode"
                ],
                "summary": "get PromotionCode by given ID or 404 error.",
                "parameters": [
                    {
                        "type": "string",
                        "description": "PromotionCode ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/promotion.PromotionCode"
                        }
                    }
                }
            },
            "post": {
                "description": "Update PromotionCode.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "PromotionCode"
                ],
                "summary": "update PromotionCode",
                "parameters": [
                    {
                        "description": "Request Data",
                        "name": "model",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/promotion.Bind.request"
                        }
                    },
                    {
                        "type": "string",
                        "description": "PromotionCode ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/promotion.PromotionCode"
                        }
                    }
                }
            },
            "delete": {
                "description": "Delete PromotionCode by given ID.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "PromotionCode"
                ],
                "summary": "delete PromotionCode by given ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "PromotionCode ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "ok",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/v1/quotes": {
            "get": {
                "description": "Get all existing Quotes.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Quote"
                ],
                "summary": "get all existing Quotes",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/quote.Quote"
                            }
                        }
                    }
                }
            },
            "post": {
                "description": "Create a new Quote.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Quote"
                ],
                "summary": "create a new Quote",
                "parameters": [
                    {
                        "description": "Request Data",
                        "name": "model",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/quote.Bind.request"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/quote.Quote"
                        }
                    }
                }
            }
        },
        "/v1/quotes/{id}": {
            "get": {
                "description": "Get Quote by given ID or 404 error.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Quote"
                ],
                "summary": "get Quote by given ID or 404 error.",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Quote ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/quote.Quote"
                        }
                    }
                }
            },
            "post": {
                "description": "Update Quote.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Quote"
                ],
                "summary": "update Quote",
                "parameters": [
                    {
                        "description": "Request Data",
                        "name": "model",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/quote.Bind.request"
                        }
                    },
                    {
                        "type": "string",
                        "description": "Quote ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/quote.Quote"
                        }
                    }
                }
            },
            "delete": {
                "description": "Delete Quote by given ID.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Quote"
                ],
                "summary": "delete Quote by given ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Quote ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "ok",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/v1/quotes/{id}/accept": {
            "post": {
                "description": "Accept Quote.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Quote"
                ],
                "summary": "accept Quote",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Quote ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/quote.Quote"
                        }
                    }
                }
            }
        },
        "/v1/quotes/{id}/cancel": {
            "post": {
                "description": "Cancel Quote.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Quote"
                ],
                "summary": "cancel Quote",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Quote ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/quote.Quote"
                        }
                    }
                }
            }
        },
        "/v1/quotes/{id}/finalize": {
            "post": {
                "description": "Finalize Quote.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Quote"
                ],
                "summary": "finalize Quote",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Quote ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/quote.Quote"
                        }
                    }
                }
            }
        },
        "/v1/refunds": {
            "get": {
                "description": "Get all existing Refunds.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Refund"
                ],
                "summary": "get all existing Refunds",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/refund.Refund"
                            }
                        }
                    }
                }
            },
            "post": {
                "description": "Create a new Refund.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Refund"
                ],
                "summary": "create a new Refund",
                "parameters": [
                    {
                        "description": "Request Data",
                        "name": "model",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/refund.Bind.request"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/refund.Refund"
                        }
                    }
                }
            }
        },
        "/v1/refunds/{id}": {
            "get": {
                "description": "Get Refund by given ID or 404 error.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Refund"
                ],
                "summary": "get Refund by given ID or 404 error.",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Refund ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/refund.Refund"
                        }
                    }
                }
            },
            "post": {
                "description": "Update Refund.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Refund"
                ],
                "summary": "update Refund",
                "parameters": [
                    {
                        "description": "Request Data",
                        "name": "model",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/refund.Bind.request"
                        }
                    },
                    {
                        "type": "string",
                        "description": "Refund ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/refund.Refund"
                        }
                    }
                }
            },
            "delete": {
                "description": "Delete Refund by given ID.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Refund"
                ],
                "summary": "delete Refund by given ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Refund ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "ok",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/v1/refunds/{id}/cancele": {
            "post": {
                "description": "Cancel Refund.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Refund"
                ],
                "summary": "cancel Refund",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Refund ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/refund.Refund"
                        }
                    }
                }
            }
        },
        "/v1/setup_attempts": {
            "get": {
                "description": "Get all existing SetupAttempts.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "SetupAttempt"
                ],
                "summary": "get all existing SetupAttempts",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/attempt.SetupAttempt"
                            }
                        }
                    }
                }
            },
            "post": {
                "description": "Create a new SetupAttempt.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "SetupAttempt"
                ],
                "summary": "create a new SetupAttempt",
                "parameters": [
                    {
                        "description": "Request Data",
                        "name": "model",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/attempt.Bind.request"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/attempt.SetupAttempt"
                        }
                    }
                }
            }
        },
        "/v1/setup_attempts/{id}": {
            "get": {
                "description": "Get SetupAttempt by given ID or 404 error.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "SetupAttempt"
                ],
                "summary": "get SetupAttempt by given ID or 404 error.",
                "parameters": [
                    {
                        "type": "string",
                        "description": "SetupAttempt ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/attempt.SetupAttempt"
                        }
                    }
                }
            },
            "post": {
                "description": "Update SetupAttempt.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "SetupAttempt"
                ],
                "summary": "update SetupAttempt",
                "parameters": [
                    {
                        "description": "Request Data",
                        "name": "model",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/attempt.Bind.request"
                        }
                    },
                    {
                        "type": "string",
                        "description": "SetupAttempt ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/attempt.SetupAttempt"
                        }
                    }
                }
            },
            "delete": {
                "description": "Delete SetupAttempt by given ID.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "SetupAttempt"
                ],
                "summary": "delete SetupAttempt by given ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "SetupAttempt ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "ok",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/v1/setup_intents": {
            "get": {
                "description": "Get all existing SetupIntents.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "SetupIntent"
                ],
                "summary": "get all existing SetupIntents",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/setupIntent.SetupIntent"
                            }
                        }
                    }
                }
            },
            "post": {
                "description": "Create a new SetupIntent.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "SetupIntent"
                ],
                "summary": "create a new SetupIntent",
                "parameters": [
                    {
                        "description": "Request Data",
                        "name": "model",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/setupIntent.Bind.request"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/setupIntent.SetupIntent"
                        }
                    }
                }
            }
        },
        "/v1/setup_intents/{id}": {
            "get": {
                "description": "Get SetupIntent by given ID or 404 error.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "SetupIntent"
                ],
                "summary": "get SetupIntent by given ID or 404 error.",
                "parameters": [
                    {
                        "type": "string",
                        "description": "SetupIntent ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/setupIntent.SetupIntent"
                        }
                    }
                }
            },
            "post": {
                "description": "Update SetupIntent.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "SetupIntent"
                ],
                "summary": "update SetupIntent",
                "parameters": [
                    {
                        "description": "Request Data",
                        "name": "model",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/setupIntent.Bind.request"
                        }
                    },
                    {
                        "type": "string",
                        "description": "SetupIntent ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/setupIntent.SetupIntent"
                        }
                    }
                }
            },
            "delete": {
                "description": "Delete SetupIntent by given ID.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "SetupIntent"
                ],
                "summary": "delete SetupIntent by given ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "SetupIntent ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "ok",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/v1/setup_intents/{id}/cancele": {
            "post": {
                "description": "Cancel SetupIntent.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "SetupIntent"
                ],
                "summary": "cancel SetupIntent",
                "parameters": [
                    {
                        "type": "string",
                        "description": "SetupIntent ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/setupIntent.SetupIntent"
                        }
                    }
                }
            }
        },
        "/v1/setup_intents/{id}/confirm": {
            "post": {
                "description": "Confirm SetupIntent.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "SetupIntent"
                ],
                "summary": "confirm SetupIntent",
                "parameters": [
                    {
                        "type": "string",
                        "description": "SetupIntent ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/setupIntent.SetupIntent"
                        }
                    }
                }
            }
        },
        "/v1/sources": {
            "get": {
                "description": "Get all existing Sources.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Source"
                ],
                "summary": "get all existing Sources",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/source.Source"
                            }
                        }
                    }
                }
            },
            "post": {
                "description": "Create a new Source.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Source"
                ],
                "summary": "create a new Source",
                "parameters": [
                    {
                        "description": "Request Data",
                        "name": "model",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/source.Bind.request"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/source.Source"
                        }
                    }
                }
            }
        },
        "/v1/sources/{id}": {
            "get": {
                "description": "Get Source by given ID or 404 error.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Source"
                ],
                "summary": "get Source by given ID or 404 error.",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Source ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/source.Source"
                        }
                    }
                }
            },
            "post": {
                "description": "Update Source.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Source"
                ],
                "summary": "update Source",
                "parameters": [
                    {
                        "description": "Request Data",
                        "name": "model",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/source.Bind.request"
                        }
                    },
                    {
                        "type": "string",
                        "description": "Source ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/source.Source"
                        }
                    }
                }
            },
            "delete": {
                "description": "Delete Source by given ID.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Source"
                ],
                "summary": "delete Source by given ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Source ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "ok",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/v1/subscription_items": {
            "get": {
                "description": "Get all existing SubscriptionItems.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "SubscriptionItem"
                ],
                "summary": "get all existing SubscriptionItems",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/subscriptionItem.SubscriptionItem"
                            }
                        }
                    }
                }
            },
            "post": {
                "description": "Create a new SubscriptionItem.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "SubscriptionItem"
                ],
                "summary": "create a new SubscriptionItem",
                "parameters": [
                    {
                        "description": "Request Data",
                        "name": "model",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/subscriptionItem.Bind.request"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/subscriptionItem.SubscriptionItem"
                        }
                    }
                }
            }
        },
        "/v1/subscription_items/{id}": {
            "get": {
                "description": "Get SubscriptionItem by given ID or 404 error.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "SubscriptionItem"
                ],
                "summary": "get SubscriptionItem by given ID or 404 error.",
                "parameters": [
                    {
                        "type": "string",
                        "description": "SubscriptionItem ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/subscriptionItem.SubscriptionItem"
                        }
                    }
                }
            },
            "post": {
                "description": "Update SubscriptionItem.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "SubscriptionItem"
                ],
                "summary": "update SubscriptionItem",
                "parameters": [
                    {
                        "description": "Request Data",
                        "name": "model",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/subscriptionItem.Bind.request"
                        }
                    },
                    {
                        "type": "string",
                        "description": "SubscriptionItem ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/subscriptionItem.SubscriptionItem"
                        }
                    }
                }
            },
            "delete": {
                "description": "Delete SubscriptionItem by given ID.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "SubscriptionItem"
                ],
                "summary": "delete SubscriptionItem by given ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "SubscriptionItem ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "ok",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/v1/subscription_items/{id}/usage_record_summaries": {
            "get": {
                "description": "Get all existing UsageRecords.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "UsageRecord"
                ],
                "summary": "get all existing UsageRecords",
                "parameters": [
                    {
                        "type": "string",
                        "description": "SubscriptionItem ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/usageRecord.UsageRecord"
                            }
                        }
                    }
                }
            }
        },
        "/v1/subscription_items/{id}/usage_records": {
            "get": {
                "description": "Get UsageRecord by given ID or 404 error.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "UsageRecord"
                ],
                "summary": "get UsageRecord by given ID or 404 error.",
                "parameters": [
                    {
                        "type": "string",
                        "description": "SubscriptionItem ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/usageRecord.UsageRecord"
                        }
                    }
                }
            }
        },
        "/v1/subscription_schedules": {
            "get": {
                "description": "Get all existing SubscriptionSchedules.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "SubscriptionSchedule"
                ],
                "summary": "get all existing SubscriptionSchedules",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/subscriptionSchedule.SubscriptionSchedule"
                            }
                        }
                    }
                }
            },
            "post": {
                "description": "Create a new SubscriptionSchedule.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "SubscriptionSchedule"
                ],
                "summary": "create a new SubscriptionSchedule",
                "parameters": [
                    {
                        "description": "Request Data",
                        "name": "model",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/subscriptionSchedule.Bind.request"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/subscriptionSchedule.SubscriptionSchedule"
                        }
                    }
                }
            }
        },
        "/v1/subscription_schedules/{id}": {
            "get": {
                "description": "Get SubscriptionSchedule by given ID or 404 error.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "SubscriptionSchedule"
                ],
                "summary": "get SubscriptionSchedule by given ID or 404 error.",
                "parameters": [
                    {
                        "type": "string",
                        "description": "SubscriptionSchedule ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/subscriptionSchedule.SubscriptionSchedule"
                        }
                    }
                }
            },
            "post": {
                "description": "Update SubscriptionSchedule.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "SubscriptionSchedule"
                ],
                "summary": "update SubscriptionSchedule",
                "parameters": [
                    {
                        "description": "Request Data",
                        "name": "model",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/subscriptionSchedule.Bind.request"
                        }
                    },
                    {
                        "type": "string",
                        "description": "SubscriptionSchedule ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/subscriptionSchedule.SubscriptionSchedule"
                        }
                    }
                }
            },
            "delete": {
                "description": "Delete SubscriptionSchedule by given ID.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "SubscriptionSchedule"
                ],
                "summary": "delete SubscriptionSchedule by given ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "SubscriptionSchedule ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "ok",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/v1/subscription_schedules/{id}/cancele": {
            "post": {
                "description": "Cancel SubscriptionSchedule.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "SubscriptionSchedule"
                ],
                "summary": "cancel SubscriptionSchedule",
                "parameters": [
                    {
                        "type": "string",
                        "description": "SubscriptionSchedule ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/subscriptionSchedule.SubscriptionSchedule"
                        }
                    }
                }
            }
        },
        "/v1/subscription_schedules/{id}/release": {
            "post": {
                "description": "Release SubscriptionSchedule.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "SubscriptionSchedule"
                ],
                "summary": "release SubscriptionSchedule",
                "parameters": [
                    {
                        "type": "string",
                        "description": "SubscriptionSchedule ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/subscriptionSchedule.SubscriptionSchedule"
                        }
                    }
                }
            }
        },
        "/v1/subscriptions": {
            "get": {
                "description": "Get all existing Subscriptions.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Subscription"
                ],
                "summary": "get all existing Subscriptions",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/subscription.Subscription"
                            }
                        }
                    }
                }
            },
            "post": {
                "description": "Create a new Subscription.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Subscription"
                ],
                "summary": "create a new Subscription",
                "parameters": [
                    {
                        "description": "Request Data",
                        "name": "model",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/subscription.Bind.request"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/subscription.Subscription"
                        }
                    }
                }
            }
        },
        "/v1/subscriptions/{id}": {
            "get": {
                "description": "Get Subscription by given ID or 404 error.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Subscription"
                ],
                "summary": "get Subscription by given ID or 404 error.",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Subscription ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/subscription.Subscription"
                        }
                    }
                }
            },
            "post": {
                "description": "Update Subscription.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Subscription"
                ],
                "summary": "update Subscription",
                "parameters": [
                    {
                        "description": "Request Data",
                        "name": "model",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/subscription.Bind.request"
                        }
                    },
                    {
                        "type": "string",
                        "description": "Subscription ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/subscription.Subscription"
                        }
                    }
                }
            },
            "delete": {
                "description": "Delete Subscription by given ID.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Subscription"
                ],
                "summary": "delete Subscription by given ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Subscription ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "ok",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/v1/usage_record": {
            "post": {
                "description": "Create a new UsageRecord.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "UsageRecord"
                ],
                "summary": "create a new UsageRecord",
                "parameters": [
                    {
                        "description": "Request Data",
                        "name": "model",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/usageRecord.UsageRecord"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/usageRecord.UsageRecord"
                        }
                    }
                }
            }
        },
        "/v1/usage_record/{id}": {
            "post": {
                "description": "Update UsageRecord.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "UsageRecord"
                ],
                "summary": "update UsageRecord",
                "parameters": [
                    {
                        "description": "Request Data",
                        "name": "model",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/usageRecord.UsageRecord"
                        }
                    },
                    {
                        "type": "string",
                        "description": "SubscriptionItem ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/usageRecord.UsageRecord"
                        }
                    }
                }
            },
            "delete": {
                "description": "Delete UsageRecord by given ID.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "UsageRecord"
                ],
                "summary": "delete UsageRecord by given ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "UsageRecord ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "ok",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "account.Account": {
            "type": "object",
            "properties": {
                "business_profile": {
                    "$ref": "#/definitions/account.AccountBusinessProfile"
                },
                "created_at": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "livemode": {
                    "type": "boolean"
                },
                "metadata": {
                    "$ref": "#/definitions/core.JSONB"
                },
                "object": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                }
            }
        },
        "account.AccountBusinessProfile": {
            "type": "object",
            "properties": {
                "created_at": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "livemode": {
                    "type": "boolean"
                },
                "mcc": {
                    "type": "string"
                },
                "metadata": {
                    "$ref": "#/definitions/core.JSONB"
                },
                "name": {
                    "type": "string"
                },
                "object": {
                    "type": "string"
                },
                "product_description": {
                    "type": "string"
                },
                "support_address": {
                    "type": "string",
                    "format": "uuid"
                },
                "support_email": {
                    "type": "string"
                },
                "support_phone": {
                    "type": "string"
                },
                "support_url": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                },
                "url": {
                    "type": "string"
                }
            }
        },
        "address.Address": {
            "type": "object",
            "properties": {
                "address_1": {
                    "description": "Address line 1",
                    "type": "string"
                },
                "address_2": {
                    "description": "Address line 2",
                    "type": "string"
                },
                "city": {
                    "description": "City",
                    "type": "string"
                },
                "company": {
                    "description": "Company name",
                    "type": "string"
                },
                "country": {
                    "description": "A country object. Available if the relation `country` is expanded.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/country.Country"
                        }
                    ]
                },
                "country_code": {
                    "description": "The 2 character ISO code of the country in lower case",
                    "type": "string"
                },
                "created_at": {
                    "type": "string"
                },
                "first_name": {
                    "description": "First name",
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "last_name": {
                    "description": "Last name",
                    "type": "string"
                },
                "livemode": {
                    "type": "boolean"
                },
                "metadata": {
                    "$ref": "#/definitions/core.JSONB"
                },
                "object": {
                    "type": "string"
                },
                "phone": {
                    "description": "Phone Number",
                    "type": "string"
                },
                "postal_code": {
                    "description": "Postal Code",
                    "type": "string"
                },
                "province": {
                    "description": "Province",
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                }
            }
        },
        "address.BillingDetails": {
            "type": "object",
            "properties": {
                "address": {
                    "type": "string",
                    "format": "uuid"
                },
                "created_at": {
                    "type": "string"
                },
                "email": {
                    "description": "Email address.",
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "livemode": {
                    "type": "boolean"
                },
                "metadata": {
                    "$ref": "#/definitions/core.JSONB"
                },
                "name": {
                    "description": "Full name.",
                    "type": "string"
                },
                "object": {
                    "type": "string"
                },
                "phone": {
                    "description": "Billing phone number (including extension).",
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                }
            }
        },
        "address.Shipping": {
            "type": "object",
            "properties": {
                "address": {
                    "type": "string",
                    "format": "uuid"
                },
                "carrier": {
                    "description": "The delivery service that shipped a physical product, such as Fedex, UPS, USPS, etc.",
                    "type": "string"
                },
                "created_at": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "livemode": {
                    "type": "boolean"
                },
                "metadata": {
                    "$ref": "#/definitions/core.JSONB"
                },
                "name": {
                    "description": "Recipient name.",
                    "type": "string"
                },
                "object": {
                    "type": "string"
                },
                "phone": {
                    "description": "Recipient phone (including extension).",
                    "type": "string"
                },
                "tracking_number": {
                    "description": "The tracking number for a physical product, obtained from the delivery service. If multiple tracking numbers were generated for this purchase, please separate them with commas.",
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                }
            }
        },
        "attempt.Bind.request": {
            "type": "object",
            "properties": {
                "attach_to_self": {
                    "type": "boolean"
                },
                "created_at": {
                    "type": "string"
                },
                "customer": {
                    "type": "string",
                    "format": "uuid"
                },
                "flow_directions": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "id": {
                    "type": "string"
                },
                "livemode": {
                    "type": "boolean"
                },
                "metadata": {
                    "$ref": "#/definitions/core.JSONB"
                },
                "object": {
                    "type": "string"
                },
                "payment_method": {
                    "type": "string",
                    "format": "uuid"
                },
                "payment_method_details": {
                    "$ref": "#/definitions/details.PaymentMethodDetails"
                },
                "setup_error": {
                    "$ref": "#/definitions/errors.ApiErrors"
                },
                "setup_intent": {
                    "type": "string",
                    "format": "uuid"
                },
                "status": {
                    "$ref": "#/definitions/attempt.Status"
                },
                "updated_at": {
                    "type": "string"
                },
                "usage": {
                    "$ref": "#/definitions/attempt.Usage"
                }
            }
        },
        "attempt.SetupAttempt": {
            "type": "object",
            "properties": {
                "attach_to_self": {
                    "type": "boolean"
                },
                "created_at": {
                    "type": "string"
                },
                "customer": {
                    "$ref": "#/definitions/customer.Customer"
                },
                "flow_directions": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "id": {
                    "type": "string"
                },
                "livemode": {
                    "type": "boolean"
                },
                "metadata": {
                    "$ref": "#/definitions/core.JSONB"
                },
                "object": {
                    "type": "string"
                },
                "payment_method": {
                    "$ref": "#/definitions/method.PaymentMethod"
                },
                "payment_method_details": {
                    "$ref": "#/definitions/details.PaymentMethodDetails"
                },
                "setup_error": {
                    "$ref": "#/definitions/errors.ApiErrors"
                },
                "setup_intent": {
                    "$ref": "#/definitions/setupIntent.SetupIntent"
                },
                "status": {
                    "$ref": "#/definitions/attempt.Status"
                },
                "updated_at": {
                    "type": "string"
                },
                "usage": {
                    "$ref": "#/definitions/attempt.Usage"
                }
            }
        },
        "attempt.Status": {
            "type": "string",
            "enum": [
                "requires_confirmation",
                "requires_action",
                "processing",
                "succeeded",
                "failed",
                "abandoned"
            ],
            "x-enum-varnames": [
                "StatusRequiresConfirmation",
                "StatusRequiresAction",
                "StatusProcessing",
                "StatusSucceeded",
                "StatusFailed",
                "StatusAbandoned"
            ]
        },
        "attempt.Usage": {
            "type": "string",
            "enum": [
                "off_session",
                "on_session"
            ],
            "x-enum-varnames": [
                "UsageOffSession",
                "UsageOnSession"
            ]
        },
        "balance.Balance": {
            "type": "object",
            "properties": {
                "available": {
                    "description": "Funds that are available to be transferred or paid out, whether automatically by Stripe or explicitly via the [Transfers API](https://stripe.com/docs/api#transfers) or [Payouts API](https://stripe.com/docs/api#payouts). The available balance for each currency and payment type can be found in the `source_types` property.",
                    "type": "array",
                    "items": {
                        "type": "string",
                        "format": "uuid"
                    }
                },
                "connect_reserved": {
                    "description": "Funds held due to negative balances on connected Custom accounts. The connect reserve balance for each currency and payment type can be found in the `source_types` property.",
                    "type": "array",
                    "items": {
                        "type": "string",
                        "format": "uuid"
                    }
                },
                "created_at": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "instant_available": {
                    "description": "Funds that can be paid out using Instant Payouts.",
                    "type": "array",
                    "items": {
                        "type": "string",
                        "format": "uuid"
                    }
                },
                "issuing": {
                    "type": "string",
                    "format": "uuid"
                },
                "livemode": {
                    "type": "boolean"
                },
                "metadata": {
                    "$ref": "#/definitions/core.JSONB"
                },
                "object": {
                    "type": "string"
                },
                "pending": {
                    "description": "Funds that are not yet available in the balance, due to the 7-day rolling pay cycle. The pending balance for each currency, and for each payment type, can be found in the `source_types` property.",
                    "type": "array",
                    "items": {
                        "type": "string",
                        "format": "uuid"
                    }
                },
                "updated_at": {
                    "type": "string"
                }
            }
        },
        "balance.BalanceTransaction": {
            "type": "object",
            "properties": {
                "amount": {
                    "description": "Gross amount of the transaction, in %s.",
                    "type": "integer"
                },
                "available_on": {
                    "description": "The date the transaction's net funds will become available in the Stripe balance.",
                    "type": "integer"
                },
                "created_at": {
                    "type": "string"
                },
                "currency": {
                    "description": "Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).",
                    "type": "string"
                },
                "description": {
                    "description": "An arbitrary string attached to the object. Often useful for displaying to users.",
                    "type": "string"
                },
                "exchange_rate": {
                    "description": "The exchange rate used, if applicable, for this transaction. Specifically, if money was converted from currency A to currency B, then the `amount` in currency A, times `exchange_rate`, would be the `amount` in currency B. For example, suppose you charged a customer 10.00 EUR. Then the PaymentIntent's `amount` would be `1000` and `currency` would be `eur`. Suppose this was converted into 12.34 USD in your Stripe account. Then the BalanceTransaction's `amount` would be `1234`, `currency` would be `usd`, and `exchange_rate` would be `1.234`.",
                    "type": "number"
                },
                "fee": {
                    "description": "Fees (in %s) paid for this transaction.",
                    "type": "integer"
                },
                "fee_details": {
                    "description": "Detailed breakdown of fees (in %s) paid for this transaction.",
                    "type": "array",
                    "items": {
                        "type": "string",
                        "format": "uuid"
                    }
                },
                "id": {
                    "type": "string"
                },
                "livemode": {
                    "type": "boolean"
                },
                "metadata": {
                    "$ref": "#/definitions/core.JSONB"
                },
                "net": {
                    "description": "Net amount of the transaction, in %s.",
                    "type": "integer"
                },
                "object": {
                    "type": "string"
                },
                "reporting_category": {
                    "description": "[Learn more](https://stripe.com/docs/reports/reporting-categories) about how reporting categories can help you understand balance transactions from an accounting perspective.",
                    "type": "string"
                },
                "source": {
                    "type": "string"
                },
                "status": {
                    "description": "If the transaction's net funds are available in the Stripe balance yet. Either `available` or `pending`.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/balance.Status"
                        }
                    ]
                },
                "type": {
                    "description": "Transaction type: `adjustment`, `advance`, `advance_funding`, `anticipation_repayment`, `application_fee`, `application_fee_refund`, `charge`, `connect_collection_transfer`, `contribution`, `issuing_authorization_hold`, `issuing_authorization_release`, `issuing_dispute`, `issuing_transaction`, `payment`, `payment_failure_refund`, `payment_refund`, `payout`, `payout_cancel`, `payout_failure`, `refund`, `refund_failure`, `reserve_transaction`, `reserved_funds`, `stripe_fee`, `stripe_fx_fee`, `tax_fee`, `topup`, `topup_reversal`, `transfer`, `transfer_cancel`, `transfer_failure`, or `transfer_refund`. [Learn more](https://stripe.com/docs/reports/balance-transaction-types) about balance transaction types and what they represent. If you are looking to classify transactions for accounting purposes, you might want to consider `reporting_category` instead.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/balance.Type"
                        }
                    ]
                },
                "updated_at": {
                    "type": "string"
                }
            }
        },
        "balance.Status": {
            "type": "string",
            "enum": [
                "available",
                "pending"
            ],
            "x-enum-varnames": [
                "StatusAvailable",
                "StatusPending"
            ]
        },
        "balance.Type": {
            "type": "string",
            "enum": [
                "adjustment",
                "advance",
                "advance_funding",
                "anticipation_repayment",
                "application_fee",
                "application_fee_refund",
                "charge",
                "connect_collection_transfer",
                "contribution",
                "issuing_authorization_hold",
                "issuing_authorization_release",
                "issuing_dispute",
                "issuing_transaction",
                "payment",
                "payment_failure_refund",
                "payment_refund",
                "payout",
                "payout_cancel",
                "payout_failure",
                "refund",
                "refund_failure",
                "reserve_transaction",
                "reserved_funds",
                "reporting_category",
                "stripe_fee",
                "stripe_fx_fee",
                "tax_fee",
                "topup",
                "topup_reversal",
                "transfer",
                "transfer_cancel",
                "transfer_failure",
                "transfer_refund"
            ],
            "x-enum-varnames": [
                "TypeAdjustment",
                "TypeAdvance",
                "TypeAdvanceFunding",
                "TypeAnticipationRepayment",
                "TypeApplicationFee",
                "TypeApplicationFeeRefund",
                "TypeCharge",
                "TypeConnectCollectionTransfer",
                "TypeContribution",
                "TypeIssuingAuthorizationHold",
                "TypeIssuingAuthorizationRelease",
                "TypeIssuingDispute",
                "TypeIssuingTransaction",
                "TypePayment",
                "TypePaymentFailureRefund",
                "TypePaymentRefund",
                "TypePayout",
                "TypePayoutCancel",
                "TypePayoutFailure",
                "TypeRefund",
                "TypeRefundFailure",
                "TypeReserveTransaction",
                "TypeReservedFunds",
                "TypeReportingCategory",
                "TypeStripeFee",
                "TypeStripeFxFee",
                "TypeTaxFee",
                "TypeTopup",
                "TypeTopupReversal",
                "TypeTransfer",
                "TypeTransferCancel",
                "TypeTransferFailure",
                "TypeTransferRefund"
            ]
        },
        "bank.AccountHolderType": {
            "type": "string",
            "enum": [
                "individual",
                "company"
            ],
            "x-enum-varnames": [
                "AccountHolderTypeIndividual",
                "AccountHolderTypeCompany"
            ]
        },
        "bank.AccountType": {
            "type": "string",
            "enum": [
                "checking",
                "savings",
                "futsu",
                "toza"
            ],
            "x-enum-varnames": [
                "AccountTypeChecking",
                "AccountTypeSavings",
                "AccountTypeFutsu",
                "AccountTypeToza"
            ]
        },
        "bank.BankAccount": {
            "type": "object",
            "properties": {
                "account": {
                    "$ref": "#/definitions/account.Account"
                },
                "account_holder_name": {
                    "type": "string"
                },
                "account_holder_type": {
                    "$ref": "#/definitions/bank.AccountHolderType"
                },
                "account_id": {
                    "$ref": "#/definitions/uuid.NullUUID"
                },
                "account_type": {
                    "$ref": "#/definitions/bank.AccountType"
                },
                "available_payout_methods": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "bank_name": {
                    "type": "string"
                },
                "country": {
                    "type": "string"
                },
                "created_at": {
                    "type": "string"
                },
                "currency": {
                    "type": "string"
                },
                "customer": {
                    "$ref": "#/definitions/customer.Customer"
                },
                "customer_id": {
                    "$ref": "#/definitions/uuid.NullUUID"
                },
                "default_for_currency": {
                    "type": "boolean"
                },
                "fingerprint": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "last4": {
                    "type": "string"
                },
                "livemode": {
                    "type": "boolean"
                },
                "metadata": {
                    "$ref": "#/definitions/core.JSONB"
                },
                "object": {
                    "type": "string"
                },
                "routing_number": {
                    "type": "string"
                },
                "status": {
                    "$ref": "#/definitions/bank.Status"
                },
                "updated_at": {
                    "type": "string"
                }
            }
        },
        "bank.Bind.request": {
            "type": "object",
            "properties": {
                "account": {
                    "type": "string",
                    "format": "uuid"
                },
                "account_holder_name": {
                    "type": "string"
                },
                "account_holder_type": {
                    "$ref": "#/definitions/bank.AccountHolderType"
                },
                "account_id": {
                    "$ref": "#/definitions/uuid.NullUUID"
                },
                "account_type": {
                    "$ref": "#/definitions/bank.AccountType"
                },
                "available_payout_methods": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "bank_name": {
                    "type": "string"
                },
                "country": {
                    "type": "string"
                },
                "created_at": {
                    "type": "string"
                },
                "currency": {
                    "type": "string"
                },
                "customer": {
                    "type": "string",
                    "format": "uuid"
                },
                "customer_id": {
                    "$ref": "#/definitions/uuid.NullUUID"
                },
                "default_for_currency": {
                    "type": "boolean"
                },
                "fingerprint": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "last4": {
                    "type": "string"
                },
                "livemode": {
                    "type": "boolean"
                },
                "metadata": {
                    "$ref": "#/definitions/core.JSONB"
                },
                "object": {
                    "type": "string"
                },
                "routing_number": {
                    "type": "string"
                },
                "status": {
                    "$ref": "#/definitions/bank.Status"
                },
                "updated_at": {
                    "type": "string"
                }
            }
        },
        "bank.Status": {
            "type": "string",
            "enum": [
                "new",
                "validated",
                "verified",
                "verification_failed",
                "errored"
            ],
            "x-enum-varnames": [
                "StatusNew",
                "StatusValidated",
                "StatusVerified",
                "StatusVerificationFailed",
                "StatusErrored"
            ]
        },
        "card.AddressLine1Check": {
            "type": "string",
            "enum": [
                "pass",
                "fail",
                "unavailable",
                "unchecked"
            ],
            "x-enum-varnames": [
                "AddressLine1CheckPass",
                "AddressLine1CheckFail",
                "AddressLine1CheckUnavailable",
                "AddressLine1CheckUnchecked"
            ]
        },
        "card.AddressZipCheck": {
            "type": "string",
            "enum": [
                "pass",
                "fail",
                "unavailable",
                "unchecked"
            ],
            "x-enum-varnames": [
                "AddressZipCheckPass",
                "AddressZipCheckFail",
                "AddressZipCheckUnavailable",
                "AddressZipCheckUnchecked"
            ]
        },
        "card.Bind.request": {
            "type": "object",
            "properties": {
                "account": {
                    "type": "string",
                    "format": "uuid"
                },
                "address_city": {
                    "type": "string"
                },
                "address_country": {
                    "type": "string"
                },
                "address_line1": {
                    "type": "string"
                },
                "address_line1_check": {
                    "$ref": "#/definitions/card.AddressLine1Check"
                },
                "address_line2": {
                    "type": "string"
                },
                "address_state": {
                    "type": "string"
                },
                "address_zip": {
                    "type": "string"
                },
                "address_zip_check": {
                    "$ref": "#/definitions/card.AddressZipCheck"
                },
                "available_payout_methods": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "brand": {
                    "$ref": "#/definitions/card.Brand"
                },
                "country": {
                    "type": "string"
                },
                "created_at": {
                    "type": "string"
                },
                "currency": {
                    "type": "string"
                },
                "customer": {
                    "type": "string",
                    "format": "uuid"
                },
                "cvc_check": {
                    "$ref": "#/definitions/card.CvcCheck"
                },
                "default_for_currency": {
                    "type": "boolean"
                },
                "dynamic_last4": {
                    "type": "string"
                },
                "exp_month": {
                    "type": "integer"
                },
                "exp_year": {
                    "type": "integer"
                },
                "fingerprint": {
                    "type": "string"
                },
                "funding": {
                    "$ref": "#/definitions/card.Funding"
                },
                "id": {
                    "type": "string"
                },
                "last4": {
                    "type": "string"
                },
                "livemode": {
                    "type": "boolean"
                },
                "metadata": {
                    "$ref": "#/definitions/core.JSONB"
                },
                "name": {
                    "type": "string"
                },
                "object": {
                    "type": "string"
                },
                "status": {
                    "type": "string"
                },
                "tokenization_method": {
                    "$ref": "#/definitions/card.TokenizationMethod"
                },
                "updated_at": {
                    "type": "string"
                }
            }
        },
        "card.Brand": {
            "type": "string",
            "enum": [
                "American Express",
                "Diners Club",
                "Discover",
                "JCB",
                "MasterCard",
                "UnionPay",
                "Visa",
                "Unknown"
            ],
            "x-enum-varnames": [
                "BrandAmericanExpress",
                "BrandDinersClub",
                "BrandDiscover",
                "BrandJCB",
                "BrandMasterCard",
                "BrandUnionPay",
                "BrandVisa",
                "BrandUnknown"
            ]
        },
        "card.CvcCheck": {
            "type": "string",
            "enum": [
                "pass",
                "fail",
                "unavailable",
                "unchecked"
            ],
            "x-enum-varnames": [
                "CvcCheckPass",
                "CvcCheckFail",
                "CvcCheckUnavailable",
                "CvcCheckUnchecked"
            ]
        },
        "card.Funding": {
            "type": "string",
            "enum": [
                "credit",
                "debit",
                "prepaid",
                "unknown"
            ],
            "x-enum-varnames": [
                "FundingCredit",
                "FundingDebit",
                "FundingPrepaid",
                "FundingUnknown"
            ]
        },
        "card.TokenizationMethod": {
            "type": "string",
            "enum": [
                "android_pay",
                "apple_pay",
                "masterpass",
                "visa_checkout",
                "unknown"
            ],
            "x-enum-varnames": [
                "TokenizationMethodAndroidPay",
                "TokenizationMethodApplePay",
                "TokenizationMethodMasterpass",
                "TokenizationMethodVisaCheckout",
                "TokenizationMethodUnknown"
            ]
        },
        "cash.CashBalance": {
            "type": "object",
            "properties": {
                "available": {
                    "description": "A hash of all cash balances available to this customer. You cannot delete a customer with any cash balances, even if the balance is 0. Amounts are represented in the [smallest currency unit](https://stripe.com/docs/currencies#zero-decimal).",
                    "allOf": [
                        {
                            "$ref": "#/definitions/core.JSONB"
                        }
                    ]
                },
                "created_at": {
                    "type": "string"
                },
                "customer": {
                    "description": "The ID of the customer whose cash balance this object represents.",
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "livemode": {
                    "type": "boolean"
                },
                "metadata": {
                    "$ref": "#/definitions/core.JSONB"
                },
                "object": {
                    "type": "string"
                },
                "setting_reconciliation_mode": {
                    "description": "The configuration for how funds that land in the customer cash balance are reconciled.",
                    "type": "string"
                },
                "setting_using_merchant_default": {
                    "description": "A flag to indicate if reconciliation mode returned is the user's default or is specific to this customer cash balance",
                    "type": "boolean"
                },
                "updated_at": {
                    "type": "string"
                }
            }
        },
        "charge.Bind.request": {
            "type": "object",
            "properties": {
                "amount": {
                    "type": "integer"
                },
                "amount_captured": {
                    "type": "integer"
                },
                "amount_refunded": {
                    "type": "integer"
                },
                "balance_transaction": {
                    "type": "string",
                    "format": "uuid"
                },
                "billing_details": {
                    "$ref": "#/definitions/address.BillingDetails"
                },
                "calculated_statement_descriptor": {
                    "type": "string"
                },
                "captured": {
                    "type": "boolean"
                },
                "created_at": {
                    "type": "string"
                },
                "currency": {
                    "type": "string"
                },
                "customer": {
                    "type": "string",
                    "format": "uuid"
                },
                "description": {
                    "type": "string"
                },
                "disputed": {
                    "type": "boolean"
                },
                "failure_balance_transaction": {
                    "type": "string",
                    "format": "uuid"
                },
                "failure_code": {
                    "type": "string"
                },
                "failure_message": {
                    "type": "string"
                },
                "fraud_details": {
                    "$ref": "#/definitions/charge.ChargeFraudDetails"
                },
                "id": {
                    "type": "string"
                },
                "livemode": {
                    "type": "boolean"
                },
                "metadata": {
                    "$ref": "#/definitions/core.JSONB"
                },
                "object": {
                    "type": "string"
                },
                "outcome": {
                    "$ref": "#/definitions/charge.ChargeOutcome"
                },
                "paid": {
                    "type": "boolean"
                },
                "payment_method": {
                    "type": "string",
                    "format": "uuid"
                },
                "payment_method_details": {
                    "$ref": "#/definitions/details.PaymentMethodDetails"
                },
                "radar_options": {
                    "$ref": "#/definitions/radar.RadarOptions"
                },
                "receipt_email": {
                    "type": "string"
                },
                "receipt_number": {
                    "type": "string"
                },
                "receipt_url": {
                    "type": "string"
                },
                "refunded": {
                    "type": "boolean"
                },
                "review": {
                    "type": "string",
                    "format": "uuid"
                },
                "shipping": {
                    "$ref": "#/definitions/address.Shipping"
                },
                "statement_descriptor": {
                    "type": "string"
                },
                "statement_descriptor_suffix": {
                    "type": "string"
                },
                "status": {
                    "$ref": "#/definitions/charge.Status"
                },
                "updated_at": {
                    "type": "string"
                }
            }
        },
        "charge.Charge": {
            "type": "object",
            "properties": {
                "amount": {
                    "type": "integer"
                },
                "amount_captured": {
                    "type": "integer"
                },
                "amount_refunded": {
                    "type": "integer"
                },
                "balance_transaction": {
                    "$ref": "#/definitions/balance.BalanceTransaction"
                },
                "billing_details": {
                    "$ref": "#/definitions/address.BillingDetails"
                },
                "calculated_statement_descriptor": {
                    "type": "string"
                },
                "captured": {
                    "type": "boolean"
                },
                "created_at": {
                    "type": "string"
                },
                "currency": {
                    "type": "string"
                },
                "customer": {
                    "$ref": "#/definitions/customer.Customer"
                },
                "description": {
                    "type": "string"
                },
                "disputed": {
                    "type": "boolean"
                },
                "failure_balance_transaction": {
                    "$ref": "#/definitions/balance.BalanceTransaction"
                },
                "failure_code": {
                    "type": "string"
                },
                "failure_message": {
                    "type": "string"
                },
                "fraud_details": {
                    "$ref": "#/definitions/charge.ChargeFraudDetails"
                },
                "id": {
                    "type": "string"
                },
                "livemode": {
                    "type": "boolean"
                },
                "metadata": {
                    "$ref": "#/definitions/core.JSONB"
                },
                "object": {
                    "type": "string"
                },
                "outcome": {
                    "$ref": "#/definitions/charge.ChargeOutcome"
                },
                "paid": {
                    "type": "boolean"
                },
                "payment_method": {
                    "$ref": "#/definitions/method.PaymentMethod"
                },
                "payment_method_details": {
                    "$ref": "#/definitions/details.PaymentMethodDetails"
                },
                "radar_options": {
                    "$ref": "#/definitions/radar.RadarOptions"
                },
                "receipt_email": {
                    "type": "string"
                },
                "receipt_number": {
                    "type": "string"
                },
                "receipt_url": {
                    "type": "string"
                },
                "refunded": {
                    "type": "boolean"
                },
                "review": {
                    "$ref": "#/definitions/review.Review"
                },
                "shipping": {
                    "$ref": "#/definitions/address.Shipping"
                },
                "statement_descriptor": {
                    "type": "string"
                },
                "statement_descriptor_suffix": {
                    "type": "string"
                },
                "status": {
                    "$ref": "#/definitions/charge.Status"
                },
                "updated_at": {
                    "type": "string"
                }
            }
        },
        "charge.ChargeFraudDetails": {
            "type": "object",
            "properties": {
                "created_at": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "livemode": {
                    "type": "boolean"
                },
                "metadata": {
                    "$ref": "#/definitions/core.JSONB"
                },
                "object": {
                    "type": "string"
                },
                "stripe_report": {
                    "description": "Assessments from Stripe. If set, the value is `fraudulent`.",
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                },
                "user_report": {
                    "description": "Assessments reported by you. If set, possible values of are `safe` and `fraudulent`.",
                    "type": "string"
                }
            }
        },
        "charge.ChargeOutcome": {
            "type": "object",
            "properties": {
                "created_at": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "livemode": {
                    "type": "boolean"
                },
                "metadata": {
                    "$ref": "#/definitions/core.JSONB"
                },
                "network_status": {
                    "description": "Possible values are `approved_by_network`, `declined_by_network`, `not_sent_to_network`, and `reversed_after_approval`. The value `reversed_after_approval` indicates the payment was [blocked by Stripe](https://stripe.com/docs/declines#blocked-payments) after bank authorization, and may temporarily appear as \\\"pending\\\" on a cardholder's statement.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/charge.NetworkStatus"
                        }
                    ]
                },
                "object": {
                    "type": "string"
                },
                "reason": {
                    "description": "An enumerated value providing a more detailed explanation of the outcome's `type`. Charges blocked by Radar's default block rule have the value `highest_risk_level`. Charges placed in review by Radar's default review rule have the value `elevated_risk_level`. Charges authorized, blocked, or placed in review by custom rules have the value `rule`. See [understanding declines](https://stripe.com/docs/declines) for more details.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/charge.Reason"
                        }
                    ]
                },
                "risk_level": {
                    "description": "Stripe Radar's evaluation of the riskiness of the payment. Possible values for evaluated payments are `normal`, `elevated`, `highest`. For non-card payments, and card-based payments predating the public assignment of risk levels, this field will have the value `not_assessed`. In the event of an error in the evaluation, this field will have the value `unknown`. This field is only available with Radar.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/charge.RiskLevel"
                        }
                    ]
                },
                "risk_score": {
                    "description": "Stripe Radar's evaluation of the riskiness of the payment. Possible values for evaluated payments are between 0 and 100. For non-card payments, card-based payments predating the public assignment of risk scores, or in the event of an error during evaluation, this field will not be present. This field is only available with Radar for Fraud Teams.",
                    "type": "integer"
                },
                "rule": {
                    "$ref": "#/definitions/rule.Rule"
                },
                "seller_message": {
                    "description": "A human-readable description of the outcome type and reason, designed for you (the recipient of the payment), not your customer.",
                    "type": "string"
                },
                "type": {
                    "description": "Possible values are `authorized`, `manual_review`, `issuer_declined`, `blocked`, and `invalid`. See [understanding declines](https://stripe.com/docs/declines) and [Radar reviews](https://stripe.com/docs/radar/reviews) for details.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/charge.Type"
                        }
                    ]
                },
                "updated_at": {
                    "type": "string"
                }
            }
        },
        "charge.NetworkStatus": {
            "type": "string",
            "enum": [
                "approved_by_network",
                "declined_by_network",
                "not_sent_to_network",
                "reversed_after_approval"
            ],
            "x-enum-varnames": [
                "NetworkStatusApprovedByNetwork",
                "NetworkStatusDeclinedByNetwork",
                "NetworkStatusNotSentToNetwork",
                "NetworkStatusReversedAfterApproval"
            ]
        },
        "charge.Reason": {
            "type": "string",
            "enum": [
                "highest_risk_level",
                "elevated_risk_level"
            ],
            "x-enum-varnames": [
                "ReasonHighestRiskLevel",
                "ReasonElevatedRiskLevel"
            ]
        },
        "charge.RiskLevel": {
            "type": "string",
            "enum": [
                "normal",
                "elevated",
                "highest",
                "not_assessed",
                "unknown"
            ],
            "x-enum-varnames": [
                "RiskLevelNormal",
                "RiskLevelElevated",
                "RiskLevelHighest",
                "RiskLevelNotAssessed",
                "RiskLevelUnknown"
            ]
        },
        "charge.Status": {
            "type": "string",
            "enum": [
                "succeeded",
                "pending",
                "failed"
            ],
            "x-enum-varnames": [
                "StatusSucceeded",
                "StatusPending",
                "StatusFailed"
            ]
        },
        "charge.Type": {
            "type": "string",
            "enum": [
                "authorized",
                "manual_review",
                "issuer_declined",
                "blocked",
                "invalid"
            ],
            "x-enum-varnames": [
                "TypeAuthorized",
                "TypeManualReview",
                "TypeIssuerDeclined",
                "TypeBlocked",
                "TypeInvalid"
            ]
        },
        "checkout.BillingAddressCollection": {
            "type": "string",
            "enum": [
                "auto",
                "required"
            ],
            "x-enum-varnames": [
                "BillingAddressCollectionAuto",
                "BillingAddressCollectionRequired"
            ]
        },
        "checkout.CheckoutSession": {
            "type": "object",
            "properties": {
                "after_expiration": {
                    "$ref": "#/definitions/page.PaymentPagesCheckoutSessionAfterExpiration"
                },
                "allow_promotion_codes": {
                    "type": "boolean"
                },
                "amount_subtotal": {
                    "type": "integer"
                },
                "amount_total": {
                    "type": "integer"
                },
                "automatic_tax": {
                    "type": "boolean"
                },
                "billing_address_collection": {
                    "$ref": "#/definitions/checkout.BillingAddressCollection"
                },
                "cancel_url": {
                    "type": "string"
                },
                "client_reference_id": {
                    "type": "string"
                },
                "consent": {
                    "$ref": "#/definitions/page.PaymentPagesCheckoutSessionConsent"
                },
                "consent_collection": {
                    "$ref": "#/definitions/page.PaymentPagesCheckoutSessionConsentCollection"
                },
                "created_at": {
                    "type": "string"
                },
                "currency": {
                    "type": "string"
                },
                "custom_text": {
                    "$ref": "#/definitions/page.PaymentPagesCheckoutSessionCustomText"
                },
                "customer": {
                    "$ref": "#/definitions/customer.Customer"
                },
                "customer_creation": {
                    "$ref": "#/definitions/checkout.CustomerCreation"
                },
                "customer_details": {
                    "$ref": "#/definitions/page.PaymentPagesCheckoutSessionCustomerDetails"
                },
                "customer_email": {
                    "type": "string"
                },
                "expires_at": {
                    "type": "integer"
                },
                "id": {
                    "type": "string"
                },
                "invoice": {
                    "$ref": "#/definitions/invoice.Invoice"
                },
                "invoice_creation": {
                    "$ref": "#/definitions/page.PaymentPagesCheckoutSessionInvoiceCreation"
                },
                "line_items": {
                    "type": "array",
                    "items": {
                        "type": "string",
                        "format": "uuid"
                    }
                },
                "livemode": {
                    "type": "boolean"
                },
                "locale": {
                    "$ref": "#/definitions/checkout.Locale"
                },
                "metadata": {
                    "$ref": "#/definitions/core.JSONB"
                },
                "mode": {
                    "$ref": "#/definitions/checkout.Mode"
                },
                "object": {
                    "type": "string"
                },
                "payment_intent": {
                    "$ref": "#/definitions/intent.PaymentIntent"
                },
                "payment_link": {
                    "$ref": "#/definitions/link.PaymentLink"
                },
                "payment_method_collection": {
                    "$ref": "#/definitions/checkout.PaymentMethodCollection"
                },
                "payment_method_options": {
                    "$ref": "#/definitions/options.CheckoutSessionPaymentMethodOptions"
                },
                "payment_method_types": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "payment_status": {
                    "$ref": "#/definitions/checkout.PaymentStatus"
                },
                "phone_number_collection": {
                    "type": "boolean"
                },
                "recovered_from": {
                    "type": "string"
                },
                "setup_intent": {
                    "$ref": "#/definitions/setupIntent.SetupIntent"
                },
                "shipping_address_collection": {
                    "$ref": "#/definitions/page.PaymentPagesCheckoutSessionShippingAddressCollection"
                },
                "shipping_cost": {
                    "$ref": "#/definitions/page.PaymentPagesCheckoutSessionShippingCost"
                },
                "shipping_details": {
                    "$ref": "#/definitions/address.Shipping"
                },
                "shipping_options": {
                    "type": "array",
                    "items": {
                        "type": "string",
                        "format": "uuid"
                    }
                },
                "status": {
                    "$ref": "#/definitions/checkout.Status"
                },
                "submit_type": {
                    "$ref": "#/definitions/checkout.SubmitType"
                },
                "subscription": {
                    "$ref": "#/definitions/subscription.Subscription"
                },
                "success_url": {
                    "type": "string"
                },
                "tax_id_collection": {
                    "type": "boolean"
                },
                "total_details": {
                    "$ref": "#/definitions/page.PaymentPagesCheckoutSessionTotalDetails"
                },
                "updated_at": {
                    "type": "string"
                },
                "url": {
                    "type": "string"
                }
            }
        },
        "checkout.CustomerCreation": {
            "type": "string",
            "enum": [
                "if_required",
                "always"
            ],
            "x-enum-varnames": [
                "CustomerCreationIfRequired",
                "CustomerCreationAlways"
            ]
        },
        "checkout.Locale": {
            "type": "string",
            "enum": [
                "auto",
                "bg",
                "cs",
                "da",
                "de",
                "el",
                "en",
                "en-GB",
                "es",
                "es-419",
                "et",
                "fi",
                "fil",
                "fr",
                "fr-CA",
                "hr",
                "hu",
                "id",
                "it",
                "ja",
                "ko",
                "lt",
                "lv",
                "ms",
                "mt",
                "nb",
                "nl",
                "pl",
                "pt",
                "pt-BR",
                "ro",
                "ru",
                "sk",
                "sl",
                "sv",
                "th",
                "tr",
                "vi",
                "zh",
                "zh-HK",
                "zh-TW"
            ],
            "x-enum-varnames": [
                "Localeauto",
                "Localebg",
                "Localecs",
                "Localeda",
                "Localede",
                "Localeel",
                "Localeen",
                "Localeen_GB",
                "Localees",
                "Localees_419",
                "Localeet",
                "Localefi",
                "Localefil",
                "Localefr",
                "Localefr_CA",
                "Localehr",
                "Localehu",
                "Localeid",
                "Localeit",
                "Localeja",
                "Localeko",
                "Localelt",
                "Localelv",
                "Localems",
                "Localemt",
                "Localenb",
                "Localenl",
                "Localepl",
                "Localept",
                "Localept_BR",
                "Localero",
                "Localeru",
                "Localesk",
                "Localesl",
                "Localesv",
                "Localeth",
                "Localetr",
                "Localevi",
                "Localezh",
                "Localezh_HK",
                "Localezh_TW"
            ]
        },
        "checkout.Mode": {
            "type": "string",
            "enum": [
                "payment",
                "setup",
                "subscription"
            ],
            "x-enum-varnames": [
                "ModePayment",
                "ModeSetup",
                "ModeSubscription"
            ]
        },
        "checkout.PaymentMethodCollection": {
            "type": "string",
            "enum": [
                "always",
                "if_required"
            ],
            "x-enum-varnames": [
                "PaymentMethodCollectionAlways",
                "PaymentMethodCollectionIfRequired"
            ]
        },
        "checkout.PaymentStatus": {
            "type": "string",
            "enum": [
                "paid",
                "unpaid",
                "no_payment_required"
            ],
            "x-enum-varnames": [
                "PaymentStatusPaid",
                "PaymentStatusUnpaid",
                "PaymentStatusNoPaymentRequired"
            ]
        },
        "checkout.Status": {
            "type": "string",
            "enum": [
                "open",
                "complete",
                "expired"
            ],
            "x-enum-varnames": [
                "StatusOpen",
                "StatusComplete",
                "StatusExpired"
            ]
        },
        "checkout.SubmitType": {
            "type": "string",
            "enum": [
                "auto",
                "pay",
                "book",
                "donate"
            ],
            "x-enum-varnames": [
                "SubmitTypeAuto",
                "SubmitTypePay",
                "SubmitTypeBook",
                "SubmitTypeDonate"
            ]
        },
        "core.JSONB": {
            "type": "object",
            "additionalProperties": true
        },
        "country.Country": {
            "type": "object",
            "properties": {
                "created_at": {
                    "type": "string"
                },
                "display_name": {
                    "description": "The country name appropriate for display.",
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "iso_2": {
                    "description": "The 2 character ISO code of the country in lower case",
                    "type": "string"
                },
                "iso_3": {
                    "description": "The 2 character ISO code of the country in lower case",
                    "type": "string"
                },
                "livemode": {
                    "type": "boolean"
                },
                "metadata": {
                    "$ref": "#/definitions/core.JSONB"
                },
                "name": {
                    "description": "The normalized country name in upper case.",
                    "type": "string"
                },
                "num_code": {
                    "description": "The numerical ISO code for the country.",
                    "type": "string"
                },
                "object": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                }
            }
        },
        "coupon.Bind.request": {
            "type": "object",
            "properties": {
                "amount_off": {
                    "type": "integer"
                },
                "applies_to": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "created_at": {
                    "type": "string"
                },
                "currency": {
                    "type": "string"
                },
                "duration": {
                    "$ref": "#/definitions/coupon.Duration"
                },
                "duration_in_months": {
                    "type": "integer"
                },
                "id": {
                    "type": "string"
                },
                "livemode": {
                    "type": "boolean"
                },
                "max_redemptions": {
                    "type": "integer"
                },
                "metadata": {
                    "$ref": "#/definitions/core.JSONB"
                },
                "name": {
                    "type": "string"
                },
                "object": {
                    "type": "string"
                },
                "percent_off": {
                    "type": "number"
                },
                "redeem_by": {
                    "type": "integer"
                },
                "times_redeemed": {
                    "type": "integer"
                },
                "updated_at": {
                    "type": "string"
                },
                "valid": {
                    "type": "boolean"
                }
            }
        },
        "coupon.Coupon": {
            "type": "object",
            "properties": {
                "amount_off": {
                    "type": "integer"
                },
                "applies_to": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "created_at": {
                    "type": "string"
                },
                "currency": {
                    "type": "string"
                },
                "duration": {
                    "$ref": "#/definitions/coupon.Duration"
                },
                "duration_in_months": {
                    "type": "integer"
                },
                "id": {
                    "type": "string"
                },
                "livemode": {
                    "type": "boolean"
                },
                "max_redemptions": {
                    "type": "integer"
                },
                "metadata": {
                    "$ref": "#/definitions/core.JSONB"
                },
                "name": {
                    "type": "string"
                },
                "object": {
                    "type": "string"
                },
                "percent_off": {
                    "type": "number"
                },
                "redeem_by": {
                    "type": "integer"
                },
                "times_redeemed": {
                    "type": "integer"
                },
                "updated_at": {
                    "type": "string"
                },
                "valid": {
                    "type": "boolean"
                }
            }
        },
        "coupon.Duration": {
            "type": "string",
            "enum": [
                "once",
                "repeating",
                "forever"
            ],
            "x-enum-varnames": [
                "DurationOnce",
                "DurationRepeating",
                "DurationForever"
            ]
        },
        "credit.Bind.request": {
            "type": "object",
            "properties": {
                "amount": {
                    "description": "The integer amount in %s representing the total amount of the credit note, including tax.",
                    "type": "integer"
                },
                "created_at": {
                    "type": "string"
                },
                "currency": {
                    "description": "Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).",
                    "type": "string"
                },
                "customer": {
                    "type": "string",
                    "format": "uuid"
                },
                "customer_balance_transaction": {
                    "type": "string",
                    "format": "uuid"
                },
                "discount_amount": {
                    "description": "The integer amount in %s representing the total amount of discount that was credited.",
                    "type": "integer"
                },
                "id": {
                    "type": "string"
                },
                "invoice": {
                    "type": "string",
                    "format": "uuid"
                },
                "lines": {
                    "description": "The aggregate amounts calculated per discount for all line items.",
                    "type": "array",
                    "items": {
                        "type": "string",
                        "format": "uuid"
                    }
                },
                "livemode": {
                    "type": "boolean"
                },
                "memo": {
                    "description": "Customer-facing text that appears on the credit note PDF.",
                    "type": "string"
                },
                "metadata": {
                    "$ref": "#/definitions/core.JSONB"
                },
                "number": {
                    "description": "A unique number that identifies this particular credit note and appears on the PDF of the credit note and its associated invoice.",
                    "type": "string"
                },
                "object": {
                    "type": "string"
                },
                "out_of_band_amount": {
                    "description": "Amount that was credited outside of Stripe.",
                    "type": "integer"
                },
                "pdf": {
                    "description": "The link to download the PDF of the credit note.",
                    "type": "string"
                },
                "reason": {
                    "description": "Reason for issuing this credit note, one of `duplicate`, `fraudulent`, `order_change`, or `product_unsatisfactory`",
                    "allOf": [
                        {
                            "$ref": "#/definitions/credit.Reason"
                        }
                    ]
                },
                "refund": {
                    "type": "string",
                    "format": "uuid"
                },
                "status": {
                    "description": "Status of this credit note, one of `issued` or `void`. Learn more about [voiding credit notes](https://stripe.com/docs/billing/invoices/credit-notes#voiding).",
                    "allOf": [
                        {
                            "$ref": "#/definitions/credit.Status"
                        }
                    ]
                },
                "subtotal": {
                    "description": "The integer amount in %s representing the amount of the credit note, excluding exclusive tax and invoice level discounts.",
                    "type": "integer"
                },
                "subtotal_excluding_tax": {
                    "description": "The integer amount in %s representing the amount of the credit note, excluding all tax and invoice level discounts.",
                    "type": "integer"
                },
                "tax_amounts": {
                    "description": "The aggregate amounts calculated per tax rate for all line items.",
                    "type": "array",
                    "items": {
                        "type": "string",
                        "format": "uuid"
                    }
                },
                "total": {
                    "description": "The integer amount in %s representing the total amount of the credit note, including tax and all discount.",
                    "type": "integer"
                },
                "total_excluding_tax": {
                    "description": "The integer amount in %s representing the total amount of the credit note, excluding tax, but including discounts.",
                    "type": "integer"
                },
                "type": {
                    "description": "Type of this credit note, one of `pre_payment` or `post_payment`. A `pre_payment` credit note means it was issued when the invoice was open. A `post_payment` credit note means it was issued when the invoice was paid.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/credit.Type"
                        }
                    ]
                },
                "updated_at": {
                    "type": "string"
                },
                "voided_at": {
                    "description": "The time that the credit note was voided.",
                    "type": "string"
                }
            }
        },
        "credit.CreditNote": {
            "type": "object",
            "properties": {
                "amount": {
                    "description": "The integer amount in %s representing the total amount of the credit note, including tax.",
                    "type": "integer"
                },
                "created_at": {
                    "type": "string"
                },
                "currency": {
                    "description": "Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).",
                    "type": "string"
                },
                "customer": {
                    "$ref": "#/definitions/customer.Customer"
                },
                "customer_balance_transaction": {
                    "$ref": "#/definitions/balance.BalanceTransaction"
                },
                "discount_amount": {
                    "description": "The integer amount in %s representing the total amount of discount that was credited.",
                    "type": "integer"
                },
                "id": {
                    "type": "string"
                },
                "invoice": {
                    "$ref": "#/definitions/invoice.Invoice"
                },
                "lines": {
                    "description": "The aggregate amounts calculated per discount for all line items.",
                    "type": "array",
                    "items": {
                        "type": "string",
                        "format": "uuid"
                    }
                },
                "livemode": {
                    "type": "boolean"
                },
                "memo": {
                    "description": "Customer-facing text that appears on the credit note PDF.",
                    "type": "string"
                },
                "metadata": {
                    "$ref": "#/definitions/core.JSONB"
                },
                "number": {
                    "description": "A unique number that identifies this particular credit note and appears on the PDF of the credit note and its associated invoice.",
                    "type": "string"
                },
                "object": {
                    "type": "string"
                },
                "out_of_band_amount": {
                    "description": "Amount that was credited outside of Stripe.",
                    "type": "integer"
                },
                "pdf": {
                    "description": "The link to download the PDF of the credit note.",
                    "type": "string"
                },
                "reason": {
                    "description": "Reason for issuing this credit note, one of `duplicate`, `fraudulent`, `order_change`, or `product_unsatisfactory`",
                    "allOf": [
                        {
                            "$ref": "#/definitions/credit.Reason"
                        }
                    ]
                },
                "refund": {
                    "$ref": "#/definitions/refund.Refund"
                },
                "status": {
                    "description": "Status of this credit note, one of `issued` or `void`. Learn more about [voiding credit notes](https://stripe.com/docs/billing/invoices/credit-notes#voiding).",
                    "allOf": [
                        {
                            "$ref": "#/definitions/credit.Status"
                        }
                    ]
                },
                "subtotal": {
                    "description": "The integer amount in %s representing the amount of the credit note, excluding exclusive tax and invoice level discounts.",
                    "type": "integer"
                },
                "subtotal_excluding_tax": {
                    "description": "The integer amount in %s representing the amount of the credit note, excluding all tax and invoice level discounts.",
                    "type": "integer"
                },
                "tax_amounts": {
                    "description": "The aggregate amounts calculated per tax rate for all line items.",
                    "type": "array",
                    "items": {
                        "type": "string",
                        "format": "uuid"
                    }
                },
                "total": {
                    "description": "The integer amount in %s representing the total amount of the credit note, including tax and all discount.",
                    "type": "integer"
                },
                "total_excluding_tax": {
                    "description": "The integer amount in %s representing the total amount of the credit note, excluding tax, but including discounts.",
                    "type": "integer"
                },
                "type": {
                    "description": "Type of this credit note, one of `pre_payment` or `post_payment`. A `pre_payment` credit note means it was issued when the invoice was open. A `post_payment` credit note means it was issued when the invoice was paid.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/credit.Type"
                        }
                    ]
                },
                "updated_at": {
                    "type": "string"
                },
                "voided_at": {
                    "description": "The time that the credit note was voided.",
                    "type": "string"
                }
            }
        },
        "credit.Reason": {
            "type": "string",
            "enum": [
                "duplicate",
                "fraudulent",
                "order_change"
            ],
            "x-enum-varnames": [
                "ReasonDuplicate",
                "ReasonFraudulent",
                "ReasonOrderChange"
            ]
        },
        "credit.Status": {
            "type": "string",
            "enum": [
                "issued",
                "void"
            ],
            "x-enum-varnames": [
                "StatusIssued",
                "StatusVoid"
            ]
        },
        "credit.Type": {
            "type": "string",
            "enum": [
                "pre_payment",
                "post_payment"
            ],
            "x-enum-varnames": [
                "TypePrePayment",
                "TypePostPayment"
            ]
        },
        "customer.Customer": {
            "type": "object",
            "properties": {
                "address": {
                    "$ref": "#/definitions/address.Address"
                },
                "balance": {
                    "type": "integer"
                },
                "created_at": {
                    "type": "string"
                },
                "currency": {
                    "description": "CashBalance          *CashBalance                     `json:\"cash_balance,omitempty\"`",
                    "type": "string"
                },
                "delinquent": {
                    "type": "boolean"
                },
                "description": {
                    "type": "string"
                },
                "email": {
                    "description": "Discount             *Discount                        `json:\"discount,omitempty\"`",
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "invoice_credit_balance": {
                    "$ref": "#/definitions/core.JSONB"
                },
                "invoice_prefix": {
                    "type": "string"
                },
                "invoice_settings": {
                    "$ref": "#/definitions/settings.InvoiceSettingCustomerSetting"
                },
                "livemode": {
                    "type": "boolean"
                },
                "metadata": {
                    "$ref": "#/definitions/core.JSONB"
                },
                "name": {
                    "type": "string"
                },
                "next_invoice_sequence": {
                    "type": "integer"
                },
                "object": {
                    "type": "string"
                },
                "phone": {
                    "type": "string"
                },
                "preferred_locales": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "shipping": {
                    "$ref": "#/definitions/address.Shipping"
                },
                "tax": {
                    "description": "Sources              *ApmsSourcesSourceList                  `json:\"sources,omitempty\"`\nSubscriptions        *SubscriptionList                       `json:\"subscriptions,omitempty\"`",
                    "allOf": [
                        {
                            "$ref": "#/definitions/customer.CustomerTax"
                        }
                    ]
                },
                "tax_exempt": {
                    "$ref": "#/definitions/customer.TaxExempt"
                },
                "updated_at": {
                    "type": "string"
                }
            }
        },
        "customer.CustomerTax": {
            "type": "object",
            "properties": {
                "automatic_tax": {
                    "description": "Surfaces if automatic tax computation is possible given the current customer location information.",
                    "type": "string"
                },
                "country": {
                    "description": "The customer's country as identified by Stripe Tax.",
                    "type": "string"
                },
                "created_at": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "ip_address": {
                    "description": "A recent IP address of the customer used for tax reporting and tax location inference.",
                    "type": "string"
                },
                "livemode": {
                    "type": "boolean"
                },
                "metadata": {
                    "$ref": "#/definitions/core.JSONB"
                },
                "object": {
                    "type": "string"
                },
                "source": {
                    "description": "The data source used to infer the customer's location.",
                    "type": "string"
                },
                "state": {
                    "description": "The customer's state, county, province, or region as identified by Stripe Tax.",
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                }
            }
        },
        "customer.TaxExempt": {
            "type": "string",
            "enum": [
                "none",
                "exempt",
                "reverse"
            ],
            "x-enum-varnames": [
                "TaxExemptNone",
                "TaxExemptExempt",
                "TaxExemptReverse"
            ]
        },
        "details.PaymentMethodDetails": {
            "type": "object",
            "properties": {
                "ach_credit_transfer": {
                    "$ref": "#/definitions/details.PaymentMethodDetailsAchCreditTransfer"
                },
                "ach_debit": {
                    "$ref": "#/definitions/details.PaymentMethodDetailsAchDebit"
                },
                "acss_debit": {
                    "$ref": "#/definitions/details.PaymentMethodDetailsAcssDebit"
                },
                "affirm": {
                    "$ref": "#/definitions/details.PaymentMethodDetailsAffirm"
                },
                "afterpay_clearpay": {
                    "$ref": "#/definitions/details.PaymentMethodDetailsAfterpayClearpay"
                },
                "alipay": {
                    "$ref": "#/definitions/details.PaymentMethodDetailsAlipay"
                },
                "au_becs_debit": {
                    "$ref": "#/definitions/details.PaymentMethodDetailsAuBecsDebit"
                },
                "bacs_debit": {
                    "$ref": "#/definitions/details.PaymentMethodDetailsBacsDebit"
                },
                "bancontact": {
                    "$ref": "#/definitions/details.PaymentMethodDetailsBancontact"
                },
                "blik": {
                    "$ref": "#/definitions/details.PaymentMethodDetailsBlik"
                },
                "boleto": {
                    "$ref": "#/definitions/details.PaymentMethodDetailsBoleto"
                },
                "card": {
                    "$ref": "#/definitions/details.PaymentMethodDetailsCard"
                },
                "card_present": {
                    "$ref": "#/definitions/details.PaymentMethodDetailsCardPresent"
                },
                "created_at": {
                    "type": "string"
                },
                "customer_balance": {
                    "$ref": "#/definitions/details.PaymentMethodDetailsCustomerBalance"
                },
                "eps": {
                    "$ref": "#/definitions/details.PaymentMethodDetailsEps"
                },
                "fpx": {
                    "$ref": "#/definitions/details.PaymentMethodDetailsFpx"
                },
                "giropay": {
                    "$ref": "#/definitions/details.PaymentMethodDetailsGiropay"
                },
                "grabpay": {
                    "$ref": "#/definitions/details.PaymentMethodDetailsGrabpay"
                },
                "id": {
                    "type": "string"
                },
                "ideal": {
                    "$ref": "#/definitions/details.PaymentMethodDetailsIdeal"
                },
                "interac_present": {
                    "$ref": "#/definitions/details.PaymentMethodDetailsInteracPresent"
                },
                "klarna": {
                    "$ref": "#/definitions/details.PaymentMethodDetailsKlarna"
                },
                "konbini": {
                    "$ref": "#/definitions/details.PaymentMethodDetailsKonbini"
                },
                "link": {
                    "$ref": "#/definitions/details.PaymentMethodDetailsLink"
                },
                "livemode": {
                    "type": "boolean"
                },
                "metadata": {
                    "$ref": "#/definitions/core.JSONB"
                },
                "multibanco": {
                    "$ref": "#/definitions/details.PaymentMethodDetailsMultibanco"
                },
                "object": {
                    "type": "string"
                },
                "oxxo": {
                    "$ref": "#/definitions/details.PaymentMethodDetailsOxxo"
                },
                "p24": {
                    "$ref": "#/definitions/details.PaymentMethodDetailsP24"
                },
                "paynow": {
                    "$ref": "#/definitions/details.PaymentMethodDetailsPaynow"
                },
                "pix": {
                    "$ref": "#/definitions/details.PaymentMethodDetailsPix"
                },
                "promptpay": {
                    "$ref": "#/definitions/details.PaymentMethodDetailsPromptpay"
                },
                "sepa_debit": {
                    "$ref": "#/definitions/details.PaymentMethodDetailsSepaDebit"
                },
                "sofort": {
                    "$ref": "#/definitions/details.PaymentMethodDetailsSofort"
                },
                "stripe_account": {
                    "$ref": "#/definitions/details.PaymentMethodDetailsStripeAccount"
                },
                "updated_at": {
                    "type": "string"
                },
                "us_bank_account": {
                    "$ref": "#/definitions/details.PaymentMethodDetailsUsBankAccount"
                },
                "wechat": {
                    "$ref": "#/definitions/details.PaymentMethodDetailsWechat"
                },
                "wechat_pay": {
                    "$ref": "#/definitions/details.PaymentMethodDetailsWechatPay"
                }
            }
        },
        "details.PaymentMethodDetailsAchCreditTransfer": {
            "type": "object",
            "properties": {
                "account_number": {
                    "description": "Account number to transfer funds to.",
                    "type": "string"
                },
                "bank_name": {
                    "description": "Name of the bank associated with the routing number.",
                    "type": "string"
                },
                "created_at": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "livemode": {
                    "type": "boolean"
                },
                "metadata": {
                    "$ref": "#/definitions/core.JSONB"
                },
                "object": {
                    "type": "string"
                },
                "routing_number": {
                    "description": "Routing transit number for the bank account to transfer funds to.",
                    "type": "string"
                },
                "swift_code": {
                    "description": "SWIFT code of the bank associated with the routing number.",
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                }
            }
        },
        "details.PaymentMethodDetailsAchDebit": {
            "type": "object",
            "properties": {
                "account_holder_type": {
                    "description": "Type of entity that holds the account. This can be either `individual` or `company`.",
                    "type": "string"
                },
                "bank_name": {
                    "description": "Name of the bank associated with the bank account.",
                    "type": "string"
                },
                "country": {
                    "description": "Two-letter ISO code representing the country the bank account is located in.",
                    "type": "string"
                },
                "created_at": {
                    "type": "string"
                },
                "fingerprint": {
                    "description": "Uniquely identifies this particular bank account. You can use this attribute to check whether two bank accounts are the same.",
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "last4": {
                    "description": "Last four digits of the bank account number.",
                    "type": "string"
                },
                "livemode": {
                    "type": "boolean"
                },
                "metadata": {
                    "$ref": "#/definitions/core.JSONB"
                },
                "object": {
                    "type": "string"
                },
                "routing_number": {
                    "description": "Routing transit number of the bank account.",
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                }
            }
        },
        "details.PaymentMethodDetailsAcssDebit": {
            "type": "object",
            "properties": {
                "bank_name": {
                    "description": "Name of the bank associated with the bank account.",
                    "type": "string"
                },
                "created_at": {
                    "type": "string"
                },
                "fingerprint": {
                    "description": "Uniquely identifies this particular bank account. You can use this attribute to check whether two bank accounts are the same.",
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "institution_number": {
                    "description": "Institution number of the bank account",
                    "type": "string"
                },
                "last4": {
                    "description": "Last four digits of the bank account number.",
                    "type": "string"
                },
                "livemode": {
                    "type": "boolean"
                },
                "mandate": {
                    "description": "ID of the mandate used to make this payment.",
                    "type": "string"
                },
                "metadata": {
                    "$ref": "#/definitions/core.JSONB"
                },
                "object": {
                    "type": "string"
                },
                "transit_number": {
                    "description": "Transit number of the bank account.",
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                }
            }
        },
        "details.PaymentMethodDetailsAffirm": {
            "type": "object",
            "properties": {
                "created_at": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "livemode": {
                    "type": "boolean"
                },
                "metadata": {
                    "$ref": "#/definitions/core.JSONB"
                },
                "object": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                }
            }
        },
        "details.PaymentMethodDetailsAfterpayClearpay": {
            "type": "object",
            "properties": {
                "created_at": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "livemode": {
                    "type": "boolean"
                },
                "metadata": {
                    "$ref": "#/definitions/core.JSONB"
                },
                "object": {
                    "type": "string"
                },
                "reference": {
                    "description": "Order identifier shown to the merchant in Afterpay’s online portal.",
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                }
            }
        },
        "details.PaymentMethodDetailsAlipay": {
            "type": "object",
            "properties": {
                "buyer_id": {
                    "description": "Uniquely identifies this particular Alipay account. You can use this attribute to check whether two Alipay accounts are the same.",
                    "type": "string"
                },
                "created_at": {
                    "type": "string"
                },
                "fingerprint": {
                    "description": "Uniquely identifies this particular Alipay account. You can use this attribute to check whether two Alipay accounts are the same.",
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "livemode": {
                    "type": "boolean"
                },
                "metadata": {
                    "$ref": "#/definitions/core.JSONB"
                },
                "object": {
                    "type": "string"
                },
                "transaction_id": {
                    "description": "Transaction ID of this particular Alipay transaction.",
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                }
            }
        },
        "details.PaymentMethodDetailsAuBecsDebit": {
            "type": "object",
            "properties": {
                "bsb_number": {
                    "description": "Bank-State-Branch number of the bank account.",
                    "type": "string"
                },
                "created_at": {
                    "type": "string"
                },
                "fingerprint": {
                    "description": "Uniquely identifies this particular bank account. You can use this attribute to check whether two bank accounts are the same.",
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "last4": {
                    "description": "Last four digits of the bank account number.",
                    "type": "string"
                },
                "livemode": {
                    "type": "boolean"
                },
                "mandate": {
                    "description": "ID of the mandate used to make this payment.",
                    "type": "string"
                },
                "metadata": {
                    "$ref": "#/definitions/core.JSONB"
                },
                "object": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                }
            }
        },
        "details.PaymentMethodDetailsBacsDebit": {
            "type": "object",
            "properties": {
                "created_at": {
                    "type": "string"
                },
                "fingerprint": {
                    "description": "Uniquely identifies this particular bank account. You can use this attribute to check whether two bank accounts are the same.",
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "last4": {
                    "description": "Last four digits of the bank account number.",
                    "type": "string"
                },
                "livemode": {
                    "type": "boolean"
                },
                "mandate": {
                    "description": "ID of the mandate used to make this payment.",
                    "type": "string"
                },
                "metadata": {
                    "$ref": "#/definitions/core.JSONB"
                },
                "object": {
                    "type": "string"
                },
                "sort_code": {
                    "description": "Sort code of the bank account. (e.g., `10-20-30`)",
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                }
            }
        },
        "details.PaymentMethodDetailsBancontact": {
            "type": "object",
            "properties": {
                "bank_code": {
                    "description": "Bank code of bank associated with the bank account.",
                    "type": "string"
                },
                "bank_name": {
                    "description": "Name of the bank associated with the bank account.",
                    "type": "string"
                },
                "bic": {
                    "description": "Bank Identifier Code of the bank associated with the bank account.",
                    "type": "string"
                },
                "created_at": {
                    "type": "string"
                },
                "iban_last4": {
                    "description": "Last four characters of the IBAN.",
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "livemode": {
                    "type": "boolean"
                },
                "metadata": {
                    "$ref": "#/definitions/core.JSONB"
                },
                "object": {
                    "type": "string"
                },
                "preferred_language": {
                    "description": "Preferred language of the Bancontact authorization page that the customer is redirected to. Can be one of `en`, `de`, `fr`, or `nl`",
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                },
                "verified_name": {
                    "description": "Owner's verified full name. Values are verified or provided by Bancontact directly (if supported) at the time of authorization or settlement. They cannot be set or mutated.",
                    "type": "string"
                }
            }
        },
        "details.PaymentMethodDetailsBlik": {
            "type": "object",
            "properties": {
                "created_at": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "livemode": {
                    "type": "boolean"
                },
                "metadata": {
                    "$ref": "#/definitions/core.JSONB"
                },
                "object": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                }
            }
        },
        "details.PaymentMethodDetailsBoleto": {
            "type": "object",
            "properties": {
                "created_at": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "livemode": {
                    "type": "boolean"
                },
                "metadata": {
                    "$ref": "#/definitions/core.JSONB"
                },
                "object": {
                    "type": "string"
                },
                "tax_id": {
                    "description": "The tax ID of the customer (CPF for individuals consumers or CNPJ for businesses consumers)",
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                }
            }
        },
        "details.PaymentMethodDetailsCard": {
            "type": "object",
            "properties": {
                "address_line1_check": {
                    "description": "If a address line1 was provided, results of the check, one of `pass`, `fail`, `unavailable`, or `unchecked`.",
                    "type": "string"
                },
                "address_postal_code_check": {
                    "description": "If a address postal code was provided, results of the check, one of `pass`, `fail`, `unavailable`, or `unchecked`.",
                    "type": "string"
                },
                "brand": {
                    "description": "Card brand. Can be `amex`, `diners`, `discover`, `jcb`, `mastercard`, `unionpay`, `visa`, or `unknown`.",
                    "type": "string"
                },
                "country": {
                    "description": "Two-letter ISO code representing the country of the card. You could use this attribute to get a sense of the international breakdown of cards you've collected.",
                    "type": "string"
                },
                "created_at": {
                    "type": "string"
                },
                "cvc_check": {
                    "description": "If a CVC was provided, results of the check, one of `pass`, `fail`, `unavailable`, or `unchecked`.",
                    "type": "string"
                },
                "exp_month": {
                    "description": "Two-digit number representing the card's expiration month.",
                    "type": "integer"
                },
                "exp_year": {
                    "description": "Four-digit number representing the card's expiration year.",
                    "type": "integer"
                },
                "fingerprint": {
                    "description": "Uniquely identifies this particular card number. You can use this attribute to check whether two customers who’ve signed up with you are using the same card number, for example. For payment methods that tokenize card information (Apple Pay, Google Pay), the tokenized number might be provided instead of the underlying card number.  *Starting May 1, 2021, card fingerprint in India for Connect will change to allow two fingerprints for the same card --- one for India and one for the rest of the world.*",
                    "type": "string"
                },
                "funding": {
                    "description": "Card funding type. Can be `credit`, `debit`, `prepaid`, or `unknown`.",
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "installments": {
                    "type": "string",
                    "format": "uuid"
                },
                "last4": {
                    "description": "The last four digits of the card.",
                    "type": "string"
                },
                "livemode": {
                    "type": "boolean"
                },
                "mandate": {
                    "description": "ID of the mandate used to make this payment or created by it.",
                    "type": "string"
                },
                "metadata": {
                    "$ref": "#/definitions/core.JSONB"
                },
                "network": {
                    "description": "Identifies which network this charge was processed on. Can be `amex`, `cartes_bancaires`, `diners`, `discover`, `interac`, `jcb`, `mastercard`, `unionpay`, `visa`, or `unknown`.",
                    "type": "string"
                },
                "object": {
                    "type": "string"
                },
                "three_d_secure": {
                    "type": "string",
                    "format": "uuid"
                },
                "updated_at": {
                    "type": "string"
                },
                "wallet": {
                    "type": "string",
                    "format": "uuid"
                }
            }
        },
        "details.PaymentMethodDetailsCardPresent": {
            "type": "object",
            "properties": {
                "amount_authorized": {
                    "description": "The authorized amount",
                    "type": "integer"
                },
                "brand": {
                    "description": "Card brand. Can be `amex`, `diners`, `discover`, `jcb`, `mastercard`, `unionpay`, `visa`, or `unknown`.",
                    "type": "string"
                },
                "capture_before": {
                    "description": "When using manual capture, a future timestamp after which the charge will be automatically refunded if uncaptured.",
                    "type": "integer"
                },
                "cardholder_name": {
                    "description": "The cardholder name as read from the card, in [ISO 7813](https://en.wikipedia.org/wiki/ISO/IEC_7813) format. May include alphanumeric characters, special characters and first/last name separator (`/`). In some cases, the cardholder name may not be available depending on how the issuer has configured the card. Cardholder name is typically not available on swipe or contactless payments, such as those made with Apple Pay and Google Pay.",
                    "type": "string"
                },
                "country": {
                    "description": "Two-letter ISO code representing the country of the card. You could use this attribute to get a sense of the international breakdown of cards you've collected.",
                    "type": "string"
                },
                "created_at": {
                    "type": "string"
                },
                "emv_auth_data": {
                    "description": "Authorization response cryptogram.",
                    "type": "string"
                },
                "exp_month": {
                    "description": "Two-digit number representing the card's expiration month.",
                    "type": "integer"
                },
                "exp_year": {
                    "description": "Four-digit number representing the card's expiration year.",
                    "type": "integer"
                },
                "fingerprint": {
                    "description": "Uniquely identifies this particular card number. You can use this attribute to check whether two customers who’ve signed up with you are using the same card number, for example. For payment methods that tokenize card information (Apple Pay, Google Pay), the tokenized number might be provided instead of the underlying card number.  *Starting May 1, 2021, card fingerprint in India for Connect will change to allow two fingerprints for the same card --- one for India and one for the rest of the world.*",
                    "type": "string"
                },
                "funding": {
                    "description": "Card funding type. Can be `credit`, `debit`, `prepaid`, or `unknown`.",
                    "type": "string"
                },
                "generated_card": {
                    "description": "ID of a card PaymentMethod generated from the card_present PaymentMethod that may be attached to a Customer for future transactions. Only present if it was possible to generate a card PaymentMethod.",
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "incremental_authorization_supported": {
                    "description": "Whether this [PaymentIntent](https://stripe.com/docs/api/payment_intents) is eligible for incremental authorizations. Request support using [request_incremental_authorization_support](https://stripe.com/docs/api/payment_intents/create#create_payment_intent-payment_method_options-card_present-request_incremental_authorization_support).",
                    "type": "boolean"
                },
                "last4": {
                    "description": "The last four digits of the card.",
                    "type": "string"
                },
                "livemode": {
                    "type": "boolean"
                },
                "metadata": {
                    "$ref": "#/definitions/core.JSONB"
                },
                "network": {
                    "description": "Identifies which network this charge was processed on. Can be `amex`, `cartes_bancaires`, `diners`, `discover`, `interac`, `jcb`, `mastercard`, `unionpay`, `visa`, or `unknown`.",
                    "type": "string"
                },
                "object": {
                    "type": "string"
                },
                "overcapture_supported": {
                    "description": "Defines whether the authorized amount can be over-captured or not",
                    "type": "boolean"
                },
                "read_method": {
                    "description": "How card details were read in this transaction.",
                    "type": "string"
                },
                "receipt": {
                    "type": "string",
                    "format": "uuid"
                },
                "updated_at": {
                    "type": "string"
                }
            }
        },
        "details.PaymentMethodDetailsCustomerBalance": {
            "type": "object",
            "properties": {
                "created_at": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "livemode": {
                    "type": "boolean"
                },
                "metadata": {
                    "$ref": "#/definitions/core.JSONB"
                },
                "object": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                }
            }
        },
        "details.PaymentMethodDetailsEps": {
            "type": "object",
            "properties": {
                "bank": {
                    "description": "The customer's bank. Should be one of `arzte_und_apotheker_bank`, `austrian_anadi_bank_ag`, `bank_austria`, `bankhaus_carl_spangler`, `bankhaus_schelhammer_und_schattera_ag`, `bawag_psk_ag`, `bks_bank_ag`, `brull_kallmus_bank_ag`, `btv_vier_lander_bank`, `capital_bank_grawe_gruppe_ag`, `deutsche_bank_ag`, `dolomitenbank`, `easybank_ag`, `erste_bank_und_sparkassen`, `hypo_alpeadriabank_international_ag`, `hypo_noe_lb_fur_niederosterreich_u_wien`, `hypo_oberosterreich_salzburg_steiermark`, `hypo_tirol_bank_ag`, `hypo_vorarlberg_bank_ag`, `hypo_bank_burgenland_aktiengesellschaft`, `marchfelder_bank`, `oberbank_ag`, `raiffeisen_bankengruppe_osterreich`, `schoellerbank_ag`, `sparda_bank_wien`, `volksbank_gruppe`, `volkskreditbank_ag`, or `vr_bank_braunau`.",
                    "type": "string"
                },
                "created_at": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "livemode": {
                    "type": "boolean"
                },
                "metadata": {
                    "$ref": "#/definitions/core.JSONB"
                },
                "object": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                },
                "verified_name": {
                    "description": "Owner's verified full name. Values are verified or provided by EPS directly (if supported) at the time of authorization or settlement. They cannot be set or mutated. EPS rarely provides this information so the attribute is usually empty.",
                    "type": "string"
                }
            }
        },
        "details.PaymentMethodDetailsFpx": {
            "type": "object",
            "properties": {
                "bank": {
                    "description": "The customer's bank. Can be one of `affin_bank`, `agrobank`, `alliance_bank`, `ambank`, `bank_islam`, `bank_muamalat`, `bank_rakyat`, `bsn`, `cimb`, `hong_leong_bank`, `hsbc`, `kfh`, `maybank2u`, `ocbc`, `public_bank`, `rhb`, `standard_chartered`, `uob`, `deutsche_bank`, `maybank2e`, `pb_enterprise`, or `bank_of_china`.",
                    "type": "string"
                },
                "created_at": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "livemode": {
                    "type": "boolean"
                },
                "metadata": {
                    "$ref": "#/definitions/core.JSONB"
                },
                "object": {
                    "type": "string"
                },
                "transaction_id": {
                    "description": "Unique transaction id generated by FPX for every request from the merchant",
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                }
            }
        },
        "details.PaymentMethodDetailsGiropay": {
            "type": "object",
            "properties": {
                "bank_code": {
                    "description": "Bank code of bank associated with the bank account.",
                    "type": "string"
                },
                "bank_name": {
                    "description": "Name of the bank associated with the bank account.",
                    "type": "string"
                },
                "bic": {
                    "description": "Bank Identifier Code of the bank associated with the bank account.",
                    "type": "string"
                },
                "created_at": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "livemode": {
                    "type": "boolean"
                },
                "metadata": {
                    "$ref": "#/definitions/core.JSONB"
                },
                "object": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                },
                "verified_name": {
                    "description": "Owner's verified full name. Values are verified or provided by Giropay directly (if supported) at the time of authorization or settlement. They cannot be set or mutated. Giropay rarely provides this information so the attribute is usually empty.",
                    "type": "string"
                }
            }
        },
        "details.PaymentMethodDetailsGrabpay": {
            "type": "object",
            "properties": {
                "created_at": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "livemode": {
                    "type": "boolean"
                },
                "metadata": {
                    "$ref": "#/definitions/core.JSONB"
                },
                "object": {
                    "type": "string"
                },
                "transaction_id": {
                    "description": "Unique transaction id generated by GrabPay",
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                }
            }
        },
        "details.PaymentMethodDetailsIdeal": {
            "type": "object",
            "properties": {
                "bank": {
                    "description": "The customer's bank. Can be one of `abn_amro`, `asn_bank`, `bunq`, `handelsbanken`, `ing`, `knab`, `moneyou`, `rabobank`, `regiobank`, `revolut`, `sns_bank`, `triodos_bank`, or `van_lanschot`.",
                    "type": "string"
                },
                "bic": {
                    "description": "The Bank Identifier Code of the customer's bank.",
                    "type": "string"
                },
                "created_at": {
                    "type": "string"
                },
                "iban_last4": {
                    "description": "Last four characters of the IBAN.",
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "livemode": {
                    "type": "boolean"
                },
                "metadata": {
                    "$ref": "#/definitions/core.JSONB"
                },
                "object": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                },
                "verified_name": {
                    "description": "Owner's verified full name. Values are verified or provided by iDEAL directly (if supported) at the time of authorization or settlement. They cannot be set or mutated.",
                    "type": "string"
                }
            }
        },
        "details.PaymentMethodDetailsInteracPresent": {
            "type": "object",
            "properties": {
                "brand": {
                    "description": "Card brand. Can be `interac`, `mastercard` or `visa`.",
                    "type": "string"
                },
                "cardholder_name": {
                    "description": "The cardholder name as read from the card, in [ISO 7813](https://en.wikipedia.org/wiki/ISO/IEC_7813) format. May include alphanumeric characters, special characters and first/last name separator (`/`). In some cases, the cardholder name may not be available depending on how the issuer has configured the card. Cardholder name is typically not available on swipe or contactless payments, such as those made with Apple Pay and Google Pay.",
                    "type": "string"
                },
                "country": {
                    "description": "Two-letter ISO code representing the country of the card. You could use this attribute to get a sense of the international breakdown of cards you've collected.",
                    "type": "string"
                },
                "created_at": {
                    "type": "string"
                },
                "emv_auth_data": {
                    "description": "Authorization response cryptogram.",
                    "type": "string"
                },
                "exp_month": {
                    "description": "Two-digit number representing the card's expiration month.",
                    "type": "integer"
                },
                "exp_year": {
                    "description": "Four-digit number representing the card's expiration year.",
                    "type": "integer"
                },
                "fingerprint": {
                    "description": "Uniquely identifies this particular card number. You can use this attribute to check whether two customers who’ve signed up with you are using the same card number, for example. For payment methods that tokenize card information (Apple Pay, Google Pay), the tokenized number might be provided instead of the underlying card number.  *Starting May 1, 2021, card fingerprint in India for Connect will change to allow two fingerprints for the same card --- one for India and one for the rest of the world.*",
                    "type": "string"
                },
                "funding": {
                    "description": "Card funding type. Can be `credit`, `debit`, `prepaid`, or `unknown`.",
                    "type": "string"
                },
                "generated_card": {
                    "description": "ID of a card PaymentMethod generated from the card_present PaymentMethod that may be attached to a Customer for future transactions. Only present if it was possible to generate a card PaymentMethod.",
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "last4": {
                    "description": "The last four digits of the card.",
                    "type": "string"
                },
                "livemode": {
                    "type": "boolean"
                },
                "metadata": {
                    "$ref": "#/definitions/core.JSONB"
                },
                "network": {
                    "description": "Identifies which network this charge was processed on. Can be `amex`, `cartes_bancaires`, `diners`, `discover`, `interac`, `jcb`, `mastercard`, `unionpay`, `visa`, or `unknown`.",
                    "type": "string"
                },
                "object": {
                    "type": "string"
                },
                "preferred_locales": {
                    "description": "EMV tag 5F2D. Preferred languages specified by the integrated circuit chip.",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "read_method": {
                    "description": "How card details were read in this transaction.",
                    "type": "string"
                },
                "receipt": {
                    "type": "string",
                    "format": "uuid"
                },
                "updated_at": {
                    "type": "string"
                }
            }
        },
        "details.PaymentMethodDetailsKlarna": {
            "type": "object",
            "properties": {
                "created_at": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "livemode": {
                    "type": "boolean"
                },
                "metadata": {
                    "$ref": "#/definitions/core.JSONB"
                },
                "object": {
                    "type": "string"
                },
                "payment_method_category": {
                    "description": "The Klarna payment method used for this transaction. Can be one of `pay_later`, `pay_now`, `pay_with_financing`, or `pay_in_installments`",
                    "type": "string"
                },
                "preferred_locale": {
                    "description": "Preferred language of the Klarna authorization page that the customer is redirected to. Can be one of `de-AT`, `en-AT`, `nl-BE`, `fr-BE`, `en-BE`, `de-DE`, `en-DE`, `da-DK`, `en-DK`, `es-ES`, `en-ES`, `fi-FI`, `sv-FI`, `en-FI`, `en-GB`, `en-IE`, `it-IT`, `en-IT`, `nl-NL`, `en-NL`, `nb-NO`, `en-NO`, `sv-SE`, `en-SE`, `en-US`, `es-US`, `fr-FR`, `en-FR`, `en-AU`, `en-NZ`, `en-CA`, `fr-CA`, `pl-PL`, `en-PL`, `pt-PT`, `en-PT`, `de-CH`, `fr-CH`, `it-CH`, or `en-CH`",
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                }
            }
        },
        "details.PaymentMethodDetailsKonbini": {
            "type": "object",
            "properties": {
                "created_at": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "livemode": {
                    "type": "boolean"
                },
                "metadata": {
                    "$ref": "#/definitions/core.JSONB"
                },
                "object": {
                    "type": "string"
                },
                "store_chain": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                }
            }
        },
        "details.PaymentMethodDetailsLink": {
            "type": "object",
            "properties": {
                "created_at": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "livemode": {
                    "type": "boolean"
                },
                "metadata": {
                    "$ref": "#/definitions/core.JSONB"
                },
                "object": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                }
            }
        },
        "details.PaymentMethodDetailsMultibanco": {
            "type": "object",
            "properties": {
                "created_at": {
                    "type": "string"
                },
                "entity": {
                    "description": "Entity number associated with this Multibanco payment.",
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "livemode": {
                    "type": "boolean"
                },
                "metadata": {
                    "$ref": "#/definitions/core.JSONB"
                },
                "object": {
                    "type": "string"
                },
                "reference": {
                    "description": "Reference number associated with this Multibanco payment.",
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                }
            }
        },
        "details.PaymentMethodDetailsOxxo": {
            "type": "object",
            "properties": {
                "created_at": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "livemode": {
                    "type": "boolean"
                },
                "metadata": {
                    "$ref": "#/definitions/core.JSONB"
                },
                "number": {
                    "description": "OXXO reference number",
                    "type": "string"
                },
                "object": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                }
            }
        },
        "details.PaymentMethodDetailsP24": {
            "type": "object",
            "properties": {
                "bank": {
                    "description": "The customer's bank. Can be one of `ing`, `citi_handlowy`, `tmobile_usbugi_bankowe`, `plus_bank`, `etransfer_pocztowy24`, `banki_spbdzielcze`, `bank_nowy_bfg_sa`, `getin_bank`, `blik`, `noble_pay`, `ideabank`, `envelobank`, `santander_przelew24`, `nest_przelew`, `mbank_mtransfer`, `inteligo`, `pbac_z_ipko`, `bnp_paribas`, `credit_agricole`, `toyota_bank`, `bank_pekao_sa`, `volkswagen_bank`, `bank_millennium`, `alior_bank`, or `boz`.",
                    "type": "string"
                },
                "created_at": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "livemode": {
                    "type": "boolean"
                },
                "metadata": {
                    "$ref": "#/definitions/core.JSONB"
                },
                "object": {
                    "type": "string"
                },
                "reference": {
                    "description": "Unique reference for this Przelewy24 payment.",
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                },
                "verified_name": {
                    "description": "Owner's verified full name. Values are verified or provided by Przelewy24 directly (if supported) at the time of authorization or settlement. They cannot be set or mutated. Przelewy24 rarely provides this information so the attribute is usually empty.",
                    "type": "string"
                }
            }
        },
        "details.PaymentMethodDetailsPaynow": {
            "type": "object",
            "properties": {
                "created_at": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "livemode": {
                    "type": "boolean"
                },
                "metadata": {
                    "$ref": "#/definitions/core.JSONB"
                },
                "object": {
                    "type": "string"
                },
                "reference": {
                    "description": "Reference number associated with this PayNow payment",
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                }
            }
        },
        "details.PaymentMethodDetailsPix": {
            "type": "object",
            "properties": {
                "bank_transaction_id": {
                    "description": "Unique transaction id generated by BCB",
                    "type": "string"
                },
                "created_at": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "livemode": {
                    "type": "boolean"
                },
                "metadata": {
                    "$ref": "#/definitions/core.JSONB"
                },
                "object": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                }
            }
        },
        "details.PaymentMethodDetailsPromptpay": {
            "type": "object",
            "properties": {
                "created_at": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "livemode": {
                    "type": "boolean"
                },
                "metadata": {
                    "$ref": "#/definitions/core.JSONB"
                },
                "object": {
                    "type": "string"
                },
                "reference": {
                    "description": "Bill reference generated by PromptPay",
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                }
            }
        },
        "details.PaymentMethodDetailsSepaDebit": {
            "type": "object",
            "properties": {
                "bank_code": {
                    "description": "Bank code of bank associated with the bank account.",
                    "type": "string"
                },
                "branch_code": {
                    "description": "Branch code of bank associated with the bank account.",
                    "type": "string"
                },
                "country": {
                    "description": "Two-letter ISO code representing the country the bank account is located in.",
                    "type": "string"
                },
                "created_at": {
                    "type": "string"
                },
                "fingerprint": {
                    "description": "Uniquely identifies this particular bank account. You can use this attribute to check whether two bank accounts are the same.",
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "last4": {
                    "description": "Last four characters of the IBAN.",
                    "type": "string"
                },
                "livemode": {
                    "type": "boolean"
                },
                "mandate": {
                    "description": "ID of the mandate used to make this payment.",
                    "type": "string"
                },
                "metadata": {
                    "$ref": "#/definitions/core.JSONB"
                },
                "object": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                }
            }
        },
        "details.PaymentMethodDetailsSofort": {
            "type": "object",
            "properties": {
                "bank_code": {
                    "description": "Bank code of bank associated with the bank account.",
                    "type": "string"
                },
                "bank_name": {
                    "description": "Name of the bank associated with the bank account.",
                    "type": "string"
                },
                "bic": {
                    "description": "Bank Identifier Code of the bank associated with the bank account.",
                    "type": "string"
                },
                "country": {
                    "description": "Two-letter ISO code representing the country the bank account is located in.",
                    "type": "string"
                },
                "created_at": {
                    "type": "string"
                },
                "iban_last4": {
                    "description": "Last four characters of the IBAN.",
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "livemode": {
                    "type": "boolean"
                },
                "metadata": {
                    "$ref": "#/definitions/core.JSONB"
                },
                "object": {
                    "type": "string"
                },
                "preferred_language": {
                    "description": "Preferred language of the SOFORT authorization page that the customer is redirected to. Can be one of `de`, `en`, `es`, `fr`, `it`, `nl`, or `pl`",
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                },
                "verified_name": {
                    "description": "Owner's verified full name. Values are verified or provided by SOFORT directly (if supported) at the time of authorization or settlement. They cannot be set or mutated.",
                    "type": "string"
                }
            }
        },
        "details.PaymentMethodDetailsStripeAccount": {
            "type": "object",
            "properties": {
                "created_at": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "livemode": {
                    "type": "boolean"
                },
                "metadata": {
                    "$ref": "#/definitions/core.JSONB"
                },
                "object": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                }
            }
        },
        "details.PaymentMethodDetailsUsBankAccount": {
            "type": "object",
            "properties": {
                "account_holder_type": {
                    "description": "Account holder type: individual or company.",
                    "type": "string"
                },
                "account_type": {
                    "description": "Account type: checkings or savings. Defaults to checking if omitted.",
                    "type": "string"
                },
                "bank_name": {
                    "description": "Name of the bank associated with the bank account.",
                    "type": "string"
                },
                "created_at": {
                    "type": "string"
                },
                "fingerprint": {
                    "description": "Uniquely identifies this particular bank account. You can use this attribute to check whether two bank accounts are the same.",
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "last4": {
                    "description": "Last four digits of the bank account number.",
                    "type": "string"
                },
                "livemode": {
                    "type": "boolean"
                },
                "metadata": {
                    "$ref": "#/definitions/core.JSONB"
                },
                "object": {
                    "type": "string"
                },
                "routing_number": {
                    "description": "Routing number of the bank account.",
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                }
            }
        },
        "details.PaymentMethodDetailsWechat": {
            "type": "object",
            "properties": {
                "created_at": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "livemode": {
                    "type": "boolean"
                },
                "metadata": {
                    "$ref": "#/definitions/core.JSONB"
                },
                "object": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                }
            }
        },
        "details.PaymentMethodDetailsWechatPay": {
            "type": "object",
            "properties": {
                "created_at": {
                    "type": "string"
                },
                "fingerprint": {
                    "description": "Uniquely identifies this particular WeChat Pay account. You can use this attribute to check whether two WeChat accounts are the same.",
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "livemode": {
                    "type": "boolean"
                },
                "metadata": {
                    "$ref": "#/definitions/core.JSONB"
                },
                "object": {
                    "type": "string"
                },
                "transaction_id": {
                    "description": "Transaction ID of this particular WeChat Pay transaction.",
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                }
            }
        },
        "discount.Bind.request": {
            "type": "object",
            "properties": {
                "amount": {
                    "type": "integer"
                },
                "checkout_session": {
                    "type": "string"
                },
                "coupon": {
                    "type": "string",
                    "format": "uuid"
                },
                "created_at": {
                    "type": "string"
                },
                "customer": {
                    "type": "string",
                    "format": "uuid"
                },
                "end": {
                    "type": "integer"
                },
                "id": {
                    "type": "string"
                },
                "invoice": {
                    "type": "string"
                },
                "invoice_item": {
                    "type": "string"
                },
                "livemode": {
                    "type": "boolean"
                },
                "metadata": {
                    "$ref": "#/definitions/core.JSONB"
                },
                "object": {
                    "type": "string"
                },
                "promotion_code": {
                    "type": "string",
                    "format": "uuid"
                },
                "start": {
                    "type": "integer"
                },
                "subscription": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                }
            }
        },
        "discount.Discount": {
            "type": "object",
            "properties": {
                "amount": {
                    "type": "integer"
                },
                "checkout_session": {
                    "type": "string"
                },
                "coupon": {
                    "$ref": "#/definitions/coupon.Coupon"
                },
                "created_at": {
                    "type": "string"
                },
                "customer": {
                    "$ref": "#/definitions/customer.Customer"
                },
                "end": {
                    "type": "integer"
                },
                "id": {
                    "type": "string"
                },
                "invoice": {
                    "type": "string"
                },
                "invoice_item": {
                    "type": "string"
                },
                "livemode": {
                    "type": "boolean"
                },
                "metadata": {
                    "$ref": "#/definitions/core.JSONB"
                },
                "object": {
                    "type": "string"
                },
                "promotion_code": {
                    "$ref": "#/definitions/promotion.PromotionCode"
                },
                "start": {
                    "type": "integer"
                },
                "subscription": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                }
            }
        },
        "dispute.Bind.request": {
            "type": "object",
            "properties": {
                "amount": {
                    "description": "Disputed amount. Usually the amount of the charge, but can differ (usually because of currency fluctuation or because only part of the order is disputed).",
                    "type": "integer"
                },
                "balance_transactions": {
                    "description": "List of zero, one, or two balance transactions that show funds withdrawn and reinstated to your Stripe account as a result of this dispute.",
                    "type": "array",
                    "items": {
                        "type": "string",
                        "format": "uuid"
                    }
                },
                "charge": {
                    "type": "string",
                    "format": "uuid"
                },
                "created_at": {
                    "type": "string"
                },
                "currency": {
                    "description": "Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).",
                    "type": "string"
                },
                "evidence": {
                    "$ref": "#/definitions/dispute.DisputeEvidence"
                },
                "evidence_details": {
                    "$ref": "#/definitions/dispute.DisputeEvidenceDetails"
                },
                "id": {
                    "type": "string"
                },
                "is_charge_refundable": {
                    "description": "If true, it is still possible to refund the disputed payment. Once the payment has been fully refunded, no further funds will be withdrawn from your Stripe account as a result of this dispute.",
                    "type": "boolean"
                },
                "livemode": {
                    "type": "boolean"
                },
                "metadata": {
                    "$ref": "#/definitions/core.JSONB"
                },
                "object": {
                    "type": "string"
                },
                "payment_intent": {
                    "type": "string",
                    "format": "uuid"
                },
                "reason": {
                    "description": "Reason given by cardholder for dispute. Possible values are `bank_cannot_process`, `check_returned`, `credit_not_processed`, `customer_initiated`, `debit_not_authorized`, `duplicate`, `fraudulent`, `general`, `incorrect_account_details`, `insufficient_funds`, `product_not_received`, `product_unacceptable`, `subscription_canceled`, or `unrecognized`. Read more about [dispute reasons](https://stripe.com/docs/disputes/categories).",
                    "allOf": [
                        {
                            "$ref": "#/definitions/dispute.Reason"
                        }
                    ]
                },
                "status": {
                    "description": "Current status of dispute. Possible values are `warning_needs_response`, `warning_under_review`, `warning_closed`, `needs_response`, `under_review`, `charge_refunded`, `won`, or `lost`.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/dispute.Status"
                        }
                    ]
                },
                "updated_at": {
                    "type": "string"
                }
            }
        },
        "dispute.Dispute": {
            "type": "object",
            "properties": {
                "amount": {
                    "description": "Disputed amount. Usually the amount of the charge, but can differ (usually because of currency fluctuation or because only part of the order is disputed).",
                    "type": "integer"
                },
                "balance_transactions": {
                    "description": "List of zero, one, or two balance transactions that show funds withdrawn and reinstated to your Stripe account as a result of this dispute.",
                    "type": "array",
                    "items": {
                        "type": "string",
                        "format": "uuid"
                    }
                },
                "charge": {
                    "$ref": "#/definitions/charge.Charge"
                },
                "created_at": {
                    "type": "string"
                },
                "currency": {
                    "description": "Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).",
                    "type": "string"
                },
                "evidence": {
                    "$ref": "#/definitions/dispute.DisputeEvidence"
                },
                "evidence_details": {
                    "$ref": "#/definitions/dispute.DisputeEvidenceDetails"
                },
                "id": {
                    "type": "string"
                },
                "is_charge_refundable": {
                    "description": "If true, it is still possible to refund the disputed payment. Once the payment has been fully refunded, no further funds will be withdrawn from your Stripe account as a result of this dispute.",
                    "type": "boolean"
                },
                "livemode": {
                    "type": "boolean"
                },
                "metadata": {
                    "$ref": "#/definitions/core.JSONB"
                },
                "object": {
                    "type": "string"
                },
                "payment_intent": {
                    "$ref": "#/definitions/intent.PaymentIntent"
                },
                "reason": {
                    "description": "Reason given by cardholder for dispute. Possible values are `bank_cannot_process`, `check_returned`, `credit_not_processed`, `customer_initiated`, `debit_not_authorized`, `duplicate`, `fraudulent`, `general`, `incorrect_account_details`, `insufficient_funds`, `product_not_received`, `product_unacceptable`, `subscription_canceled`, or `unrecognized`. Read more about [dispute reasons](https://stripe.com/docs/disputes/categories).",
                    "allOf": [
                        {
                            "$ref": "#/definitions/dispute.Reason"
                        }
                    ]
                },
                "status": {
                    "description": "Current status of dispute. Possible values are `warning_needs_response`, `warning_under_review`, `warning_closed`, `needs_response`, `under_review`, `charge_refunded`, `won`, or `lost`.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/dispute.Status"
                        }
                    ]
                },
                "updated_at": {
                    "type": "string"
                }
            }
        },
        "dispute.DisputeEvidence": {
            "type": "object",
            "properties": {
                "access_activity_log": {
                    "description": "Any server or activity logs showing proof that the customer accessed or downloaded the purchased digital product. This information should include IP addresses, corresponding timestamps, and any detailed recorded activity.",
                    "type": "string"
                },
                "billing_address": {
                    "description": "The billing address provided by the customer.",
                    "type": "string"
                },
                "cancellation_policy": {
                    "$ref": "#/definitions/file.File"
                },
                "cancellation_policy_disclosure": {
                    "description": "An explanation of how and when the customer was shown your refund policy prior to purchase.",
                    "type": "string"
                },
                "cancellation_rebuttal": {
                    "description": "A justification for why the customer's subscription was not canceled.",
                    "type": "string"
                },
                "created_at": {
                    "type": "string"
                },
                "customer_communication": {
                    "$ref": "#/definitions/file.File"
                },
                "customer_email_address": {
                    "description": "The email address of the customer.",
                    "type": "string"
                },
                "customer_name": {
                    "description": "The name of the customer.",
                    "type": "string"
                },
                "customer_purchase_ip": {
                    "description": "The IP address that the customer used when making the purchase.",
                    "type": "string"
                },
                "customer_signature": {
                    "$ref": "#/definitions/file.File"
                },
                "duplicate_charge_documentation": {
                    "$ref": "#/definitions/file.File"
                },
                "duplicate_charge_explanation": {
                    "description": "An explanation of the difference between the disputed charge versus the prior charge that appears to be a duplicate.",
                    "type": "string"
                },
                "duplicate_charge_id": {
                    "description": "The Stripe ID for the prior charge which appears to be a duplicate of the disputed charge.",
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "livemode": {
                    "type": "boolean"
                },
                "metadata": {
                    "$ref": "#/definitions/core.JSONB"
                },
                "object": {
                    "type": "string"
                },
                "product_description": {
                    "description": "A description of the product or service that was sold.",
                    "type": "string"
                },
                "receipt": {
                    "$ref": "#/definitions/file.File"
                },
                "refund_policy": {
                    "$ref": "#/definitions/file.File"
                },
                "refund_policy_disclosure": {
                    "description": "Documentation demonstrating that the customer was shown your refund policy prior to purchase.",
                    "type": "string"
                },
                "refund_refusal_explanation": {
                    "description": "A justification for why the customer is not entitled to a refund.",
                    "type": "string"
                },
                "service_date": {
                    "description": "The date on which the customer received or began receiving the purchased service, in a clear human-readable format.",
                    "type": "string"
                },
                "service_documentation": {
                    "$ref": "#/definitions/file.File"
                },
                "shipping_address": {
                    "description": "The address to which a physical product was shipped. You should try to include as complete address information as possible.",
                    "type": "string"
                },
                "shipping_carrier": {
                    "description": "The delivery service that shipped a physical product, such as Fedex, UPS, USPS, etc. If multiple carriers were used for this purchase, please separate them with commas.",
                    "type": "string"
                },
                "shipping_date": {
                    "description": "The date on which a physical product began its route to the shipping address, in a clear human-readable format.",
                    "type": "string"
                },
                "shipping_documentation": {
                    "$ref": "#/definitions/file.File"
                },
                "shipping_tracking_number": {
                    "description": "The tracking number for a physical product, obtained from the delivery service. If multiple tracking numbers were generated for this purchase, please separate them with commas.",
                    "type": "string"
                },
                "uncategorized_file": {
                    "$ref": "#/definitions/file.File"
                },
                "uncategorized_text": {
                    "description": "Any additional evidence or statements.",
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                }
            }
        },
        "dispute.DisputeEvidenceDetails": {
            "type": "object",
            "properties": {
                "created_at": {
                    "type": "string"
                },
                "due_by": {
                    "description": "Date by which evidence must be submitted in order to successfully challenge dispute. Will be null if the customer's bank or credit card company doesn't allow a response for this particular dispute.",
                    "type": "integer"
                },
                "has_evidence": {
                    "description": "Whether evidence has been staged for this dispute.",
                    "type": "boolean"
                },
                "id": {
                    "type": "string"
                },
                "livemode": {
                    "type": "boolean"
                },
                "metadata": {
                    "$ref": "#/definitions/core.JSONB"
                },
                "object": {
                    "type": "string"
                },
                "past_due": {
                    "description": "Whether the last evidence submission was submitted past the due date. Defaults to `false` if no evidence submissions have occurred. If `true`, then delivery of the latest evidence is *not* guaranteed.",
                    "type": "boolean"
                },
                "submission_count": {
                    "description": "The number of times evidence has been submitted. Typically, you may only submit evidence once.",
                    "type": "integer"
                },
                "updated_at": {
                    "type": "string"
                }
            }
        },
        "dispute.Reason": {
            "type": "string",
            "enum": [
                "bank_cannot_process",
                "check_returned",
                "credit_not_processed",
                "customer_initiated",
                "debit_not_authorized",
                "duplicate",
                "fraudulent",
                "general",
                "incorrect_account_details",
                "insufficient_funds",
                "product_not_received",
                "product_unacceptable",
                "subscription_canceled",
                "unrecognized"
            ],
            "x-enum-varnames": [
                "ReasonBankCannotProcess",
                "ReasonCheckReturned",
                "ReasonCreditNotProcessed",
                "ReasonCustomerInitiated",
                "ReasonDebitNotAuthorized",
                "ReasonDuplicate",
                "ReasonFraudulent",
                "ReasonGeneral",
                "ReasonIncorrectAccountDetails",
                "ReasonInsufficientFunds",
                "ReasonProductNotReceived",
                "ReasonProductUnacceptable",
                "ReasonSubscriptionCanceled",
                "ReasonUnrecognized"
            ]
        },
        "dispute.Status": {
            "type": "string",
            "enum": [
                "warning_needs_response",
                "warning_under_review",
                "warning_closed",
                "needs_response",
                "under_review",
                "charge_refunded",
                "won",
                "lost"
            ],
            "x-enum-varnames": [
                "StatusWarningNeedsResponse",
                "StatusWarningUnderReview",
                "StatusWarningClosed",
                "StatusNeedsResponse",
                "StatusUnderReview",
                "StatusChargeRefunded",
                "StatusWon",
                "StatusLost"
            ]
        },
        "errors.ApiErrors": {
            "type": "object",
            "properties": {
                "charge": {
                    "description": "For card errors, the ID of the failed charge.",
                    "type": "string"
                },
                "code": {
                    "description": "For some errors that could be handled programmatically, a short string indicating the [error code](https://stripe.com/docs/error-codes) reported.",
                    "type": "string"
                },
                "created_at": {
                    "type": "string"
                },
                "decline_code": {
                    "description": "For card errors resulting from a card issuer decline, a short string indicating the [card issuer's reason for the decline](https://stripe.com/docs/declines#issuer-declines) if they provide one.",
                    "type": "string"
                },
                "doc_url": {
                    "description": "A URL to more information about the [error code](https://stripe.com/docs/error-codes) reported.",
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "livemode": {
                    "type": "boolean"
                },
                "message": {
                    "description": "A human-readable message providing more details about the error. For card errors, these messages can be shown to your users.",
                    "type": "string"
                },
                "metadata": {
                    "$ref": "#/definitions/core.JSONB"
                },
                "object": {
                    "type": "string"
                },
                "param": {
                    "description": "If the error is parameter-specific, the parameter related to the error. For example, you can use this to display a message near the correct form field.",
                    "type": "string"
                },
                "payment_method": {
                    "type": "string",
                    "format": "uuid"
                },
                "payment_method_type": {
                    "description": "If the error is specific to the type of payment method, the payment method type that had a problem. This field is only populated for invoice-related errors.",
                    "type": "string"
                },
                "request_log_url": {
                    "description": "A URL to the request log entry in your dashboard.",
                    "type": "string"
                },
                "type": {
                    "description": "The type of error returned. One of `api_error`, `card_error`, `idempotency_error`, or `invalid_request_error`",
                    "allOf": [
                        {
                            "$ref": "#/definitions/errors.Type"
                        }
                    ]
                },
                "updated_at": {
                    "type": "string"
                }
            }
        },
        "errors.Type": {
            "type": "string",
            "enum": [
                "api_error",
                "card_error",
                "idempotency_error",
                "invalid_request_error"
            ],
            "x-enum-varnames": [
                "TypeApiError",
                "TypeCardError",
                "TypeIdempotencyError",
                "TypeInvalidRequestError"
            ]
        },
        "file.File": {
            "type": "object",
            "properties": {
                "created_at": {
                    "type": "string"
                },
                "expires_at": {
                    "description": "The time at which the file expires and is no longer available in epoch seconds.",
                    "type": "integer"
                },
                "filename": {
                    "description": "A filename for the file, suitable for saving to a filesystem.",
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "links": {
                    "$ref": "#/definitions/file.FileLink"
                },
                "livemode": {
                    "type": "boolean"
                },
                "metadata": {
                    "$ref": "#/definitions/core.JSONB"
                },
                "object": {
                    "type": "string"
                },
                "purpose": {
                    "description": "The [purpose](https://stripe.com/docs/file-upload#uploading-a-file) of the uploaded file.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/file.Purpose"
                        }
                    ]
                },
                "size": {
                    "description": "The size in bytes of the file object.",
                    "type": "integer"
                },
                "title": {
                    "description": "A user friendly title for the document.",
                    "type": "string"
                },
                "type": {
                    "description": "The type of the file returned (e.g., `csv`, `pdf`, `jpg`, or `png`).",
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                },
                "url": {
                    "description": "The URL from which the file can be downloaded using your live secret API key.",
                    "type": "string"
                }
            }
        },
        "file.FileLink": {
            "type": "object",
            "properties": {
                "created_at": {
                    "type": "string"
                },
                "expired": {
                    "description": "Whether this link is already expired.",
                    "type": "boolean"
                },
                "expires_at": {
                    "description": "Time at which the link expires.",
                    "type": "integer"
                },
                "file": {
                    "$ref": "#/definitions/file.File"
                },
                "id": {
                    "type": "string"
                },
                "livemode": {
                    "type": "boolean"
                },
                "metadata": {
                    "$ref": "#/definitions/core.JSONB"
                },
                "object": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                },
                "url": {
                    "description": "The publicly accessible URL to download the file.",
                    "type": "string"
                }
            }
        },
        "file.Purpose": {
            "type": "string",
            "enum": [
                "account_requirement",
                "additional_verification",
                "business_icon",
                "business_logo",
                "customer_signature",
                "dispute_evidence",
                "document_provider_identity_document",
                "finance_report_run",
                "identity_document",
                "identity_document_downloadable",
                "pci_document",
                "selfie",
                "sigma_scheduled_query",
                "tax_document_user_upload",
                "terminal_reader_splashscreen"
            ],
            "x-enum-varnames": [
                "PurposeAccountRequirement",
                "PurposeAdditionalVerification",
                "PurposeBusinessIcon",
                "PurposeBusinesslogo",
                "PurposeCustomerSignature",
                "PurposeDisputeEvidence",
                "PurposeDocumentProviderIdentityDocument",
                "PurposeFinanceReportRun",
                "PurposeIdentityDocument",
                "PurposeIdentityDocumentDownloadable",
                "PurposePciDocument",
                "PurposeSelfie",
                "PurposeSigmaScheduledQuery",
                "PurposeTaxDocumentUserUpload",
                "PurposeTerminalReaderSplashscreen"
            ]
        },
        "github_com_driver005_gateway_payment_card.Card": {
            "type": "object",
            "properties": {
                "account": {
                    "$ref": "#/definitions/account.Account"
                },
                "address_city": {
                    "type": "string"
                },
                "address_country": {
                    "type": "string"
                },
                "address_line1": {
                    "type": "string"
                },
                "address_line1_check": {
                    "$ref": "#/definitions/card.AddressLine1Check"
                },
                "address_line2": {
                    "type": "string"
                },
                "address_state": {
                    "type": "string"
                },
                "address_zip": {
                    "type": "string"
                },
                "address_zip_check": {
                    "$ref": "#/definitions/card.AddressZipCheck"
                },
                "available_payout_methods": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "brand": {
                    "$ref": "#/definitions/card.Brand"
                },
                "country": {
                    "type": "string"
                },
                "created_at": {
                    "type": "string"
                },
                "currency": {
                    "type": "string"
                },
                "customer": {
                    "$ref": "#/definitions/customer.Customer"
                },
                "cvc_check": {
                    "$ref": "#/definitions/card.CvcCheck"
                },
                "default_for_currency": {
                    "type": "boolean"
                },
                "dynamic_last4": {
                    "type": "string"
                },
                "exp_month": {
                    "type": "integer"
                },
                "exp_year": {
                    "type": "integer"
                },
                "fingerprint": {
                    "type": "string"
                },
                "funding": {
                    "$ref": "#/definitions/card.Funding"
                },
                "id": {
                    "type": "string"
                },
                "last4": {
                    "type": "string"
                },
                "livemode": {
                    "type": "boolean"
                },
                "metadata": {
                    "$ref": "#/definitions/core.JSONB"
                },
                "name": {
                    "type": "string"
                },
                "object": {
                    "type": "string"
                },
                "status": {
                    "type": "string"
                },
                "tokenization_method": {
                    "$ref": "#/definitions/card.TokenizationMethod"
                },
                "updated_at": {
                    "type": "string"
                }
            }
        },
        "intent.Bind.request": {
            "type": "object",
            "properties": {
                "amount": {
                    "type": "integer"
                },
                "amount_capturable": {
                    "type": "integer"
                },
                "amount_details": {
                    "$ref": "#/definitions/paymentFlow.PaymentFlowsAmountDetails"
                },
                "amount_received": {
                    "type": "integer"
                },
                "automatic_payment_methods": {
                    "type": "boolean"
                },
                "canceled_at": {
                    "type": "integer"
                },
                "cancellation_reason": {
                    "$ref": "#/definitions/intent.CancellationReason"
                },
                "capture_method": {
                    "$ref": "#/definitions/intent.CaptureMethod"
                },
                "client_secret": {
                    "type": "string"
                },
                "confirm": {
                    "type": "string",
                    "format": "uuid"
                },
                "confirmation_method": {
                    "$ref": "#/definitions/intent.ConfirmationMethod"
                },
                "created_at": {
                    "type": "string"
                },
                "currency": {
                    "type": "string"
                },
                "customer": {
                    "type": "string",
                    "format": "uuid"
                },
                "description": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "last_payment_error": {
                    "$ref": "#/definitions/errors.ApiErrors"
                },
                "latest_charge": {
                    "$ref": "#/definitions/charge.Charge"
                },
                "livemode": {
                    "type": "boolean"
                },
                "metadata": {
                    "$ref": "#/definitions/core.JSONB"
                },
                "next_action": {
                    "$ref": "#/definitions/next.PaymentIntentNextAction"
                },
                "object": {
                    "type": "string"
                },
                "off_session": {
                    "type": "string",
                    "format": "uuid"
                },
                "payment_method": {
                    "type": "string",
                    "format": "uuid"
                },
                "payment_method_options": {
                    "$ref": "#/definitions/methods.PaymentIntentPaymentMethodOptions"
                },
                "payment_method_types": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "processing": {
                    "$ref": "#/definitions/intent.PaymentIntentProcessing"
                },
                "receipt_email": {
                    "type": "string"
                },
                "return_url": {
                    "type": "string",
                    "format": "uuid"
                },
                "review": {
                    "$ref": "#/definitions/review.Review"
                },
                "setup_future_usage": {
                    "$ref": "#/definitions/intent.SetupFutureUsage"
                },
                "shipping": {
                    "$ref": "#/definitions/address.Shipping"
                },
                "statement_descriptor": {
                    "type": "string"
                },
                "statement_descriptor_suffix": {
                    "type": "string"
                },
                "status": {
                    "$ref": "#/definitions/intent.Status"
                },
                "updated_at": {
                    "type": "string"
                }
            }
        },
        "intent.CancellationReason": {
            "type": "string",
            "enum": [
                "duplicate",
                "fraudulent",
                "requested_by_customer",
                "abandoned",
                "failed_invoice",
                "void_invoice",
                "automatic"
            ],
            "x-enum-varnames": [
                "CancellationReasonDuplicate",
                "CancellationReasonFraudulent",
                "CancellationReasonRequestedByCustomer",
                "CancellationReasonAbandoned",
                "CancellationReasonFailedInvoice",
                "CancellationReasonVoidInvoice",
                "CancellationReasonAutomatic"
            ]
        },
        "intent.CaptureMethod": {
            "type": "string",
            "enum": [
                "automatic",
                "manual"
            ],
            "x-enum-varnames": [
                "CaptureMethodAutomatic",
                "CaptureMethodManual"
            ]
        },
        "intent.ConfirmationMethod": {
            "type": "string",
            "enum": [
                "automatic",
                "manual"
            ],
            "x-enum-varnames": [
                "ConfirmationMethodAutomatic",
                "ConfirmationMethodManual"
            ]
        },
        "intent.PaymentIntent": {
            "type": "object",
            "properties": {
                "amount": {
                    "type": "integer"
                },
                "amount_capturable": {
                    "type": "integer"
                },
                "amount_details": {
                    "$ref": "#/definitions/paymentFlow.PaymentFlowsAmountDetails"
                },
                "amount_received": {
                    "type": "integer"
                },
                "automatic_payment_methods": {
                    "type": "boolean"
                },
                "canceled_at": {
                    "type": "integer"
                },
                "cancellation_reason": {
                    "$ref": "#/definitions/intent.CancellationReason"
                },
                "capture_method": {
                    "$ref": "#/definitions/intent.CaptureMethod"
                },
                "client_secret": {
                    "type": "string"
                },
                "confirmation_method": {
                    "$ref": "#/definitions/intent.ConfirmationMethod"
                },
                "created_at": {
                    "type": "string"
                },
                "currency": {
                    "type": "string"
                },
                "customer": {
                    "$ref": "#/definitions/customer.Customer"
                },
                "description": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "last_payment_error": {
                    "$ref": "#/definitions/errors.ApiErrors"
                },
                "latest_charge": {
                    "$ref": "#/definitions/charge.Charge"
                },
                "livemode": {
                    "type": "boolean"
                },
                "metadata": {
                    "$ref": "#/definitions/core.JSONB"
                },
                "next_action": {
                    "$ref": "#/definitions/next.PaymentIntentNextAction"
                },
                "object": {
                    "type": "string"
                },
                "payment_method": {
                    "$ref": "#/definitions/method.PaymentMethod"
                },
                "payment_method_options": {
                    "$ref": "#/definitions/methods.PaymentIntentPaymentMethodOptions"
                },
                "payment_method_types": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "processing": {
                    "$ref": "#/definitions/intent.PaymentIntentProcessing"
                },
                "receipt_email": {
                    "type": "string"
                },
                "review": {
                    "$ref": "#/definitions/review.Review"
                },
                "setup_future_usage": {
                    "$ref": "#/definitions/intent.SetupFutureUsage"
                },
                "shipping": {
                    "$ref": "#/definitions/address.Shipping"
                },
                "statement_descriptor": {
                    "type": "string"
                },
                "statement_descriptor_suffix": {
                    "type": "string"
                },
                "status": {
                    "$ref": "#/definitions/intent.Status"
                },
                "updated_at": {
                    "type": "string"
                }
            }
        },
        "intent.PaymentIntentCardProcessing": {
            "type": "object",
            "properties": {
                "created_at": {
                    "type": "string"
                },
                "customer_notification": {
                    "$ref": "#/definitions/intent.PaymentIntentProcessingCustomerNotification"
                },
                "id": {
                    "type": "string"
                },
                "livemode": {
                    "type": "boolean"
                },
                "metadata": {
                    "$ref": "#/definitions/core.JSONB"
                },
                "object": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                }
            }
        },
        "intent.PaymentIntentProcessing": {
            "type": "object",
            "properties": {
                "card": {
                    "$ref": "#/definitions/intent.PaymentIntentCardProcessing"
                },
                "created_at": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "livemode": {
                    "type": "boolean"
                },
                "metadata": {
                    "$ref": "#/definitions/core.JSONB"
                },
                "object": {
                    "type": "string"
                },
                "type": {
                    "description": "Type of the payment method for which payment is in `processing` state, one of `card`.",
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                }
            }
        },
        "intent.PaymentIntentProcessingCustomerNotification": {
            "type": "object",
            "properties": {
                "approval_requested": {
                    "description": "Whether customer approval has been requested for this payment. For payments greater than INR 15000 or mandate amount, the customer must provide explicit approval of the payment with their bank.",
                    "type": "boolean"
                },
                "completes_at": {
                    "description": "If customer approval is required, they need to provide approval before this time.",
                    "type": "integer"
                },
                "created_at": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "livemode": {
                    "type": "boolean"
                },
                "metadata": {
                    "$ref": "#/definitions/core.JSONB"
                },
                "object": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                }
            }
        },
        "intent.SetupFutureUsage": {
            "type": "string",
            "enum": [
                "off_session",
                "on_session"
            ],
            "x-enum-varnames": [
                "SetupFutureUsageOffSession",
                "SetupFutureUsageOnSession"
            ]
        },
        "intent.Status": {
            "type": "string",
            "enum": [
                "requires_payment_method",
                "requires_confirmation",
                "requires_action",
                "processing",
                "requires_capture",
                "canceled",
                "succeeded"
            ],
            "x-enum-varnames": [
                "StatusRequiresPaymentMethod",
                "StatusRequiresConfirmation",
                "StatusRequiresAction",
                "StatusProcessing",
                "StatusRequiresCapture",
                "StatusCanceled",
                "StatusSucceeded"
            ]
        },
        "invoice.BillingReason": {
            "type": "string",
            "enum": [
                "subscription_cycle",
                "subscription_create",
                "subscription_update",
                "subscription_threshold",
                "subscription",
                "manual",
                "upcoming"
            ],
            "x-enum-varnames": [
                "BillingReasonSubscriptionCycle",
                "BillingReasonSubscriptionCreate",
                "BillingReasonSubscriptionUpdate",
                "BillingReasonSubscriptionThreshold",
                "BillingReasonSubscription",
                "BillingReasonManual",
                "BillingReasonUpcoming"
            ]
        },
        "invoice.Bind.request": {
            "type": "object",
            "properties": {
                "account_country": {
                    "type": "string"
                },
                "account_name": {
                    "type": "string"
                },
                "account_tax_ids": {
                    "$ref": "#/definitions/tax.TaxId"
                },
                "amount_due": {
                    "type": "integer"
                },
                "amount_paid": {
                    "type": "integer"
                },
                "amount_remaining": {
                    "type": "integer"
                },
                "attempt_count": {
                    "type": "integer"
                },
                "attempted": {
                    "type": "boolean"
                },
                "auto_advance": {
                    "type": "boolean"
                },
                "automatic_tax": {
                    "$ref": "#/definitions/tax.AutomaticTax"
                },
                "billing_reason": {
                    "$ref": "#/definitions/invoice.BillingReason"
                },
                "charge": {
                    "type": "string",
                    "format": "uuid"
                },
                "collection_method": {
                    "$ref": "#/definitions/invoice.CollectionMethod"
                },
                "created_at": {
                    "type": "string"
                },
                "currency": {
                    "type": "string"
                },
                "custom_fields": {
                    "type": "array",
                    "items": {
                        "type": "string",
                        "format": "uuid"
                    }
                },
                "customer": {
                    "type": "string",
                    "format": "uuid"
                },
                "customer_address": {
                    "$ref": "#/definitions/address.Address"
                },
                "customer_email": {
                    "type": "string"
                },
                "customer_name": {
                    "type": "string"
                },
                "customer_phone": {
                    "type": "string"
                },
                "customer_shipping": {
                    "$ref": "#/definitions/address.Shipping"
                },
                "customer_tax_exempt": {
                    "$ref": "#/definitions/customer.TaxExempt"
                },
                "customer_tax_ids": {
                    "type": "array",
                    "items": {
                        "type": "string",
                        "format": "uuid"
                    }
                },
                "default_payment_method": {
                    "type": "string",
                    "format": "uuid"
                },
                "default_tax_rates": {
                    "$ref": "#/definitions/tax.TaxRate"
                },
                "description": {
                    "type": "string"
                },
                "discountable": {
                    "type": "boolean"
                },
                "discounts": {
                    "type": "array",
                    "items": {
                        "type": "string",
                        "format": "uuid"
                    }
                },
                "due_date": {
                    "type": "string"
                },
                "ending_balance": {
                    "type": "integer"
                },
                "footer": {
                    "type": "string"
                },
                "from_invoice": {
                    "$ref": "#/definitions/invoice.Invoice"
                },
                "hosted_invoice_url": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "invoice_pdf": {
                    "type": "string"
                },
                "last_finalization_error": {
                    "$ref": "#/definitions/errors.ApiErrors"
                },
                "latest_revision": {
                    "type": "string",
                    "format": "uuid"
                },
                "lines": {
                    "type": "array",
                    "items": {
                        "type": "string",
                        "format": "uuid"
                    }
                },
                "livemode": {
                    "type": "boolean"
                },
                "metadata": {
                    "$ref": "#/definitions/core.JSONB"
                },
                "next_payment_attempt": {
                    "type": "integer"
                },
                "number": {
                    "type": "string"
                },
                "object": {
                    "type": "string"
                },
                "paid": {
                    "type": "boolean"
                },
                "paid_out_of_band": {
                    "type": "boolean"
                },
                "payment_intent": {
                    "type": "string",
                    "format": "uuid"
                },
                "payment_settings": {
                    "$ref": "#/definitions/invoices.InvoicesPaymentSettings"
                },
                "period_end": {
                    "type": "string"
                },
                "period_start": {
                    "type": "string"
                },
                "post_payment_credit_notes_amount": {
                    "type": "integer"
                },
                "pre_payment_credit_notes_amount": {
                    "type": "integer"
                },
                "price": {
                    "type": "string",
                    "format": "uuid"
                },
                "quantity": {
                    "type": "integer"
                },
                "receipt_number": {
                    "type": "string"
                },
                "rendering_options": {
                    "$ref": "#/definitions/settings.InvoiceSettingRenderingOptions"
                },
                "starting_balance": {
                    "type": "integer"
                },
                "statement_descriptor": {
                    "type": "string"
                },
                "status": {
                    "$ref": "#/definitions/invoice.Status"
                },
                "status_transitions": {
                    "$ref": "#/definitions/invoices.InvoicesStatusTransitions"
                },
                "subscription": {
                    "type": "string",
                    "format": "uuid"
                },
                "subscription_proration_date": {
                    "type": "integer"
                },
                "subtotal": {
                    "type": "integer"
                },
                "subtotal_excluding_tax": {
                    "type": "integer"
                },
                "tax": {
                    "type": "integer"
                },
                "threshold_reason": {
                    "$ref": "#/definitions/invoice.InvoiceThresholdReason"
                },
                "total": {
                    "type": "integer"
                },
                "total_excluding_tax": {
                    "type": "integer"
                },
                "total_tax_amounts": {
                    "type": "array",
                    "items": {
                        "type": "string",
                        "format": "uuid"
                    }
                },
                "updated_at": {
                    "type": "string"
                },
                "webhooks_delivered_at": {
                    "type": "integer"
                }
            }
        },
        "invoice.CollectionMethod": {
            "type": "string",
            "enum": [
                "charge_automatically",
                "send_invoice"
            ],
            "x-enum-varnames": [
                "CollectionMethodChargeAutomatically",
                "CollectionMethodSendInvoiced"
            ]
        },
        "invoice.Invoice": {
            "type": "object",
            "properties": {
                "account_country": {
                    "type": "string"
                },
                "account_name": {
                    "type": "string"
                },
                "account_tax_ids": {
                    "$ref": "#/definitions/tax.TaxId"
                },
                "amount_due": {
                    "type": "integer"
                },
                "amount_paid": {
                    "type": "integer"
                },
                "amount_remaining": {
                    "type": "integer"
                },
                "attempt_count": {
                    "type": "integer"
                },
                "attempted": {
                    "type": "boolean"
                },
                "auto_advance": {
                    "type": "boolean"
                },
                "automatic_tax": {
                    "$ref": "#/definitions/tax.AutomaticTax"
                },
                "billing_reason": {
                    "$ref": "#/definitions/invoice.BillingReason"
                },
                "charge": {
                    "$ref": "#/definitions/charge.Charge"
                },
                "collection_method": {
                    "$ref": "#/definitions/invoice.CollectionMethod"
                },
                "created_at": {
                    "type": "string"
                },
                "currency": {
                    "type": "string"
                },
                "custom_fields": {
                    "type": "array",
                    "items": {
                        "type": "string",
                        "format": "uuid"
                    }
                },
                "customer": {
                    "$ref": "#/definitions/customer.Customer"
                },
                "customer_address": {
                    "$ref": "#/definitions/address.Address"
                },
                "customer_email": {
                    "type": "string"
                },
                "customer_name": {
                    "type": "string"
                },
                "customer_phone": {
                    "type": "string"
                },
                "customer_shipping": {
                    "$ref": "#/definitions/address.Shipping"
                },
                "customer_tax_exempt": {
                    "$ref": "#/definitions/customer.TaxExempt"
                },
                "customer_tax_ids": {
                    "type": "array",
                    "items": {
                        "type": "string",
                        "format": "uuid"
                    }
                },
                "default_payment_method": {
                    "$ref": "#/definitions/method.PaymentMethod"
                },
                "default_tax_rates": {
                    "$ref": "#/definitions/tax.TaxRate"
                },
                "description": {
                    "type": "string"
                },
                "discountable": {
                    "type": "boolean"
                },
                "discounts": {
                    "type": "array",
                    "items": {
                        "type": "string",
                        "format": "uuid"
                    }
                },
                "due_date": {
                    "type": "string"
                },
                "ending_balance": {
                    "type": "integer"
                },
                "footer": {
                    "type": "string"
                },
                "from_invoice": {
                    "$ref": "#/definitions/invoice.Invoice"
                },
                "hosted_invoice_url": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "invoice_pdf": {
                    "type": "string"
                },
                "last_finalization_error": {
                    "$ref": "#/definitions/errors.ApiErrors"
                },
                "latest_revision": {
                    "$ref": "#/definitions/invoice.Invoice"
                },
                "lines": {
                    "type": "array",
                    "items": {
                        "type": "string",
                        "format": "uuid"
                    }
                },
                "livemode": {
                    "type": "boolean"
                },
                "metadata": {
                    "$ref": "#/definitions/core.JSONB"
                },
                "next_payment_attempt": {
                    "type": "integer"
                },
                "number": {
                    "type": "string"
                },
                "object": {
                    "type": "string"
                },
                "paid": {
                    "type": "boolean"
                },
                "paid_out_of_band": {
                    "type": "boolean"
                },
                "payment_intent": {
                    "$ref": "#/definitions/intent.PaymentIntent"
                },
                "payment_settings": {
                    "$ref": "#/definitions/invoices.InvoicesPaymentSettings"
                },
                "period_end": {
                    "type": "string"
                },
                "period_start": {
                    "type": "string"
                },
                "post_payment_credit_notes_amount": {
                    "type": "integer"
                },
                "pre_payment_credit_notes_amount": {
                    "type": "integer"
                },
                "price": {
                    "$ref": "#/definitions/price.Price"
                },
                "quantity": {
                    "type": "integer"
                },
                "receipt_number": {
                    "type": "string"
                },
                "rendering_options": {
                    "$ref": "#/definitions/settings.InvoiceSettingRenderingOptions"
                },
                "starting_balance": {
                    "type": "integer"
                },
                "statement_descriptor": {
                    "type": "string"
                },
                "status": {
                    "$ref": "#/definitions/invoice.Status"
                },
                "status_transitions": {
                    "$ref": "#/definitions/invoices.InvoicesStatusTransitions"
                },
                "subscription": {
                    "$ref": "#/definitions/subscription.Subscription"
                },
                "subscription_proration_date": {
                    "type": "integer"
                },
                "subtotal": {
                    "type": "integer"
                },
                "subtotal_excluding_tax": {
                    "type": "integer"
                },
                "tax": {
                    "type": "integer"
                },
                "threshold_reason": {
                    "$ref": "#/definitions/invoice.InvoiceThresholdReason"
                },
                "total": {
                    "type": "integer"
                },
                "total_excluding_tax": {
                    "type": "integer"
                },
                "total_tax_amounts": {
                    "type": "array",
                    "items": {
                        "type": "string",
                        "format": "uuid"
                    }
                },
                "updated_at": {
                    "type": "string"
                },
                "webhooks_delivered_at": {
                    "type": "integer"
                }
            }
        },
        "invoice.InvoiceThresholdReason": {
            "type": "object",
            "properties": {
                "amount_gte": {
                    "description": "The total invoice amount threshold boundary if it triggered the threshold invoice.",
                    "type": "integer"
                },
                "created_at": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "line_item_ids": {
                    "description": "The IDs of the line items that triggered the threshold invoice.",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "livemode": {
                    "type": "boolean"
                },
                "metadata": {
                    "$ref": "#/definitions/core.JSONB"
                },
                "object": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                },
                "usage_gte": {
                    "description": "The quantity threshold boundary that applied to the given line item.",
                    "type": "integer"
                }
            }
        },
        "invoice.Status": {
            "type": "string",
            "enum": [
                "draft",
                "open",
                "paid",
                "uncollectible",
                "void"
            ],
            "x-enum-varnames": [
                "StatusDraft",
                "StatusOpen",
                "StatusPaid",
                "StatusUncollectible",
                "StatusVoid"
            ]
        },
        "invoiceItem.Bind.request": {
            "type": "object",
            "properties": {
                "amount": {
                    "description": "Amount (in the `currency` specified) of the invoice item. This should always be equal to `unit_amount * quantity`.",
                    "type": "integer"
                },
                "created_at": {
                    "type": "string"
                },
                "currency": {
                    "description": "Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).",
                    "type": "string"
                },
                "customer": {
                    "type": "string",
                    "format": "uuid"
                },
                "date": {
                    "description": "Time at which the object was created. Measured in seconds since the Unix epoch.",
                    "type": "integer"
                },
                "description": {
                    "description": "An arbitrary string attached to the object. Often useful for displaying to users.",
                    "type": "string"
                },
                "discountable": {
                    "description": "If true, discounts will apply to this invoice item. Always false for prorations.",
                    "type": "boolean"
                },
                "discounts": {
                    "description": "The discounts which apply to the invoice item. Item discounts are applied before invoice discounts. Use `expand[]=discounts` to expand each discount.",
                    "type": "array",
                    "items": {
                        "type": "string",
                        "format": "uuid"
                    }
                },
                "id": {
                    "type": "string"
                },
                "invoice": {
                    "type": "string",
                    "format": "uuid"
                },
                "livemode": {
                    "type": "boolean"
                },
                "metadata": {
                    "$ref": "#/definitions/core.JSONB"
                },
                "object": {
                    "type": "string"
                },
                "period_end": {
                    "description": "Unique identifier for the object.",
                    "type": "integer"
                },
                "period_start": {
                    "type": "integer"
                },
                "price": {
                    "type": "string",
                    "format": "uuid"
                },
                "proration": {
                    "description": "Whether the invoice item was created automatically as a proration adjustment when the customer switched plans.",
                    "type": "boolean"
                },
                "quantity": {
                    "description": "Quantity of units for the invoice item. If the invoice item is a proration, the quantity of the subscription that the proration was computed for.",
                    "type": "integer"
                },
                "subscription": {
                    "type": "string",
                    "format": "uuid"
                },
                "subscription_item": {
                    "type": "string",
                    "format": "uuid"
                },
                "tax_rates": {
                    "description": "The tax rates which apply to the invoice item. When set, the `default_tax_rates` on the invoice do not apply to this invoice item.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/tax.TaxRate"
                        }
                    ]
                },
                "unit_amount": {
                    "description": "Unit amount (in the `currency` specified) of the invoice item.",
                    "type": "integer"
                },
                "unit_amount_decimal": {
                    "description": "Same as `unit_amount`, but contains a decimal value with at most 12 decimal places.",
                    "type": "number"
                },
                "updated_at": {
                    "type": "string"
                }
            }
        },
        "invoiceItem.Invoiceitem": {
            "type": "object",
            "properties": {
                "amount": {
                    "description": "Amount (in the `currency` specified) of the invoice item. This should always be equal to `unit_amount * quantity`.",
                    "type": "integer"
                },
                "created_at": {
                    "type": "string"
                },
                "currency": {
                    "description": "Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).",
                    "type": "string"
                },
                "customer": {
                    "$ref": "#/definitions/customer.Customer"
                },
                "date": {
                    "description": "Time at which the object was created. Measured in seconds since the Unix epoch.",
                    "type": "integer"
                },
                "description": {
                    "description": "An arbitrary string attached to the object. Often useful for displaying to users.",
                    "type": "string"
                },
                "discountable": {
                    "description": "If true, discounts will apply to this invoice item. Always false for prorations.",
                    "type": "boolean"
                },
                "discounts": {
                    "description": "The discounts which apply to the invoice item. Item discounts are applied before invoice discounts. Use `expand[]=discounts` to expand each discount.",
                    "type": "array",
                    "items": {
                        "type": "string",
                        "format": "uuid"
                    }
                },
                "id": {
                    "type": "string"
                },
                "invoice": {
                    "$ref": "#/definitions/invoice.Invoice"
                },
                "livemode": {
                    "type": "boolean"
                },
                "metadata": {
                    "$ref": "#/definitions/core.JSONB"
                },
                "object": {
                    "type": "string"
                },
                "period_end": {
                    "description": "Unique identifier for the object.",
                    "type": "integer"
                },
                "period_start": {
                    "type": "integer"
                },
                "price": {
                    "$ref": "#/definitions/price.Price"
                },
                "proration": {
                    "description": "Whether the invoice item was created automatically as a proration adjustment when the customer switched plans.",
                    "type": "boolean"
                },
                "quantity": {
                    "description": "Quantity of units for the invoice item. If the invoice item is a proration, the quantity of the subscription that the proration was computed for.",
                    "type": "integer"
                },
                "subscription": {
                    "$ref": "#/definitions/subscription.Subscription"
                },
                "subscription_item": {
                    "$ref": "#/definitions/subscriptionItem.SubscriptionItem"
                },
                "tax_rates": {
                    "description": "The tax rates which apply to the invoice item. When set, the `default_tax_rates` on the invoice do not apply to this invoice item.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/tax.TaxRate"
                        }
                    ]
                },
                "unit_amount": {
                    "description": "Unit amount (in the `currency` specified) of the invoice item.",
                    "type": "integer"
                },
                "unit_amount_decimal": {
                    "description": "Same as `unit_amount`, but contains a decimal value with at most 12 decimal places.",
                    "type": "number"
                },
                "updated_at": {
                    "type": "string"
                }
            }
        },
        "invoices.InvoicesLineItemsCreditedItems": {
            "type": "object",
            "properties": {
                "created_at": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "invoice": {
                    "description": "Invoice containing the credited invoice line items",
                    "type": "string"
                },
                "invoice_line_items": {
                    "description": "Credited invoice line items",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "livemode": {
                    "type": "boolean"
                },
                "metadata": {
                    "$ref": "#/definitions/core.JSONB"
                },
                "object": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                }
            }
        },
        "invoices.InvoicesPaymentSettings": {
            "type": "object",
            "properties": {
                "created_at": {
                    "type": "string"
                },
                "default_mandate": {
                    "description": "ID of the mandate to be used for this invoice. It must correspond to the payment method used to pay the invoice, including the invoice's default_payment_method or default_source, if set.",
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "livemode": {
                    "type": "boolean"
                },
                "metadata": {
                    "$ref": "#/definitions/core.JSONB"
                },
                "object": {
                    "type": "string"
                },
                "payment_method_options": {
                    "type": "string",
                    "format": "uuid"
                },
                "payment_method_types": {
                    "description": "The list of payment method types (e.g. card) to provide to the invoice’s PaymentIntent. If not set, Stripe attempts to automatically determine the types to use by looking at the invoice’s default payment method, the subscription’s default payment method, the customer’s default payment method, and your [invoice template settings](https://dashboard.stripe.com/settings/billing/invoice).",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "updated_at": {
                    "type": "string"
                }
            }
        },
        "invoices.InvoicesStatusTransitions": {
            "type": "object",
            "properties": {
                "created_at": {
                    "type": "string"
                },
                "finalized_at": {
                    "description": "The time that the invoice draft was finalized.",
                    "type": "integer"
                },
                "id": {
                    "type": "string"
                },
                "livemode": {
                    "type": "boolean"
                },
                "marked_uncollectible_at": {
                    "description": "The time that the invoice was marked uncollectible.",
                    "type": "integer"
                },
                "metadata": {
                    "$ref": "#/definitions/core.JSONB"
                },
                "object": {
                    "type": "string"
                },
                "paid_at": {
                    "description": "The time that the invoice was paid.",
                    "type": "integer"
                },
                "updated_at": {
                    "type": "string"
                },
                "voided_at": {
                    "description": "The time that the invoice was voided.",
                    "type": "integer"
                }
            }
        },
        "item.Bind.request": {
            "type": "object",
            "properties": {
                "amount": {
                    "type": "integer"
                },
                "amount_excluding_tax": {
                    "type": "integer"
                },
                "created_at": {
                    "type": "string"
                },
                "currency": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "discountable": {
                    "type": "boolean"
                },
                "discounts": {
                    "type": "array",
                    "items": {
                        "type": "string",
                        "format": "uuid"
                    }
                },
                "id": {
                    "type": "string"
                },
                "livemode": {
                    "type": "boolean"
                },
                "metadata": {
                    "$ref": "#/definitions/core.JSONB"
                },
                "object": {
                    "type": "string"
                },
                "period_end": {
                    "type": "string"
                },
                "period_start": {
                    "type": "string"
                },
                "price": {
                    "type": "string",
                    "format": "uuid"
                },
                "product": {
                    "type": "string",
                    "format": "uuid"
                },
                "proration": {
                    "type": "boolean"
                },
                "proration_details": {
                    "$ref": "#/definitions/invoices.InvoicesLineItemsCreditedItems"
                },
                "quantity": {
                    "type": "integer"
                },
                "subscription": {
                    "type": "string"
                },
                "subscription_item": {
                    "type": "string"
                },
                "tax_rates": {
                    "type": "array",
                    "items": {
                        "type": "string",
                        "format": "uuid"
                    }
                },
                "type": {
                    "type": "string"
                },
                "unit_amount_excluding_tax": {
                    "type": "number"
                },
                "updated_at": {
                    "type": "string"
                }
            }
        },
        "item.LineItem": {
            "type": "object",
            "properties": {
                "amount": {
                    "type": "integer"
                },
                "amount_excluding_tax": {
                    "type": "integer"
                },
                "created_at": {
                    "type": "string"
                },
                "currency": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "discountable": {
                    "type": "boolean"
                },
                "discounts": {
                    "type": "array",
                    "items": {
                        "type": "string",
                        "format": "uuid"
                    }
                },
                "id": {
                    "type": "string"
                },
                "livemode": {
                    "type": "boolean"
                },
                "metadata": {
                    "$ref": "#/definitions/core.JSONB"
                },
                "object": {
                    "type": "string"
                },
                "period_end": {
                    "type": "string"
                },
                "period_start": {
                    "type": "string"
                },
                "price": {
                    "$ref": "#/definitions/price.Price"
                },
                "product": {
                    "$ref": "#/definitions/product.Product"
                },
                "proration": {
                    "type": "boolean"
                },
                "proration_details": {
                    "$ref": "#/definitions/invoices.InvoicesLineItemsCreditedItems"
                },
                "quantity": {
                    "type": "integer"
                },
                "subscription": {
                    "type": "string"
                },
                "subscription_item": {
                    "type": "string"
                },
                "tax_rates": {
                    "type": "array",
                    "items": {
                        "type": "string",
                        "format": "uuid"
                    }
                },
                "type": {
                    "type": "string"
                },
                "unit_amount_excluding_tax": {
                    "type": "number"
                },
                "updated_at": {
                    "type": "string"
                }
            }
        },
        "link.PaymentLink": {
            "type": "object",
            "properties": {
                "active": {
                    "type": "boolean"
                },
                "after_completion": {
                    "$ref": "#/definitions/options.PaymentLinksResourceAfterCompletion"
                },
                "allow_promotion_codes": {
                    "type": "boolean"
                },
                "application_fee_amount": {
                    "type": "integer"
                },
                "application_fee_percent": {
                    "type": "number"
                },
                "automatic_tax": {
                    "type": "boolean"
                },
                "billing_address_collection": {
                    "type": "string"
                },
                "consent_collection": {
                    "$ref": "#/definitions/options.PaymentLinksResourceConsentCollection"
                },
                "created_at": {
                    "type": "string"
                },
                "currency": {
                    "type": "string"
                },
                "custom_text": {
                    "$ref": "#/definitions/options.PaymentLinksResourceCustomText"
                },
                "customer_creation": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "line_items": {
                    "type": "array",
                    "items": {
                        "type": "string",
                        "format": "uuid"
                    }
                },
                "livemode": {
                    "type": "boolean"
                },
                "metadata": {
                    "$ref": "#/definitions/core.JSONB"
                },
                "object": {
                    "type": "string"
                },
                "payment_intent_data": {
                    "$ref": "#/definitions/options.PaymentLinksResourcePaymentIntentData"
                },
                "payment_method_collection": {
                    "type": "string"
                },
                "payment_method_types": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "phone_number_collection": {
                    "type": "boolean"
                },
                "shipping_address_collection": {
                    "$ref": "#/definitions/options.PaymentLinksResourceShippingAddressCollection"
                },
                "shipping_options": {
                    "type": "array",
                    "items": {
                        "type": "string",
                        "format": "uuid"
                    }
                },
                "submit_type": {
                    "type": "string"
                },
                "subscription_data": {
                    "$ref": "#/definitions/options.PaymentLinksResourceSubscriptionData"
                },
                "tax_id_collection": {
                    "type": "boolean"
                },
                "updated_at": {
                    "type": "string"
                },
                "url": {
                    "type": "string"
                }
            }
        },
        "mandate.Bind.request": {
            "type": "object",
            "properties": {
                "created_at": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "livemode": {
                    "type": "boolean"
                },
                "metadata": {
                    "$ref": "#/definitions/core.JSONB"
                },
                "object": {
                    "type": "string"
                },
                "payment_method": {
                    "type": "string",
                    "format": "uuid"
                },
                "payment_method_details": {
                    "$ref": "#/definitions/methods.MandatePaymentMethodDetails"
                },
                "single_use": {
                    "$ref": "#/definitions/methods.MandateSingleUse"
                },
                "status": {
                    "$ref": "#/definitions/mandate.Status"
                },
                "type": {
                    "$ref": "#/definitions/mandate.Type"
                },
                "updated_at": {
                    "type": "string"
                }
            }
        },
        "mandate.Mandate": {
            "type": "object",
            "properties": {
                "created_at": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "livemode": {
                    "type": "boolean"
                },
                "metadata": {
                    "$ref": "#/definitions/core.JSONB"
                },
                "object": {
                    "type": "string"
                },
                "payment_method": {
                    "$ref": "#/definitions/method.PaymentMethod"
                },
                "payment_method_details": {
                    "$ref": "#/definitions/methods.MandatePaymentMethodDetails"
                },
                "single_use": {
                    "$ref": "#/definitions/methods.MandateSingleUse"
                },
                "status": {
                    "$ref": "#/definitions/mandate.Status"
                },
                "type": {
                    "$ref": "#/definitions/mandate.Type"
                },
                "updated_at": {
                    "type": "string"
                }
            }
        },
        "mandate.Status": {
            "type": "string",
            "enum": [
                "active",
                "inactive",
                "pending"
            ],
            "x-enum-varnames": [
                "StatusActive",
                "StatusInactive",
                "StatusPending"
            ]
        },
        "mandate.Type": {
            "type": "string",
            "enum": [
                "multi_use",
                "single_use"
            ],
            "x-enum-varnames": [
                "TypeMultiUse",
                "TypeSingleUse"
            ]
        },
        "method.Bind.request": {
            "type": "object",
            "properties": {
                "account_holder_type": {
                    "type": "string",
                    "format": "uuid"
                },
                "account_number": {
                    "type": "string",
                    "format": "uuid"
                },
                "account_type": {
                    "type": "string",
                    "format": "uuid"
                },
                "acss_debit": {
                    "$ref": "#/definitions/methods.PaymentMethodAcssDebit"
                },
                "affirm": {
                    "$ref": "#/definitions/methods.PaymentMethodAffirm"
                },
                "afterpay_clearpay": {
                    "$ref": "#/definitions/methods.PaymentMethodAfterpayClearpay"
                },
                "alipay": {
                    "$ref": "#/definitions/methods.PaymentMethodAlipay"
                },
                "au_becs_debit": {
                    "$ref": "#/definitions/methods.PaymentMethodAuBecsDebit"
                },
                "bacs_debit": {
                    "$ref": "#/definitions/methods.PaymentMethodBacsDebit"
                },
                "bancontact": {
                    "$ref": "#/definitions/methods.PaymentMethodBancontact"
                },
                "bank": {
                    "type": "string",
                    "format": "uuid"
                },
                "billing_details": {
                    "$ref": "#/definitions/address.BillingDetails"
                },
                "blik": {
                    "$ref": "#/definitions/methods.PaymentMethodBlik"
                },
                "boleto": {
                    "$ref": "#/definitions/methods.PaymentMethodBoleto"
                },
                "bsb_number": {
                    "type": "string",
                    "format": "uuid"
                },
                "btc_pay": {
                    "$ref": "#/definitions/methods.PaymentMethodBtcPay"
                },
                "card": {
                    "$ref": "#/definitions/methods.PaymentMethodCard"
                },
                "card_present": {
                    "$ref": "#/definitions/methods.PaymentMethodCardPresent"
                },
                "country": {
                    "type": "string",
                    "format": "uuid"
                },
                "created_at": {
                    "type": "string"
                },
                "customer": {
                    "type": "string",
                    "format": "uuid"
                },
                "customer_balance": {
                    "$ref": "#/definitions/methods.PaymentMethodCustomerBalance"
                },
                "cvc": {
                    "type": "string",
                    "format": "uuid"
                },
                "day": {
                    "type": "string",
                    "format": "uuid"
                },
                "eps": {
                    "$ref": "#/definitions/methods.PaymentMethodEps"
                },
                "exp_month": {
                    "type": "string",
                    "format": "uuid"
                },
                "exp_year": {
                    "type": "string",
                    "format": "uuid"
                },
                "financial_connections_account": {
                    "type": "string",
                    "format": "uuid"
                },
                "fpx": {
                    "$ref": "#/definitions/methods.PaymentMethodFpx"
                },
                "giropay": {
                    "$ref": "#/definitions/methods.PaymentMethodGiropay"
                },
                "grabpay": {
                    "$ref": "#/definitions/methods.PaymentMethodGrabpay"
                },
                "iban": {
                    "type": "string",
                    "format": "uuid"
                },
                "id": {
                    "type": "string"
                },
                "ideal": {
                    "$ref": "#/definitions/methods.PaymentMethodIdeal"
                },
                "institution_number": {
                    "type": "string",
                    "format": "uuid"
                },
                "interac_present": {
                    "$ref": "#/definitions/methods.PaymentMethodInteracPresent"
                },
                "klarna": {
                    "$ref": "#/definitions/methods.PaymentMethodKlarna"
                },
                "konbini": {
                    "$ref": "#/definitions/methods.PaymentMethodKonbini"
                },
                "link": {
                    "$ref": "#/definitions/methods.PaymentMethodLink"
                },
                "livemode": {
                    "type": "boolean"
                },
                "metadata": {
                    "$ref": "#/definitions/core.JSONB"
                },
                "month": {
                    "type": "string",
                    "format": "uuid"
                },
                "number": {
                    "type": "string",
                    "format": "uuid"
                },
                "object": {
                    "type": "string"
                },
                "oxxo": {
                    "$ref": "#/definitions/methods.PaymentMethodOxxo"
                },
                "p24": {
                    "$ref": "#/definitions/methods.PaymentMethodP24"
                },
                "paynow": {
                    "$ref": "#/definitions/methods.PaymentMethodPaynow"
                },
                "pix": {
                    "$ref": "#/definitions/methods.PaymentMethodPix"
                },
                "promptpay": {
                    "$ref": "#/definitions/methods.PaymentMethodPromptpay"
                },
                "radar_options": {
                    "$ref": "#/definitions/radar.RadarOptions"
                },
                "routing_number": {
                    "type": "string",
                    "format": "uuid"
                },
                "sepa_debit": {
                    "$ref": "#/definitions/methods.PaymentMethodSepaDebit"
                },
                "sofort": {
                    "$ref": "#/definitions/methods.PaymentMethodSofort"
                },
                "sort_code": {
                    "type": "string",
                    "format": "uuid"
                },
                "tax_id": {
                    "type": "string",
                    "format": "uuid"
                },
                "transit_number": {
                    "type": "string",
                    "format": "uuid"
                },
                "type": {
                    "$ref": "#/definitions/method.Type"
                },
                "updated_at": {
                    "type": "string"
                },
                "us_bank_account": {
                    "$ref": "#/definitions/methods.PaymentMethodUsBankAccount"
                },
                "wechat_pay": {
                    "$ref": "#/definitions/methods.PaymentMethodWechatPay"
                },
                "year": {
                    "type": "string",
                    "format": "uuid"
                }
            }
        },
        "method.PaymentMethod": {
            "type": "object",
            "properties": {
                "acss_debit": {
                    "$ref": "#/definitions/methods.PaymentMethodAcssDebit"
                },
                "affirm": {
                    "$ref": "#/definitions/methods.PaymentMethodAffirm"
                },
                "afterpay_clearpay": {
                    "$ref": "#/definitions/methods.PaymentMethodAfterpayClearpay"
                },
                "alipay": {
                    "$ref": "#/definitions/methods.PaymentMethodAlipay"
                },
                "au_becs_debit": {
                    "$ref": "#/definitions/methods.PaymentMethodAuBecsDebit"
                },
                "bacs_debit": {
                    "$ref": "#/definitions/methods.PaymentMethodBacsDebit"
                },
                "bancontact": {
                    "$ref": "#/definitions/methods.PaymentMethodBancontact"
                },
                "billing_details": {
                    "$ref": "#/definitions/address.BillingDetails"
                },
                "blik": {
                    "$ref": "#/definitions/methods.PaymentMethodBlik"
                },
                "boleto": {
                    "$ref": "#/definitions/methods.PaymentMethodBoleto"
                },
                "btc_pay": {
                    "$ref": "#/definitions/methods.PaymentMethodBtcPay"
                },
                "card": {
                    "$ref": "#/definitions/methods.PaymentMethodCard"
                },
                "card_present": {
                    "$ref": "#/definitions/methods.PaymentMethodCardPresent"
                },
                "created_at": {
                    "type": "string"
                },
                "customer": {
                    "$ref": "#/definitions/customer.Customer"
                },
                "customer_balance": {
                    "$ref": "#/definitions/methods.PaymentMethodCustomerBalance"
                },
                "eps": {
                    "$ref": "#/definitions/methods.PaymentMethodEps"
                },
                "fpx": {
                    "$ref": "#/definitions/methods.PaymentMethodFpx"
                },
                "giropay": {
                    "$ref": "#/definitions/methods.PaymentMethodGiropay"
                },
                "grabpay": {
                    "$ref": "#/definitions/methods.PaymentMethodGrabpay"
                },
                "id": {
                    "type": "string"
                },
                "ideal": {
                    "$ref": "#/definitions/methods.PaymentMethodIdeal"
                },
                "interac_present": {
                    "$ref": "#/definitions/methods.PaymentMethodInteracPresent"
                },
                "klarna": {
                    "$ref": "#/definitions/methods.PaymentMethodKlarna"
                },
                "konbini": {
                    "$ref": "#/definitions/methods.PaymentMethodKonbini"
                },
                "link": {
                    "$ref": "#/definitions/methods.PaymentMethodLink"
                },
                "livemode": {
                    "type": "boolean"
                },
                "metadata": {
                    "$ref": "#/definitions/core.JSONB"
                },
                "object": {
                    "type": "string"
                },
                "oxxo": {
                    "$ref": "#/definitions/methods.PaymentMethodOxxo"
                },
                "p24": {
                    "$ref": "#/definitions/methods.PaymentMethodP24"
                },
                "paynow": {
                    "$ref": "#/definitions/methods.PaymentMethodPaynow"
                },
                "pix": {
                    "$ref": "#/definitions/methods.PaymentMethodPix"
                },
                "promptpay": {
                    "$ref": "#/definitions/methods.PaymentMethodPromptpay"
                },
                "radar_options": {
                    "$ref": "#/definitions/radar.RadarOptions"
                },
                "sepa_debit": {
                    "$ref": "#/definitions/methods.PaymentMethodSepaDebit"
                },
                "sofort": {
                    "$ref": "#/definitions/methods.PaymentMethodSofort"
                },
                "type": {
                    "$ref": "#/definitions/method.Type"
                },
                "updated_at": {
                    "type": "string"
                },
                "us_bank_account": {
                    "$ref": "#/definitions/methods.PaymentMethodUsBankAccount"
                },
                "wechat_pay": {
                    "$ref": "#/definitions/methods.PaymentMethodWechatPay"
                }
            }
        },
        "method.Type": {
            "type": "string",
            "enum": [
                "acss_debit",
                "affirm",
                "afterpay_clearpay",
                "alipay",
                "au_becs_debit",
                "bacs_debit",
                "bancontact",
                "blik",
                "boleto",
                "btcpay",
                "card",
                "card_present",
                "customer_balance",
                "eps",
                "fpx",
                "giropay",
                "grabpay",
                "ideal",
                "interac_present",
                "klarna",
                "konbini",
                "link",
                "oxxo",
                "p24",
                "paynow",
                "pix",
                "promptpay",
                "sepa_debit",
                "sofort",
                "us_bank_account",
                "wechat_pay"
            ],
            "x-enum-varnames": [
                "TypeAcssDebit",
                "TypeAffirm",
                "TypeAfterpayClearpay",
                "TypeAlipay",
                "TypeAuBecsDebit",
                "TypeBacsDebit",
                "TypeBancontact",
                "TypeBlik",
                "TypeBoleto",
                "TypeBtcpay",
                "TypeCard",
                "TypeCardPresent",
                "TypeCustomerBalance",
                "TypeEps",
                "TypeFpx",
                "TypeGiropay",
                "TypeGrabpay",
                "TypeIdeal",
                "TypeInteracPresent",
                "TypeKlarna",
                "TypeKonbini",
                "TypeLink",
                "TypeOxxo",
                "TypeP24",
                "TypePaynow",
                "TypePix",
                "TypePromptpay",
                "TypeSepaDebit",
                "TypeSofort",
                "TypeUsBankAccount",
                "TypeWechatPay"
            ]
        },
        "methods.MandateAcssDebit": {
            "type": "object",
            "properties": {
                "created_at": {
                    "type": "string"
                },
                "default_for": {
                    "description": "List of Stripe products where this mandate can be selected automatically.",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "id": {
                    "type": "string"
                },
                "interval_description": {
                    "description": "Description of the interval. Only required if the 'payment_schedule' parameter is 'interval' or 'combined'.",
                    "type": "string"
                },
                "livemode": {
                    "type": "boolean"
                },
                "metadata": {
                    "$ref": "#/definitions/core.JSONB"
                },
                "object": {
                    "type": "string"
                },
                "payment_schedule": {
                    "description": "Payment schedule for the mandate.",
                    "type": "string"
                },
                "transaction_type": {
                    "description": "Transaction type of the mandate.",
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                }
            }
        },
        "methods.MandateAuBecsDebit": {
            "type": "object",
            "properties": {
                "created_at": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "livemode": {
                    "type": "boolean"
                },
                "metadata": {
                    "$ref": "#/definitions/core.JSONB"
                },
                "object": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                },
                "url": {
                    "description": "The URL of the mandate. This URL generally contains sensitive information about the customer and should be shared with them exclusively.",
                    "type": "string"
                }
            }
        },
        "methods.MandateBacsDebit": {
            "type": "object",
            "properties": {
                "created_at": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "livemode": {
                    "type": "boolean"
                },
                "metadata": {
                    "$ref": "#/definitions/core.JSONB"
                },
                "network_status": {
                    "description": "The status of the mandate on the Bacs network. Can be one of `pending`, `revoked`, `refused`, or `accepted`.",
                    "type": "string"
                },
                "object": {
                    "type": "string"
                },
                "reference": {
                    "description": "The unique reference identifying the mandate on the Bacs network.",
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                },
                "url": {
                    "description": "The URL that will contain the mandate that the customer has signed.",
                    "type": "string"
                }
            }
        },
        "methods.MandateBlik": {
            "type": "object",
            "properties": {
                "created_at": {
                    "type": "string"
                },
                "expires_after": {
                    "description": "Date at which the mandate expires.",
                    "type": "integer"
                },
                "id": {
                    "type": "string"
                },
                "livemode": {
                    "type": "boolean"
                },
                "metadata": {
                    "$ref": "#/definitions/core.JSONB"
                },
                "object": {
                    "type": "string"
                },
                "off_session": {
                    "type": "string",
                    "format": "uuid"
                },
                "type": {
                    "description": "Type of the mandate.",
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                }
            }
        },
        "methods.MandateCard": {
            "type": "object",
            "properties": {
                "created_at": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "livemode": {
                    "type": "boolean"
                },
                "metadata": {
                    "$ref": "#/definitions/core.JSONB"
                },
                "object": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                }
            }
        },
        "methods.MandateLink": {
            "type": "object",
            "properties": {
                "created_at": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "livemode": {
                    "type": "boolean"
                },
                "metadata": {
                    "$ref": "#/definitions/core.JSONB"
                },
                "object": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                }
            }
        },
        "methods.MandatePaymentMethodDetails": {
            "type": "object",
            "properties": {
                "acss_debit": {
                    "$ref": "#/definitions/methods.MandateAcssDebit"
                },
                "au_becs_debit": {
                    "$ref": "#/definitions/methods.MandateAuBecsDebit"
                },
                "bacs_debit": {
                    "$ref": "#/definitions/methods.MandateBacsDebit"
                },
                "blik": {
                    "$ref": "#/definitions/methods.MandateBlik"
                },
                "card": {
                    "$ref": "#/definitions/methods.MandateCard"
                },
                "created_at": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "link": {
                    "$ref": "#/definitions/methods.MandateLink"
                },
                "livemode": {
                    "type": "boolean"
                },
                "metadata": {
                    "$ref": "#/definitions/core.JSONB"
                },
                "object": {
                    "type": "string"
                },
                "sepa_debit": {
                    "$ref": "#/definitions/methods.MandateSepaDebit"
                },
                "type": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                },
                "us_bank_account": {
                    "$ref": "#/definitions/methods.MandateUsBankAccount"
                }
            }
        },
        "methods.MandateSepaDebit": {
            "type": "object",
            "properties": {
                "created_at": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "livemode": {
                    "type": "boolean"
                },
                "metadata": {
                    "$ref": "#/definitions/core.JSONB"
                },
                "object": {
                    "type": "string"
                },
                "reference": {
                    "description": "The unique reference of the mandate.",
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                },
                "url": {
                    "description": "The URL of the mandate. This URL generally contains sensitive information about the customer and should be shared with them exclusively.",
                    "type": "string"
                }
            }
        },
        "methods.MandateSingleUse": {
            "type": "object",
            "properties": {
                "amount": {
                    "description": "On a single use mandate, the amount of the payment.",
                    "type": "integer"
                },
                "created_at": {
                    "type": "string"
                },
                "currency": {
                    "description": "On a single use mandate, the currency of the payment.",
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "livemode": {
                    "type": "boolean"
                },
                "metadata": {
                    "$ref": "#/definitions/core.JSONB"
                },
                "object": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                }
            }
        },
        "methods.MandateUsBankAccount": {
            "type": "object",
            "properties": {
                "created_at": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "livemode": {
                    "type": "boolean"
                },
                "metadata": {
                    "$ref": "#/definitions/core.JSONB"
                },
                "object": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                }
            }
        },
        "methods.PaymentIntentPaymentMethodOptions": {
            "type": "object",
            "properties": {
                "acss_debit": {
                    "$ref": "#/definitions/methods.PaymentIntentPaymentMethodOptionsAcssDebit1"
                },
                "affirm": {
                    "$ref": "#/definitions/methods.PaymentIntentPaymentMethodOptionsAffirm"
                },
                "afterpay_clearpay": {
                    "$ref": "#/definitions/methods.PaymentIntentPaymentMethodOptionsAfterpayClearpay"
                },
                "alipay": {
                    "$ref": "#/definitions/methods.PaymentIntentPaymentMethodOptionsAlipay"
                },
                "au_becs_debit": {
                    "$ref": "#/definitions/methods.PaymentIntentPaymentMethodOptionsAuBecsDebit1"
                },
                "bacs_debit": {
                    "$ref": "#/definitions/methods.PaymentIntentPaymentMethodOptionsBacsDebit"
                },
                "bancontact": {
                    "$ref": "#/definitions/methods.PaymentIntentPaymentMethodOptionsBancontact"
                },
                "blik": {
                    "$ref": "#/definitions/methods.PaymentIntentPaymentMethodOptionsBlik"
                },
                "boleto": {
                    "$ref": "#/definitions/methods.PaymentIntentPaymentMethodOptionsBoleto"
                },
                "btc_pay": {
                    "$ref": "#/definitions/methods.PaymentIntentPaymentMethodOptionsBtcPay"
                },
                "card": {
                    "$ref": "#/definitions/methods.PaymentIntentPaymentMethodOptionsCard1"
                },
                "card_present": {
                    "$ref": "#/definitions/methods.PaymentIntentPaymentMethodOptionsCardPresent"
                },
                "created_at": {
                    "type": "string"
                },
                "customer_balance": {
                    "$ref": "#/definitions/methods.PaymentIntentPaymentMethodOptionsCustomerBalance"
                },
                "eps": {
                    "$ref": "#/definitions/methods.PaymentIntentPaymentMethodOptionsEps1"
                },
                "fpx": {
                    "$ref": "#/definitions/methods.PaymentIntentPaymentMethodOptionsFpx"
                },
                "giropay": {
                    "$ref": "#/definitions/methods.PaymentIntentPaymentMethodOptionsGiropay"
                },
                "grabpay": {
                    "$ref": "#/definitions/methods.PaymentIntentPaymentMethodOptionsGrabpay"
                },
                "id": {
                    "type": "string"
                },
                "ideal": {
                    "$ref": "#/definitions/methods.PaymentIntentPaymentMethodOptionsIdeal"
                },
                "interac_present": {
                    "$ref": "#/definitions/methods.PaymentIntentPaymentMethodOptionsInteracPresent"
                },
                "klarna": {
                    "$ref": "#/definitions/methods.PaymentIntentPaymentMethodOptionsKlarna"
                },
                "konbini": {
                    "$ref": "#/definitions/methods.PaymentIntentPaymentMethodOptionsKonbini"
                },
                "link": {
                    "$ref": "#/definitions/methods.PaymentIntentPaymentMethodOptionsLink1"
                },
                "livemode": {
                    "type": "boolean"
                },
                "metadata": {
                    "$ref": "#/definitions/core.JSONB"
                },
                "object": {
                    "type": "string"
                },
                "oxxo": {
                    "$ref": "#/definitions/methods.PaymentIntentPaymentMethodOptionsOxxo"
                },
                "p24": {
                    "$ref": "#/definitions/methods.PaymentIntentPaymentMethodOptionsP24"
                },
                "paynow": {
                    "$ref": "#/definitions/methods.PaymentIntentPaymentMethodOptionsPaynow"
                },
                "pix": {
                    "$ref": "#/definitions/methods.PaymentIntentPaymentMethodOptionsPix"
                },
                "promptpay": {
                    "$ref": "#/definitions/methods.PaymentIntentPaymentMethodOptionsPromptpay"
                },
                "sepa_debit": {
                    "$ref": "#/definitions/methods.PaymentIntentPaymentMethodOptionsSepaDebit1"
                },
                "sofort": {
                    "$ref": "#/definitions/methods.PaymentIntentPaymentMethodOptionsSofort"
                },
                "updated_at": {
                    "type": "string"
                },
                "us_bank_account": {
                    "$ref": "#/definitions/methods.PaymentIntentPaymentMethodOptionsUsBankAccount1"
                },
                "wechat_pay": {
                    "$ref": "#/definitions/methods.PaymentIntentPaymentMethodOptionsWechatPay"
                }
            }
        },
        "methods.PaymentIntentPaymentMethodOptionsAcssDebit1": {
            "type": "object",
            "properties": {
                "capture_method": {
                    "description": "Controls when the funds will be captured from the customer's account.",
                    "type": "string"
                },
                "created_at": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "installments": {
                    "type": "string",
                    "format": "uuid"
                },
                "livemode": {
                    "type": "boolean"
                },
                "mandate_options": {
                    "type": "string",
                    "format": "uuid"
                },
                "metadata": {
                    "$ref": "#/definitions/core.JSONB"
                },
                "object": {
                    "type": "string"
                },
                "setup_future_usage": {
                    "description": "Indicates that you intend to make future payments with this PaymentIntent's payment method.  Providing this parameter will [attach the payment method](https://stripe.com/docs/payments/save-during-payment) to the PaymentIntent's Customer, if present, after the PaymentIntent is confirmed and any required actions from the user are complete. If no Customer was provided, the payment method can still be [attached](https://stripe.com/docs/api/payment_methods/attach) to a Customer after the transaction completes.  When processing card payments, Stripe also uses `setup_future_usage` to dynamically optimize your payment flow and comply with regional legislation and network rules, such as [SCA](https://stripe.com/docs/strong-customer-authentication).",
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                },
                "verification_method": {
                    "description": "Bank account verification method.",
                    "type": "string"
                }
            }
        },
        "methods.PaymentIntentPaymentMethodOptionsAffirm": {
            "type": "object",
            "properties": {
                "capture_method": {
                    "description": "Controls when the funds will be captured from the customer's account.",
                    "type": "string"
                },
                "created_at": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "installments": {
                    "type": "string",
                    "format": "uuid"
                },
                "livemode": {
                    "type": "boolean"
                },
                "metadata": {
                    "$ref": "#/definitions/core.JSONB"
                },
                "object": {
                    "type": "string"
                },
                "setup_future_usage": {
                    "description": "Indicates that you intend to make future payments with this PaymentIntent's payment method.  Providing this parameter will [attach the payment method](https://stripe.com/docs/payments/save-during-payment) to the PaymentIntent's Customer, if present, after the PaymentIntent is confirmed and any required actions from the user are complete. If no Customer was provided, the payment method can still be [attached](https://stripe.com/docs/api/payment_methods/attach) to a Customer after the transaction completes.  When processing card payments, Stripe also uses `setup_future_usage` to dynamically optimize your payment flow and comply with regional legislation and network rules, such as [SCA](https://stripe.com/docs/strong-customer-authentication).",
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                },
                "verification_method": {
                    "description": "Bank account verification method.",
                    "type": "string"
                }
            }
        },
        "methods.PaymentIntentPaymentMethodOptionsAfterpayClearpay": {
            "type": "object",
            "properties": {
                "capture_method": {
                    "description": "Controls when the funds will be captured from the customer's account.",
                    "type": "string"
                },
                "created_at": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "installments": {
                    "type": "string",
                    "format": "uuid"
                },
                "livemode": {
                    "type": "boolean"
                },
                "metadata": {
                    "$ref": "#/definitions/core.JSONB"
                },
                "object": {
                    "type": "string"
                },
                "reference": {
                    "description": "Order identifier shown to the customer in Afterpay’s online portal. We recommend using a value that helps you answer any questions a customer might have about the payment. The identifier is limited to 128 characters and may contain only letters, digits, underscores, backslashes and dashes.",
                    "type": "string"
                },
                "setup_future_usage": {
                    "description": "Indicates that you intend to make future payments with this PaymentIntent's payment method.  Providing this parameter will [attach the payment method](https://stripe.com/docs/payments/save-during-payment) to the PaymentIntent's Customer, if present, after the PaymentIntent is confirmed and any required actions from the user are complete. If no Customer was provided, the payment method can still be [attached](https://stripe.com/docs/api/payment_methods/attach) to a Customer after the transaction completes.  When processing card payments, Stripe also uses `setup_future_usage` to dynamically optimize your payment flow and comply with regional legislation and network rules, such as [SCA](https://stripe.com/docs/strong-customer-authentication).",
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                },
                "verification_method": {
                    "description": "Bank account verification method.",
                    "type": "string"
                }
            }
        },
        "methods.PaymentIntentPaymentMethodOptionsAlipay": {
            "type": "object",
            "properties": {
                "capture_method": {
                    "description": "Controls when the funds will be captured from the customer's account.",
                    "type": "string"
                },
                "created_at": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "installments": {
                    "type": "string",
                    "format": "uuid"
                },
                "livemode": {
                    "type": "boolean"
                },
                "metadata": {
                    "$ref": "#/definitions/core.JSONB"
                },
                "object": {
                    "type": "string"
                },
                "setup_future_usage": {
                    "description": "Indicates that you intend to make future payments with this PaymentIntent's payment method.  Providing this parameter will [attach the payment method](https://stripe.com/docs/payments/save-during-payment) to the PaymentIntent's Customer, if present, after the PaymentIntent is confirmed and any required actions from the user are complete. If no Customer was provided, the payment method can still be [attached](https://stripe.com/docs/api/payment_methods/attach) to a Customer after the transaction completes.  When processing card payments, Stripe also uses `setup_future_usage` to dynamically optimize your payment flow and comply with regional legislation and network rules, such as [SCA](https://stripe.com/docs/strong-customer-authentication).",
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                },
                "verification_method": {
                    "description": "Bank account verification method.",
                    "type": "string"
                }
            }
        },
        "methods.PaymentIntentPaymentMethodOptionsAuBecsDebit1": {
            "type": "object",
            "properties": {
                "capture_method": {
                    "description": "Controls when the funds will be captured from the customer's account.",
                    "type": "string"
                },
                "created_at": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "installments": {
                    "type": "string",
                    "format": "uuid"
                },
                "livemode": {
                    "type": "boolean"
                },
                "metadata": {
                    "$ref": "#/definitions/core.JSONB"
                },
                "object": {
                    "type": "string"
                },
                "setup_future_usage": {
                    "description": "Indicates that you intend to make future payments with this PaymentIntent's payment method.  Providing this parameter will [attach the payment method](https://stripe.com/docs/payments/save-during-payment) to the PaymentIntent's Customer, if present, after the PaymentIntent is confirmed and any required actions from the user are complete. If no Customer was provided, the payment method can still be [attached](https://stripe.com/docs/api/payment_methods/attach) to a Customer after the transaction completes.  When processing card payments, Stripe also uses `setup_future_usage` to dynamically optimize your payment flow and comply with regional legislation and network rules, such as [SCA](https://stripe.com/docs/strong-customer-authentication).",
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                },
                "verification_method": {
                    "description": "Bank account verification method.",
                    "type": "string"
                }
            }
        },
        "methods.PaymentIntentPaymentMethodOptionsBacsDebit": {
            "type": "object",
            "properties": {
                "capture_method": {
                    "description": "Controls when the funds will be captured from the customer's account.",
                    "type": "string"
                },
                "created_at": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "installments": {
                    "type": "string",
                    "format": "uuid"
                },
                "livemode": {
                    "type": "boolean"
                },
                "metadata": {
                    "$ref": "#/definitions/core.JSONB"
                },
                "object": {
                    "type": "string"
                },
                "setup_future_usage": {
                    "description": "Indicates that you intend to make future payments with this PaymentIntent's payment method.  Providing this parameter will [attach the payment method](https://stripe.com/docs/payments/save-during-payment) to the PaymentIntent's Customer, if present, after the PaymentIntent is confirmed and any required actions from the user are complete. If no Customer was provided, the payment method can still be [attached](https://stripe.com/docs/api/payment_methods/attach) to a Customer after the transaction completes.  When processing card payments, Stripe also uses `setup_future_usage` to dynamically optimize your payment flow and comply with regional legislation and network rules, such as [SCA](https://stripe.com/docs/strong-customer-authentication).",
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                },
                "verification_method": {
                    "description": "Bank account verification method.",
                    "type": "string"
                }
            }
        },
        "methods.PaymentIntentPaymentMethodOptionsBancontact": {
            "type": "object",
            "properties": {
                "capture_method": {
                    "description": "Controls when the funds will be captured from the customer's account.",
                    "type": "string"
                },
                "created_at": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "installments": {
                    "type": "string",
                    "format": "uuid"
                },
                "livemode": {
                    "type": "boolean"
                },
                "metadata": {
                    "$ref": "#/definitions/core.JSONB"
                },
                "object": {
                    "type": "string"
                },
                "preferred_language": {
                    "description": "Preferred language of the Bancontact authorization page that the customer is redirected to.",
                    "type": "string"
                },
                "setup_future_usage": {
                    "description": "Indicates that you intend to make future payments with this PaymentIntent's payment method.  Providing this parameter will [attach the payment method](https://stripe.com/docs/payments/save-during-payment) to the PaymentIntent's Customer, if present, after the PaymentIntent is confirmed and any required actions from the user are complete. If no Customer was provided, the payment method can still be [attached](https://stripe.com/docs/api/payment_methods/attach) to a Customer after the transaction completes.  When processing card payments, Stripe also uses `setup_future_usage` to dynamically optimize your payment flow and comply with regional legislation and network rules, such as [SCA](https://stripe.com/docs/strong-customer-authentication).",
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                },
                "verification_method": {
                    "description": "Bank account verification method.",
                    "type": "string"
                }
            }
        },
        "methods.PaymentIntentPaymentMethodOptionsBlik": {
            "type": "object",
            "properties": {
                "capture_method": {
                    "description": "Controls when the funds will be captured from the customer's account.",
                    "type": "string"
                },
                "created_at": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "installments": {
                    "type": "string",
                    "format": "uuid"
                },
                "livemode": {
                    "type": "boolean"
                },
                "metadata": {
                    "$ref": "#/definitions/core.JSONB"
                },
                "object": {
                    "type": "string"
                },
                "setup_future_usage": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                },
                "verification_method": {
                    "description": "Bank account verification method.",
                    "type": "string"
                }
            }
        },
        "methods.PaymentIntentPaymentMethodOptionsBoleto": {
            "type": "object",
            "properties": {
                "capture_method": {
                    "description": "Controls when the funds will be captured from the customer's account.",
                    "type": "string"
                },
                "created_at": {
                    "type": "string"
                },
                "expires_after_days": {
                    "description": "The number of calendar days before a Boleto voucher expires. For example, if you create a Boleto voucher on Monday and you set expires_after_days to 2, the Boleto voucher will expire on Wednesday at 23:59 America/Sao_Paulo time.",
                    "type": "integer"
                },
                "id": {
                    "type": "string"
                },
                "installments": {
                    "type": "string",
                    "format": "uuid"
                },
                "livemode": {
                    "type": "boolean"
                },
                "metadata": {
                    "$ref": "#/definitions/core.JSONB"
                },
                "object": {
                    "type": "string"
                },
                "setup_future_usage": {
                    "description": "Indicates that you intend to make future payments with this PaymentIntent's payment method.  Providing this parameter will [attach the payment method](https://stripe.com/docs/payments/save-during-payment) to the PaymentIntent's Customer, if present, after the PaymentIntent is confirmed and any required actions from the user are complete. If no Customer was provided, the payment method can still be [attached](https://stripe.com/docs/api/payment_methods/attach) to a Customer after the transaction completes.  When processing card payments, Stripe also uses `setup_future_usage` to dynamically optimize your payment flow and comply with regional legislation and network rules, such as [SCA](https://stripe.com/docs/strong-customer-authentication).",
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                },
                "verification_method": {
                    "description": "Bank account verification method.",
                    "type": "string"
                }
            }
        },
        "methods.PaymentIntentPaymentMethodOptionsBtcPay": {
            "type": "object",
            "properties": {
                "created_at": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "livemode": {
                    "type": "boolean"
                },
                "metadata": {
                    "$ref": "#/definitions/core.JSONB"
                },
                "object": {
                    "type": "string"
                },
                "setup_future_usage": {
                    "description": "Indicates that you intend to make future payments with this PaymentIntent's payment method.  Providing this parameter will [attach the payment method](https://stripe.com/docs/payments/save-during-payment) to the PaymentIntent's Customer, if present, after the PaymentIntent is confirmed and any required actions from the user are complete. If no Customer was provided, the payment method can still be [attached](https://stripe.com/docs/api/payment_methods/attach) to a Customer after the transaction completes.  When processing card payments, Stripe also uses `setup_future_usage` to dynamically optimize your payment flow and comply with regional legislation and network rules, such as [SCA](https://stripe.com/docs/strong-customer-authentication).",
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                }
            }
        },
        "methods.PaymentIntentPaymentMethodOptionsCard1": {
            "type": "object",
            "properties": {
                "capture_method": {
                    "description": "Controls when the funds will be captured from the customer's account.",
                    "type": "string"
                },
                "created_at": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "installments": {
                    "type": "string",
                    "format": "uuid"
                },
                "livemode": {
                    "type": "boolean"
                },
                "mandate_options": {
                    "type": "string",
                    "format": "uuid"
                },
                "metadata": {
                    "$ref": "#/definitions/core.JSONB"
                },
                "network": {
                    "description": "Selected network to process this payment intent on. Depends on the available networks of the card attached to the payment intent. Can be only set confirm-time.",
                    "type": "string"
                },
                "object": {
                    "type": "string"
                },
                "request_three_d_secure": {
                    "description": "We strongly recommend that you rely on our SCA Engine to automatically prompt your customers for authentication based on risk level and [other requirements](https://stripe.com/docs/strong-customer-authentication). However, if you wish to request 3D Secure based on logic from your own fraud engine, provide this option. Permitted values include: `automatic` or `any`. If not provided, defaults to `automatic`. Read our guide on [manually requesting 3D Secure](https://stripe.com/docs/payments/3d-secure#manual-three-ds) for more information on how this configuration interacts with Radar and our SCA Engine.",
                    "type": "string"
                },
                "setup_future_usage": {
                    "description": "Indicates that you intend to make future payments with this PaymentIntent's payment method.  Providing this parameter will [attach the payment method](https://stripe.com/docs/payments/save-during-payment) to the PaymentIntent's Customer, if present, after the PaymentIntent is confirmed and any required actions from the user are complete. If no Customer was provided, the payment method can still be [attached](https://stripe.com/docs/api/payment_methods/attach) to a Customer after the transaction completes.  When processing card payments, Stripe also uses `setup_future_usage` to dynamically optimize your payment flow and comply with regional legislation and network rules, such as [SCA](https://stripe.com/docs/strong-customer-authentication).",
                    "type": "string"
                },
                "statement_descriptor_suffix_kana": {
                    "description": "Provides information about a card payment that customers see on their statements. Concatenated with the Kana prefix (shortened Kana descriptor) or Kana statement descriptor that’s set on the account to form the complete statement descriptor. Maximum 22 characters. On card statements, the *concatenation* of both prefix and suffix (including separators) will appear truncated to 22 characters.",
                    "type": "string"
                },
                "statement_descriptor_suffix_kanji": {
                    "description": "Provides information about a card payment that customers see on their statements. Concatenated with the Kanji prefix (shortened Kanji descriptor) or Kanji statement descriptor that’s set on the account to form the complete statement descriptor. Maximum 17 characters. On card statements, the *concatenation* of both prefix and suffix (including separators) will appear truncated to 17 characters.",
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                },
                "verification_method": {
                    "description": "Installments  *paymentFlow.PaymentFlowsInstallmentOptions `json:\"installments,omitempty\"  database:\"foreignKey:id\" swaggertype:\"primitive,string\" format:\"uuid\"`\nBank account verification method.",
                    "type": "string"
                }
            }
        },
        "methods.PaymentIntentPaymentMethodOptionsCardPresent": {
            "type": "object",
            "properties": {
                "capture_method": {
                    "description": "Controls when the funds will be captured from the customer's account.",
                    "type": "string"
                },
                "created_at": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "installments": {
                    "type": "string",
                    "format": "uuid"
                },
                "livemode": {
                    "type": "boolean"
                },
                "metadata": {
                    "$ref": "#/definitions/core.JSONB"
                },
                "object": {
                    "type": "string"
                },
                "request_extended_authorization": {
                    "description": "Request ability to capture this payment beyond the standard [authorization validity window](https://stripe.com/docs/terminal/features/extended-authorizations#authorization-validity)",
                    "type": "boolean"
                },
                "request_incremental_authorization_support": {
                    "description": "Request ability to [increment](https://stripe.com/docs/terminal/features/incremental-authorizations) this PaymentIntent if the combination of MCC and card brand is eligible. Check [incremental_authorization_supported](https://stripe.com/docs/api/charges/object#charge_object-payment_method_details-card_present-incremental_authorization_supported) in the [Confirm](https://stripe.com/docs/api/payment_intents/confirm) response to verify support.",
                    "type": "boolean"
                },
                "setup_future_usage": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                },
                "verification_method": {
                    "description": "Bank account verification method.",
                    "type": "string"
                }
            }
        },
        "methods.PaymentIntentPaymentMethodOptionsCustomerBalance": {
            "type": "object",
            "properties": {
                "bank_transfer": {
                    "type": "string",
                    "format": "uuid"
                },
                "capture_method": {
                    "description": "Controls when the funds will be captured from the customer's account.",
                    "type": "string"
                },
                "created_at": {
                    "type": "string"
                },
                "funding_type": {
                    "description": "The funding method type to be used when there are not enough funds in the customer balance. Permitted values include: `bank_transfer`.",
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "installments": {
                    "type": "string",
                    "format": "uuid"
                },
                "livemode": {
                    "type": "boolean"
                },
                "metadata": {
                    "$ref": "#/definitions/core.JSONB"
                },
                "object": {
                    "type": "string"
                },
                "setup_future_usage": {
                    "description": "Indicates that you intend to make future payments with this PaymentIntent's payment method.  Providing this parameter will [attach the payment method](https://stripe.com/docs/payments/save-during-payment) to the PaymentIntent's Customer, if present, after the PaymentIntent is confirmed and any required actions from the user are complete. If no Customer was provided, the payment method can still be [attached](https://stripe.com/docs/api/payment_methods/attach) to a Customer after the transaction completes.  When processing card payments, Stripe also uses `setup_future_usage` to dynamically optimize your payment flow and comply with regional legislation and network rules, such as [SCA](https://stripe.com/docs/strong-customer-authentication).",
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                },
                "verification_method": {
                    "description": "Bank account verification method.",
                    "type": "string"
                }
            }
        },
        "methods.PaymentIntentPaymentMethodOptionsEps1": {
            "type": "object",
            "properties": {
                "capture_method": {
                    "description": "Controls when the funds will be captured from the customer's account.",
                    "type": "string"
                },
                "created_at": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "installments": {
                    "type": "string",
                    "format": "uuid"
                },
                "livemode": {
                    "type": "boolean"
                },
                "metadata": {
                    "$ref": "#/definitions/core.JSONB"
                },
                "object": {
                    "type": "string"
                },
                "setup_future_usage": {
                    "description": "Indicates that you intend to make future payments with this PaymentIntent's payment method.  Providing this parameter will [attach the payment method](https://stripe.com/docs/payments/save-during-payment) to the PaymentIntent's Customer, if present, after the PaymentIntent is confirmed and any required actions from the user are complete. If no Customer was provided, the payment method can still be [attached](https://stripe.com/docs/api/payment_methods/attach) to a Customer after the transaction completes.  When processing card payments, Stripe also uses `setup_future_usage` to dynamically optimize your payment flow and comply with regional legislation and network rules, such as [SCA](https://stripe.com/docs/strong-customer-authentication).",
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                },
                "verification_method": {
                    "description": "Bank account verification method.",
                    "type": "string"
                }
            }
        },
        "methods.PaymentIntentPaymentMethodOptionsFpx": {
            "type": "object",
            "properties": {
                "capture_method": {
                    "description": "Controls when the funds will be captured from the customer's account.",
                    "type": "string"
                },
                "created_at": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "installments": {
                    "type": "string",
                    "format": "uuid"
                },
                "livemode": {
                    "type": "boolean"
                },
                "metadata": {
                    "$ref": "#/definitions/core.JSONB"
                },
                "object": {
                    "type": "string"
                },
                "setup_future_usage": {
                    "description": "Indicates that you intend to make future payments with this PaymentIntent's payment method.  Providing this parameter will [attach the payment method](https://stripe.com/docs/payments/save-during-payment) to the PaymentIntent's Customer, if present, after the PaymentIntent is confirmed and any required actions from the user are complete. If no Customer was provided, the payment method can still be [attached](https://stripe.com/docs/api/payment_methods/attach) to a Customer after the transaction completes.  When processing card payments, Stripe also uses `setup_future_usage` to dynamically optimize your payment flow and comply with regional legislation and network rules, such as [SCA](https://stripe.com/docs/strong-customer-authentication).",
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                },
                "verification_method": {
                    "description": "Bank account verification method.",
                    "type": "string"
                }
            }
        },
        "methods.PaymentIntentPaymentMethodOptionsGiropay": {
            "type": "object",
            "properties": {
                "capture_method": {
                    "description": "Controls when the funds will be captured from the customer's account.",
                    "type": "string"
                },
                "created_at": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "installments": {
                    "type": "string",
                    "format": "uuid"
                },
                "livemode": {
                    "type": "boolean"
                },
                "metadata": {
                    "$ref": "#/definitions/core.JSONB"
                },
                "object": {
                    "type": "string"
                },
                "setup_future_usage": {
                    "description": "Indicates that you intend to make future payments with this PaymentIntent's payment method.  Providing this parameter will [attach the payment method](https://stripe.com/docs/payments/save-during-payment) to the PaymentIntent's Customer, if present, after the PaymentIntent is confirmed and any required actions from the user are complete. If no Customer was provided, the payment method can still be [attached](https://stripe.com/docs/api/payment_methods/attach) to a Customer after the transaction completes.  When processing card payments, Stripe also uses `setup_future_usage` to dynamically optimize your payment flow and comply with regional legislation and network rules, such as [SCA](https://stripe.com/docs/strong-customer-authentication).",
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                },
                "verification_method": {
                    "description": "Bank account verification method.",
                    "type": "string"
                }
            }
        },
        "methods.PaymentIntentPaymentMethodOptionsGrabpay": {
            "type": "object",
            "properties": {
                "capture_method": {
                    "description": "Controls when the funds will be captured from the customer's account.",
                    "type": "string"
                },
                "created_at": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "installments": {
                    "type": "string",
                    "format": "uuid"
                },
                "livemode": {
                    "type": "boolean"
                },
                "metadata": {
                    "$ref": "#/definitions/core.JSONB"
                },
                "object": {
                    "type": "string"
                },
                "setup_future_usage": {
                    "description": "Indicates that you intend to make future payments with this PaymentIntent's payment method.  Providing this parameter will [attach the payment method](https://stripe.com/docs/payments/save-during-payment) to the PaymentIntent's Customer, if present, after the PaymentIntent is confirmed and any required actions from the user are complete. If no Customer was provided, the payment method can still be [attached](https://stripe.com/docs/api/payment_methods/attach) to a Customer after the transaction completes.  When processing card payments, Stripe also uses `setup_future_usage` to dynamically optimize your payment flow and comply with regional legislation and network rules, such as [SCA](https://stripe.com/docs/strong-customer-authentication).",
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                },
                "verification_method": {
                    "description": "Bank account verification method.",
                    "type": "string"
                }
            }
        },
        "methods.PaymentIntentPaymentMethodOptionsIdeal": {
            "type": "object",
            "properties": {
                "capture_method": {
                    "description": "Controls when the funds will be captured from the customer's account.",
                    "type": "string"
                },
                "created_at": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "installments": {
                    "type": "string",
                    "format": "uuid"
                },
                "livemode": {
                    "type": "boolean"
                },
                "metadata": {
                    "$ref": "#/definitions/core.JSONB"
                },
                "object": {
                    "type": "string"
                },
                "setup_future_usage": {
                    "description": "Indicates that you intend to make future payments with this PaymentIntent's payment method.  Providing this parameter will [attach the payment method](https://stripe.com/docs/payments/save-during-payment) to the PaymentIntent's Customer, if present, after the PaymentIntent is confirmed and any required actions from the user are complete. If no Customer was provided, the payment method can still be [attached](https://stripe.com/docs/api/payment_methods/attach) to a Customer after the transaction completes.  When processing card payments, Stripe also uses `setup_future_usage` to dynamically optimize your payment flow and comply with regional legislation and network rules, such as [SCA](https://stripe.com/docs/strong-customer-authentication).",
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                },
                "verification_method": {
                    "description": "Bank account verification method.",
                    "type": "string"
                }
            }
        },
        "methods.PaymentIntentPaymentMethodOptionsInteracPresent": {
            "type": "object",
            "properties": {
                "capture_method": {
                    "description": "Controls when the funds will be captured from the customer's account.",
                    "type": "string"
                },
                "created_at": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "installments": {
                    "type": "string",
                    "format": "uuid"
                },
                "livemode": {
                    "type": "boolean"
                },
                "metadata": {
                    "$ref": "#/definitions/core.JSONB"
                },
                "object": {
                    "type": "string"
                },
                "setup_future_usage": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                },
                "verification_method": {
                    "description": "Bank account verification method.",
                    "type": "string"
                }
            }
        },
        "methods.PaymentIntentPaymentMethodOptionsKlarna": {
            "type": "object",
            "properties": {
                "capture_method": {
                    "description": "Controls when the funds will be captured from the customer's account.",
                    "type": "string"
                },
                "created_at": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "installments": {
                    "type": "string",
                    "format": "uuid"
                },
                "livemode": {
                    "type": "boolean"
                },
                "metadata": {
                    "$ref": "#/definitions/core.JSONB"
                },
                "object": {
                    "type": "string"
                },
                "preferred_locale": {
                    "description": "Preferred locale of the Klarna checkout page that the customer is redirected to.",
                    "type": "string"
                },
                "setup_future_usage": {
                    "description": "Indicates that you intend to make future payments with this PaymentIntent's payment method.  Providing this parameter will [attach the payment method](https://stripe.com/docs/payments/save-during-payment) to the PaymentIntent's Customer, if present, after the PaymentIntent is confirmed and any required actions from the user are complete. If no Customer was provided, the payment method can still be [attached](https://stripe.com/docs/api/payment_methods/attach) to a Customer after the transaction completes.  When processing card payments, Stripe also uses `setup_future_usage` to dynamically optimize your payment flow and comply with regional legislation and network rules, such as [SCA](https://stripe.com/docs/strong-customer-authentication).",
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                },
                "verification_method": {
                    "description": "Bank account verification method.",
                    "type": "string"
                }
            }
        },
        "methods.PaymentIntentPaymentMethodOptionsKonbini": {
            "type": "object",
            "properties": {
                "capture_method": {
                    "description": "Controls when the funds will be captured from the customer's account.",
                    "type": "string"
                },
                "confirmation_number": {
                    "description": "An optional 10 to 11 digit numeric-only string determining the confirmation code at applicable convenience stores.",
                    "type": "string"
                },
                "created_at": {
                    "type": "string"
                },
                "expires_after_days": {
                    "description": "The number of calendar days (between 1 and 60) after which Konbini payment instructions will expire. For example, if a PaymentIntent is confirmed with Konbini and `expires_after_days` set to 2 on Monday JST, the instructions will expire on Wednesday 23:59:59 JST.",
                    "type": "integer"
                },
                "expires_at": {
                    "description": "The timestamp at which the Konbini payment instructions will expire. Only one of `expires_after_days` or `expires_at` may be set.",
                    "type": "integer"
                },
                "id": {
                    "type": "string"
                },
                "installments": {
                    "type": "string",
                    "format": "uuid"
                },
                "livemode": {
                    "type": "boolean"
                },
                "metadata": {
                    "$ref": "#/definitions/core.JSONB"
                },
                "object": {
                    "type": "string"
                },
                "product_description": {
                    "description": "A product descriptor of up to 22 characters, which will appear to customers at the convenience store.",
                    "type": "string"
                },
                "setup_future_usage": {
                    "description": "Indicates that you intend to make future payments with this PaymentIntent's payment method.  Providing this parameter will [attach the payment method](https://stripe.com/docs/payments/save-during-payment) to the PaymentIntent's Customer, if present, after the PaymentIntent is confirmed and any required actions from the user are complete. If no Customer was provided, the payment method can still be [attached](https://stripe.com/docs/api/payment_methods/attach) to a Customer after the transaction completes.  When processing card payments, Stripe also uses `setup_future_usage` to dynamically optimize your payment flow and comply with regional legislation and network rules, such as [SCA](https://stripe.com/docs/strong-customer-authentication).",
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                },
                "verification_method": {
                    "description": "Bank account verification method.",
                    "type": "string"
                }
            }
        },
        "methods.PaymentIntentPaymentMethodOptionsLink1": {
            "type": "object",
            "properties": {
                "capture_method": {
                    "description": "Controls when the funds will be captured from the customer's account.",
                    "type": "string"
                },
                "created_at": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "installments": {
                    "type": "string",
                    "format": "uuid"
                },
                "livemode": {
                    "type": "boolean"
                },
                "metadata": {
                    "$ref": "#/definitions/core.JSONB"
                },
                "object": {
                    "type": "string"
                },
                "persistent_token": {
                    "description": "Token used for persistent Link logins.",
                    "type": "string"
                },
                "setup_future_usage": {
                    "description": "Indicates that you intend to make future payments with this PaymentIntent's payment method.  Providing this parameter will [attach the payment method](https://stripe.com/docs/payments/save-during-payment) to the PaymentIntent's Customer, if present, after the PaymentIntent is confirmed and any required actions from the user are complete. If no Customer was provided, the payment method can still be [attached](https://stripe.com/docs/api/payment_methods/attach) to a Customer after the transaction completes.  When processing card payments, Stripe also uses `setup_future_usage` to dynamically optimize your payment flow and comply with regional legislation and network rules, such as [SCA](https://stripe.com/docs/strong-customer-authentication).",
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                },
                "verification_method": {
                    "description": "Bank account verification method.",
                    "type": "string"
                }
            }
        },
        "methods.PaymentIntentPaymentMethodOptionsOxxo": {
            "type": "object",
            "properties": {
                "capture_method": {
                    "description": "Controls when the funds will be captured from the customer's account.",
                    "type": "string"
                },
                "created_at": {
                    "type": "string"
                },
                "expires_after_days": {
                    "description": "The number of calendar days before an OXXO invoice expires. For example, if you create an OXXO invoice on Monday and you set expires_after_days to 2, the OXXO invoice will expire on Wednesday at 23:59 America/Mexico_City time.",
                    "type": "integer"
                },
                "id": {
                    "type": "string"
                },
                "installments": {
                    "type": "string",
                    "format": "uuid"
                },
                "livemode": {
                    "type": "boolean"
                },
                "metadata": {
                    "$ref": "#/definitions/core.JSONB"
                },
                "object": {
                    "type": "string"
                },
                "setup_future_usage": {
                    "description": "Indicates that you intend to make future payments with this PaymentIntent's payment method.  Providing this parameter will [attach the payment method](https://stripe.com/docs/payments/save-during-payment) to the PaymentIntent's Customer, if present, after the PaymentIntent is confirmed and any required actions from the user are complete. If no Customer was provided, the payment method can still be [attached](https://stripe.com/docs/api/payment_methods/attach) to a Customer after the transaction completes.  When processing card payments, Stripe also uses `setup_future_usage` to dynamically optimize your payment flow and comply with regional legislation and network rules, such as [SCA](https://stripe.com/docs/strong-customer-authentication).",
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                },
                "verification_method": {
                    "description": "Bank account verification method.",
                    "type": "string"
                }
            }
        },
        "methods.PaymentIntentPaymentMethodOptionsP24": {
            "type": "object",
            "properties": {
                "capture_method": {
                    "description": "Controls when the funds will be captured from the customer's account.",
                    "type": "string"
                },
                "created_at": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "installments": {
                    "type": "string",
                    "format": "uuid"
                },
                "livemode": {
                    "type": "boolean"
                },
                "metadata": {
                    "$ref": "#/definitions/core.JSONB"
                },
                "object": {
                    "type": "string"
                },
                "setup_future_usage": {
                    "description": "Indicates that you intend to make future payments with this PaymentIntent's payment method.  Providing this parameter will [attach the payment method](https://stripe.com/docs/payments/save-during-payment) to the PaymentIntent's Customer, if present, after the PaymentIntent is confirmed and any required actions from the user are complete. If no Customer was provided, the payment method can still be [attached](https://stripe.com/docs/api/payment_methods/attach) to a Customer after the transaction completes.  When processing card payments, Stripe also uses `setup_future_usage` to dynamically optimize your payment flow and comply with regional legislation and network rules, such as [SCA](https://stripe.com/docs/strong-customer-authentication).",
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                },
                "verification_method": {
                    "description": "Bank account verification method.",
                    "type": "string"
                }
            }
        },
        "methods.PaymentIntentPaymentMethodOptionsPaynow": {
            "type": "object",
            "properties": {
                "capture_method": {
                    "description": "Controls when the funds will be captured from the customer's account.",
                    "type": "string"
                },
                "created_at": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "installments": {
                    "type": "string",
                    "format": "uuid"
                },
                "livemode": {
                    "type": "boolean"
                },
                "metadata": {
                    "$ref": "#/definitions/core.JSONB"
                },
                "object": {
                    "type": "string"
                },
                "setup_future_usage": {
                    "description": "Indicates that you intend to make future payments with this PaymentIntent's payment method.  Providing this parameter will [attach the payment method](https://stripe.com/docs/payments/save-during-payment) to the PaymentIntent's Customer, if present, after the PaymentIntent is confirmed and any required actions from the user are complete. If no Customer was provided, the payment method can still be [attached](https://stripe.com/docs/api/payment_methods/attach) to a Customer after the transaction completes.  When processing card payments, Stripe also uses `setup_future_usage` to dynamically optimize your payment flow and comply with regional legislation and network rules, such as [SCA](https://stripe.com/docs/strong-customer-authentication).",
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                },
                "verification_method": {
                    "description": "Bank account verification method.",
                    "type": "string"
                }
            }
        },
        "methods.PaymentIntentPaymentMethodOptionsPix": {
            "type": "object",
            "properties": {
                "capture_method": {
                    "description": "Controls when the funds will be captured from the customer's account.",
                    "type": "string"
                },
                "created_at": {
                    "type": "string"
                },
                "expires_after_seconds": {
                    "description": "The number of seconds (between 10 and 1209600) after which Pix payment will expire.",
                    "type": "integer"
                },
                "expires_at": {
                    "description": "The timestamp at which the Pix expires.",
                    "type": "integer"
                },
                "id": {
                    "type": "string"
                },
                "installments": {
                    "type": "string",
                    "format": "uuid"
                },
                "livemode": {
                    "type": "boolean"
                },
                "metadata": {
                    "$ref": "#/definitions/core.JSONB"
                },
                "object": {
                    "type": "string"
                },
                "setup_future_usage": {
                    "description": "Indicates that you intend to make future payments with this PaymentIntent's payment method.  Providing this parameter will [attach the payment method](https://stripe.com/docs/payments/save-during-payment) to the PaymentIntent's Customer, if present, after the PaymentIntent is confirmed and any required actions from the user are complete. If no Customer was provided, the payment method can still be [attached](https://stripe.com/docs/api/payment_methods/attach) to a Customer after the transaction completes.  When processing card payments, Stripe also uses `setup_future_usage` to dynamically optimize your payment flow and comply with regional legislation and network rules, such as [SCA](https://stripe.com/docs/strong-customer-authentication).",
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                },
                "verification_method": {
                    "description": "Bank account verification method.",
                    "type": "string"
                }
            }
        },
        "methods.PaymentIntentPaymentMethodOptionsPromptpay": {
            "type": "object",
            "properties": {
                "capture_method": {
                    "description": "Controls when the funds will be captured from the customer's account.",
                    "type": "string"
                },
                "created_at": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "installments": {
                    "type": "string",
                    "format": "uuid"
                },
                "livemode": {
                    "type": "boolean"
                },
                "metadata": {
                    "$ref": "#/definitions/core.JSONB"
                },
                "object": {
                    "type": "string"
                },
                "setup_future_usage": {
                    "description": "Indicates that you intend to make future payments with this PaymentIntent's payment method.  Providing this parameter will [attach the payment method](https://stripe.com/docs/payments/save-during-payment) to the PaymentIntent's Customer, if present, after the PaymentIntent is confirmed and any required actions from the user are complete. If no Customer was provided, the payment method can still be [attached](https://stripe.com/docs/api/payment_methods/attach) to a Customer after the transaction completes.  When processing card payments, Stripe also uses `setup_future_usage` to dynamically optimize your payment flow and comply with regional legislation and network rules, such as [SCA](https://stripe.com/docs/strong-customer-authentication).",
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                },
                "verification_method": {
                    "description": "Bank account verification method.",
                    "type": "string"
                }
            }
        },
        "methods.PaymentIntentPaymentMethodOptionsSepaDebit1": {
            "type": "object",
            "properties": {
                "capture_method": {
                    "description": "Controls when the funds will be captured from the customer's account.",
                    "type": "string"
                },
                "created_at": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "installments": {
                    "type": "string",
                    "format": "uuid"
                },
                "livemode": {
                    "type": "boolean"
                },
                "mandate_options": {
                    "$ref": "#/definitions/core.JSONB"
                },
                "metadata": {
                    "$ref": "#/definitions/core.JSONB"
                },
                "object": {
                    "type": "string"
                },
                "setup_future_usage": {
                    "description": "Indicates that you intend to make future payments with this PaymentIntent's payment method.  Providing this parameter will [attach the payment method](https://stripe.com/docs/payments/save-during-payment) to the PaymentIntent's Customer, if present, after the PaymentIntent is confirmed and any required actions from the user are complete. If no Customer was provided, the payment method can still be [attached](https://stripe.com/docs/api/payment_methods/attach) to a Customer after the transaction completes.  When processing card payments, Stripe also uses `setup_future_usage` to dynamically optimize your payment flow and comply with regional legislation and network rules, such as [SCA](https://stripe.com/docs/strong-customer-authentication).",
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                },
                "verification_method": {
                    "description": "Bank account verification method.",
                    "type": "string"
                }
            }
        },
        "methods.PaymentIntentPaymentMethodOptionsSofort": {
            "type": "object",
            "properties": {
                "capture_method": {
                    "description": "Controls when the funds will be captured from the customer's account.",
                    "type": "string"
                },
                "created_at": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "installments": {
                    "type": "string",
                    "format": "uuid"
                },
                "livemode": {
                    "type": "boolean"
                },
                "metadata": {
                    "$ref": "#/definitions/core.JSONB"
                },
                "object": {
                    "type": "string"
                },
                "preferred_language": {
                    "description": "Preferred language of the SOFORT authorization page that the customer is redirected to.",
                    "type": "string"
                },
                "setup_future_usage": {
                    "description": "Indicates that you intend to make future payments with this PaymentIntent's payment method.  Providing this parameter will [attach the payment method](https://stripe.com/docs/payments/save-during-payment) to the PaymentIntent's Customer, if present, after the PaymentIntent is confirmed and any required actions from the user are complete. If no Customer was provided, the payment method can still be [attached](https://stripe.com/docs/api/payment_methods/attach) to a Customer after the transaction completes.  When processing card payments, Stripe also uses `setup_future_usage` to dynamically optimize your payment flow and comply with regional legislation and network rules, such as [SCA](https://stripe.com/docs/strong-customer-authentication).",
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                },
                "verification_method": {
                    "description": "Bank account verification method.",
                    "type": "string"
                }
            }
        },
        "methods.PaymentIntentPaymentMethodOptionsUsBankAccount1": {
            "type": "object",
            "properties": {
                "capture_method": {
                    "description": "Controls when the funds will be captured from the customer's account.",
                    "type": "string"
                },
                "created_at": {
                    "type": "string"
                },
                "financial_connections": {
                    "type": "string",
                    "format": "uuid"
                },
                "id": {
                    "type": "string"
                },
                "installments": {
                    "type": "string",
                    "format": "uuid"
                },
                "livemode": {
                    "type": "boolean"
                },
                "metadata": {
                    "$ref": "#/definitions/core.JSONB"
                },
                "object": {
                    "type": "string"
                },
                "setup_future_usage": {
                    "description": "Indicates that you intend to make future payments with this PaymentIntent's payment method.  Providing this parameter will [attach the payment method](https://stripe.com/docs/payments/save-during-payment) to the PaymentIntent's Customer, if present, after the PaymentIntent is confirmed and any required actions from the user are complete. If no Customer was provided, the payment method can still be [attached](https://stripe.com/docs/api/payment_methods/attach) to a Customer after the transaction completes.  When processing card payments, Stripe also uses `setup_future_usage` to dynamically optimize your payment flow and comply with regional legislation and network rules, such as [SCA](https://stripe.com/docs/strong-customer-authentication).",
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                },
                "verification_method": {
                    "description": "Bank account verification method.",
                    "type": "string"
                }
            }
        },
        "methods.PaymentIntentPaymentMethodOptionsWechatPay": {
            "type": "object",
            "properties": {
                "app_id": {
                    "description": "The app ID registered with WeChat Pay. Only required when client is ios or android.",
                    "type": "string"
                },
                "capture_method": {
                    "description": "Controls when the funds will be captured from the customer's account.",
                    "type": "string"
                },
                "client": {
                    "description": "The client type that the end customer will pay from",
                    "type": "string"
                },
                "created_at": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "installments": {
                    "type": "string",
                    "format": "uuid"
                },
                "livemode": {
                    "type": "boolean"
                },
                "metadata": {
                    "$ref": "#/definitions/core.JSONB"
                },
                "object": {
                    "type": "string"
                },
                "setup_future_usage": {
                    "description": "Indicates that you intend to make future payments with this PaymentIntent's payment method.  Providing this parameter will [attach the payment method](https://stripe.com/docs/payments/save-during-payment) to the PaymentIntent's Customer, if present, after the PaymentIntent is confirmed and any required actions from the user are complete. If no Customer was provided, the payment method can still be [attached](https://stripe.com/docs/api/payment_methods/attach) to a Customer after the transaction completes.  When processing card payments, Stripe also uses `setup_future_usage` to dynamically optimize your payment flow and comply with regional legislation and network rules, such as [SCA](https://stripe.com/docs/strong-customer-authentication).",
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                },
                "verification_method": {
                    "description": "Bank account verification method.",
                    "type": "string"
                }
            }
        },
        "methods.PaymentMethodAcssDebit": {
            "type": "object",
            "properties": {
                "bank_name": {
                    "type": "string"
                },
                "created_at": {
                    "type": "string"
                },
                "fingerprint": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "institution_number": {
                    "type": "string"
                },
                "last4": {
                    "type": "string"
                },
                "livemode": {
                    "type": "boolean"
                },
                "metadata": {
                    "$ref": "#/definitions/core.JSONB"
                },
                "object": {
                    "type": "string"
                },
                "transit_number": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                }
            }
        },
        "methods.PaymentMethodAffirm": {
            "type": "object",
            "properties": {
                "created_at": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "livemode": {
                    "type": "boolean"
                },
                "metadata": {
                    "$ref": "#/definitions/core.JSONB"
                },
                "object": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                }
            }
        },
        "methods.PaymentMethodAfterpayClearpay": {
            "type": "object",
            "properties": {
                "created_at": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "livemode": {
                    "type": "boolean"
                },
                "metadata": {
                    "$ref": "#/definitions/core.JSONB"
                },
                "object": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                }
            }
        },
        "methods.PaymentMethodAlipay": {
            "type": "object",
            "properties": {
                "created_at": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "livemode": {
                    "type": "boolean"
                },
                "metadata": {
                    "$ref": "#/definitions/core.JSONB"
                },
                "object": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                }
            }
        },
        "methods.PaymentMethodAuBecsDebit": {
            "type": "object",
            "properties": {
                "bsb_number": {
                    "type": "string"
                },
                "created_at": {
                    "type": "string"
                },
                "fingerprint": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "last4": {
                    "type": "string"
                },
                "livemode": {
                    "type": "boolean"
                },
                "metadata": {
                    "$ref": "#/definitions/core.JSONB"
                },
                "object": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                }
            }
        },
        "methods.PaymentMethodBacsDebit": {
            "type": "object",
            "properties": {
                "created_at": {
                    "type": "string"
                },
                "fingerprint": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "last4": {
                    "type": "string"
                },
                "livemode": {
                    "type": "boolean"
                },
                "metadata": {
                    "$ref": "#/definitions/core.JSONB"
                },
                "object": {
                    "type": "string"
                },
                "sort_code": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                }
            }
        },
        "methods.PaymentMethodBancontact": {
            "type": "object",
            "properties": {
                "created_at": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "livemode": {
                    "type": "boolean"
                },
                "metadata": {
                    "$ref": "#/definitions/core.JSONB"
                },
                "object": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                }
            }
        },
        "methods.PaymentMethodBlik": {
            "type": "object",
            "properties": {
                "created_at": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "livemode": {
                    "type": "boolean"
                },
                "metadata": {
                    "$ref": "#/definitions/core.JSONB"
                },
                "object": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                }
            }
        },
        "methods.PaymentMethodBoleto": {
            "type": "object",
            "properties": {
                "created_at": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "livemode": {
                    "type": "boolean"
                },
                "metadata": {
                    "$ref": "#/definitions/core.JSONB"
                },
                "object": {
                    "type": "string"
                },
                "tax_id": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                }
            }
        },
        "methods.PaymentMethodBtcPay": {
            "type": "object",
            "properties": {
                "created_at": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "livemode": {
                    "type": "boolean"
                },
                "metadata": {
                    "$ref": "#/definitions/core.JSONB"
                },
                "object": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                }
            }
        },
        "methods.PaymentMethodCard": {
            "type": "object",
            "properties": {
                "address_line1_check": {
                    "type": "string"
                },
                "address_postal_code_check": {
                    "type": "string"
                },
                "available_networks": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "brand": {
                    "type": "string"
                },
                "country": {
                    "type": "string"
                },
                "created_at": {
                    "type": "string"
                },
                "cvc_check": {
                    "type": "string"
                },
                "exp_month": {
                    "type": "integer"
                },
                "exp_year": {
                    "type": "integer"
                },
                "fingerprint": {
                    "type": "string"
                },
                "funding": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "last4": {
                    "type": "string"
                },
                "livemode": {
                    "type": "boolean"
                },
                "metadata": {
                    "$ref": "#/definitions/core.JSONB"
                },
                "object": {
                    "type": "string"
                },
                "preferred_network": {
                    "type": "string"
                },
                "three_d_secure_usage_supported": {
                    "type": "boolean"
                },
                "updated_at": {
                    "type": "string"
                },
                "wallet": {
                    "type": "string",
                    "format": "uuid"
                }
            }
        },
        "methods.PaymentMethodCardPresent": {
            "type": "object",
            "properties": {
                "available_networks": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "brand": {
                    "type": "string"
                },
                "cardholder_name": {
                    "type": "string"
                },
                "country": {
                    "type": "string"
                },
                "created_at": {
                    "type": "string"
                },
                "exp_month": {
                    "type": "integer"
                },
                "exp_year": {
                    "type": "integer"
                },
                "fingerprint": {
                    "type": "string"
                },
                "funding": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "last4": {
                    "type": "string"
                },
                "livemode": {
                    "type": "boolean"
                },
                "metadata": {
                    "$ref": "#/definitions/core.JSONB"
                },
                "object": {
                    "type": "string"
                },
                "preferred_network": {
                    "type": "string"
                },
                "read_method": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                }
            }
        },
        "methods.PaymentMethodCustomerBalance": {
            "type": "object",
            "properties": {
                "created_at": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "livemode": {
                    "type": "boolean"
                },
                "metadata": {
                    "$ref": "#/definitions/core.JSONB"
                },
                "object": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                }
            }
        },
        "methods.PaymentMethodEps": {
            "type": "object",
            "properties": {
                "bank": {
                    "type": "string"
                },
                "created_at": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "livemode": {
                    "type": "boolean"
                },
                "metadata": {
                    "$ref": "#/definitions/core.JSONB"
                },
                "object": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                }
            }
        },
        "methods.PaymentMethodFpx": {
            "type": "object",
            "properties": {
                "bank": {
                    "type": "string"
                },
                "created_at": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "livemode": {
                    "type": "boolean"
                },
                "metadata": {
                    "$ref": "#/definitions/core.JSONB"
                },
                "object": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                }
            }
        },
        "methods.PaymentMethodGiropay": {
            "type": "object",
            "properties": {
                "created_at": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "livemode": {
                    "type": "boolean"
                },
                "metadata": {
                    "$ref": "#/definitions/core.JSONB"
                },
                "object": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                }
            }
        },
        "methods.PaymentMethodGrabpay": {
            "type": "object",
            "properties": {
                "created_at": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "livemode": {
                    "type": "boolean"
                },
                "metadata": {
                    "$ref": "#/definitions/core.JSONB"
                },
                "object": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                }
            }
        },
        "methods.PaymentMethodIdeal": {
            "type": "object",
            "properties": {
                "bank": {
                    "type": "string"
                },
                "bic": {
                    "type": "string"
                },
                "created_at": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "livemode": {
                    "type": "boolean"
                },
                "metadata": {
                    "$ref": "#/definitions/core.JSONB"
                },
                "object": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                }
            }
        },
        "methods.PaymentMethodInteracPresent": {
            "type": "object",
            "properties": {
                "available_networks": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "brand": {
                    "type": "string"
                },
                "cardholder_name": {
                    "type": "string"
                },
                "country": {
                    "type": "string"
                },
                "created_at": {
                    "type": "string"
                },
                "exp_month": {
                    "type": "integer"
                },
                "exp_year": {
                    "type": "integer"
                },
                "fingerprint": {
                    "type": "string"
                },
                "funding": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "last4": {
                    "type": "string"
                },
                "livemode": {
                    "type": "boolean"
                },
                "metadata": {
                    "$ref": "#/definitions/core.JSONB"
                },
                "object": {
                    "type": "string"
                },
                "preferred_network": {
                    "type": "string"
                },
                "read_method": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                }
            }
        },
        "methods.PaymentMethodKlarna": {
            "type": "object",
            "properties": {
                "created_at": {
                    "type": "string"
                },
                "day": {
                    "type": "integer"
                },
                "id": {
                    "type": "string"
                },
                "livemode": {
                    "type": "boolean"
                },
                "metadata": {
                    "$ref": "#/definitions/core.JSONB"
                },
                "month": {
                    "type": "integer"
                },
                "object": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                },
                "year": {
                    "type": "integer"
                }
            }
        },
        "methods.PaymentMethodKonbini": {
            "type": "object",
            "properties": {
                "created_at": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "livemode": {
                    "type": "boolean"
                },
                "metadata": {
                    "$ref": "#/definitions/core.JSONB"
                },
                "object": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                }
            }
        },
        "methods.PaymentMethodLink": {
            "type": "object",
            "properties": {
                "created_at": {
                    "type": "string"
                },
                "email": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "livemode": {
                    "type": "boolean"
                },
                "metadata": {
                    "$ref": "#/definitions/core.JSONB"
                },
                "object": {
                    "type": "string"
                },
                "persistent_token": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                }
            }
        },
        "methods.PaymentMethodOxxo": {
            "type": "object",
            "properties": {
                "created_at": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "livemode": {
                    "type": "boolean"
                },
                "metadata": {
                    "$ref": "#/definitions/core.JSONB"
                },
                "object": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                }
            }
        },
        "methods.PaymentMethodP24": {
            "type": "object",
            "properties": {
                "bank": {
                    "type": "string"
                },
                "created_at": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "livemode": {
                    "type": "boolean"
                },
                "metadata": {
                    "$ref": "#/definitions/core.JSONB"
                },
                "object": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                }
            }
        },
        "methods.PaymentMethodPaynow": {
            "type": "object",
            "properties": {
                "created_at": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "livemode": {
                    "type": "boolean"
                },
                "metadata": {
                    "$ref": "#/definitions/core.JSONB"
                },
                "object": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                }
            }
        },
        "methods.PaymentMethodPix": {
            "type": "object",
            "properties": {
                "created_at": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "livemode": {
                    "type": "boolean"
                },
                "metadata": {
                    "$ref": "#/definitions/core.JSONB"
                },
                "object": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                }
            }
        },
        "methods.PaymentMethodPromptpay": {
            "type": "object",
            "properties": {
                "created_at": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "livemode": {
                    "type": "boolean"
                },
                "metadata": {
                    "$ref": "#/definitions/core.JSONB"
                },
                "object": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                }
            }
        },
        "methods.PaymentMethodSepaDebit": {
            "type": "object",
            "properties": {
                "bank_code": {
                    "type": "string"
                },
                "branch_code": {
                    "type": "string"
                },
                "country": {
                    "type": "string"
                },
                "created_at": {
                    "type": "string"
                },
                "fingerprint": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "last4": {
                    "type": "string"
                },
                "livemode": {
                    "type": "boolean"
                },
                "metadata": {
                    "$ref": "#/definitions/core.JSONB"
                },
                "object": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                }
            }
        },
        "methods.PaymentMethodSofort": {
            "type": "object",
            "properties": {
                "country": {
                    "type": "string"
                },
                "created_at": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "livemode": {
                    "type": "boolean"
                },
                "metadata": {
                    "$ref": "#/definitions/core.JSONB"
                },
                "object": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                }
            }
        },
        "methods.PaymentMethodUsBankAccount": {
            "type": "object",
            "properties": {
                "account_holder_type": {
                    "type": "string"
                },
                "account_type": {
                    "type": "string"
                },
                "available_networks": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "bank_name": {
                    "type": "string"
                },
                "created_at": {
                    "type": "string"
                },
                "financial_connections_account": {
                    "type": "string"
                },
                "fingerprint": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "last4": {
                    "type": "string"
                },
                "livemode": {
                    "type": "boolean"
                },
                "metadata": {
                    "$ref": "#/definitions/core.JSONB"
                },
                "object": {
                    "type": "string"
                },
                "preferred_network": {
                    "type": "string"
                },
                "routing_number": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                }
            }
        },
        "methods.PaymentMethodWechatPay": {
            "type": "object",
            "properties": {
                "created_at": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "livemode": {
                    "type": "boolean"
                },
                "metadata": {
                    "$ref": "#/definitions/core.JSONB"
                },
                "object": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                }
            }
        },
        "next.PaymentIntentNextAction": {
            "type": "object",
            "properties": {
                "alipay_handle_redirect": {
                    "$ref": "#/definitions/next.PaymentIntentNextActionAlipayHandleRedirect"
                },
                "boleto_display_details": {
                    "$ref": "#/definitions/next.PaymentIntentNextActionBoleto"
                },
                "card_await_notification": {
                    "$ref": "#/definitions/next.PaymentIntentNextActionCardAwaitNotification"
                },
                "created_at": {
                    "type": "string"
                },
                "display_bank_transfer_instructions": {
                    "$ref": "#/definitions/next.PaymentIntentNextActionDisplayBankTransferInstructions"
                },
                "id": {
                    "type": "string"
                },
                "konbini_display_details": {
                    "$ref": "#/definitions/next.PaymentIntentNextActionKonbini"
                },
                "livemode": {
                    "type": "boolean"
                },
                "metadata": {
                    "$ref": "#/definitions/core.JSONB"
                },
                "object": {
                    "type": "string"
                },
                "oxxo_display_details": {
                    "$ref": "#/definitions/next.PaymentIntentNextActionDisplayOxxoDetails"
                },
                "paynow_display_qr_code": {
                    "$ref": "#/definitions/next.PaymentIntentNextActionPaynowDisplayQrCode"
                },
                "pix_display_qr_code": {
                    "$ref": "#/definitions/next.PaymentIntentNextActionPixDisplayQrCode"
                },
                "promptpay_display_qr_code": {
                    "$ref": "#/definitions/next.PaymentIntentNextActionPromptpayDisplayQrCode"
                },
                "redirect_to_url": {
                    "$ref": "#/definitions/next.PaymentIntentNextActionRedirectToUrl"
                },
                "type": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                },
                "use_stripe_sdk": {
                    "$ref": "#/definitions/core.JSONB"
                },
                "verify_with_microdeposits": {
                    "$ref": "#/definitions/next.PaymentIntentNextActionVerifyWithMicrodeposits"
                },
                "wechat_pay_display_qr_code": {
                    "$ref": "#/definitions/next.PaymentIntentNextActionWechatPayDisplayQrCode"
                },
                "wechat_pay_redirect_to_android_app": {
                    "$ref": "#/definitions/next.PaymentIntentNextActionWechatPayRedirectToAndroidApp"
                },
                "wechat_pay_redirect_to_ios_app": {
                    "$ref": "#/definitions/next.PaymentIntentNextActionWechatPayRedirectToIosApp"
                }
            }
        },
        "next.PaymentIntentNextActionAlipayHandleRedirect": {
            "type": "object",
            "properties": {
                "created_at": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "livemode": {
                    "type": "boolean"
                },
                "metadata": {
                    "$ref": "#/definitions/core.JSONB"
                },
                "native_data": {
                    "description": "The native data to be used with Alipay SDK you must redirect your customer to in order to authenticate the payment in an Android App.",
                    "type": "string"
                },
                "native_url": {
                    "description": "The native URL you must redirect your customer to in order to authenticate the payment in an iOS App.",
                    "type": "string"
                },
                "object": {
                    "type": "string"
                },
                "return_url": {
                    "description": "If the customer does not exit their browser while authenticating, they will be redirected to this specified URL after completion.",
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                },
                "url": {
                    "description": "The URL you must redirect your customer to in order to authenticate the payment.",
                    "type": "string"
                }
            }
        },
        "next.PaymentIntentNextActionBoleto": {
            "type": "object",
            "properties": {
                "created_at": {
                    "type": "string"
                },
                "expires_at": {
                    "description": "The timestamp after which the boleto expires.",
                    "type": "integer"
                },
                "hosted_voucher_url": {
                    "description": "The URL to the hosted boleto voucher page, which allows customers to view the boleto voucher.",
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "livemode": {
                    "type": "boolean"
                },
                "metadata": {
                    "$ref": "#/definitions/core.JSONB"
                },
                "number": {
                    "description": "The boleto number.",
                    "type": "string"
                },
                "object": {
                    "type": "string"
                },
                "pdf": {
                    "description": "The URL to the downloadable boleto voucher PDF.",
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                }
            }
        },
        "next.PaymentIntentNextActionCardAwaitNotification": {
            "type": "object",
            "properties": {
                "charge_attempt_at": {
                    "description": "The time that payment will be attempted. If customer approval is required, they need to provide approval before this time.",
                    "type": "integer"
                },
                "created_at": {
                    "type": "string"
                },
                "customer_approval_required": {
                    "description": "For payments greater than INR 15000, the customer must provide explicit approval of the payment with their bank. For payments of lower amount, no customer action is required.",
                    "type": "boolean"
                },
                "id": {
                    "type": "string"
                },
                "livemode": {
                    "type": "boolean"
                },
                "metadata": {
                    "$ref": "#/definitions/core.JSONB"
                },
                "object": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                }
            }
        },
        "next.PaymentIntentNextActionDisplayBankTransferInstructions": {
            "type": "object",
            "properties": {
                "amount_remaining": {
                    "description": "The remaining amount that needs to be transferred to complete the payment.",
                    "type": "integer"
                },
                "created_at": {
                    "type": "string"
                },
                "currency": {
                    "description": "Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).",
                    "type": "string"
                },
                "financial_addresses": {
                    "description": "A list of financial addresses that can be used to fund the customer balance",
                    "type": "array",
                    "items": {
                        "type": "string",
                        "format": "uuid"
                    }
                },
                "hosted_instructions_url": {
                    "description": "A link to a hosted page that guides your customer through completing the transfer.",
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "livemode": {
                    "type": "boolean"
                },
                "metadata": {
                    "$ref": "#/definitions/core.JSONB"
                },
                "object": {
                    "type": "string"
                },
                "reference": {
                    "description": "A string identifying this payment. Instruct your customer to include this code in the reference or memo field of their bank transfer.",
                    "type": "string"
                },
                "type": {
                    "description": "Type of bank transfer",
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                }
            }
        },
        "next.PaymentIntentNextActionDisplayOxxoDetails": {
            "type": "object",
            "properties": {
                "created_at": {
                    "type": "string"
                },
                "expires_after": {
                    "description": "The timestamp after which the OXXO voucher expires.",
                    "type": "integer"
                },
                "hosted_voucher_url": {
                    "description": "The URL for the hosted OXXO voucher page, which allows customers to view and print an OXXO voucher.",
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "livemode": {
                    "type": "boolean"
                },
                "metadata": {
                    "$ref": "#/definitions/core.JSONB"
                },
                "number": {
                    "description": "OXXO reference number.",
                    "type": "string"
                },
                "object": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                }
            }
        },
        "next.PaymentIntentNextActionKonbini": {
            "type": "object",
            "properties": {
                "created_at": {
                    "type": "string"
                },
                "expires_at": {
                    "description": "The timestamp at which the pending Konbini payment expires.",
                    "type": "integer"
                },
                "hosted_voucher_url": {
                    "description": "The URL for the Konbini payment instructions page, which allows customers to view and print a Konbini voucher.",
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "livemode": {
                    "type": "boolean"
                },
                "metadata": {
                    "$ref": "#/definitions/core.JSONB"
                },
                "object": {
                    "type": "string"
                },
                "stores": {
                    "type": "string",
                    "format": "uuid"
                },
                "updated_at": {
                    "type": "string"
                }
            }
        },
        "next.PaymentIntentNextActionPaynowDisplayQrCode": {
            "type": "object",
            "properties": {
                "created_at": {
                    "type": "string"
                },
                "data": {
                    "description": "The raw data string used to generate QR code, it should be used together with QR code library.",
                    "type": "string"
                },
                "hosted_instructions_url": {
                    "description": "The URL to the hosted PayNow instructions page, which allows customers to view the PayNow QR code.",
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "image_url_png": {
                    "description": "The image_url_png string used to render QR code",
                    "type": "string"
                },
                "image_url_svg": {
                    "description": "The image_url_svg string used to render QR code",
                    "type": "string"
                },
                "livemode": {
                    "type": "boolean"
                },
                "metadata": {
                    "$ref": "#/definitions/core.JSONB"
                },
                "object": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                }
            }
        },
        "next.PaymentIntentNextActionPixDisplayQrCode": {
            "type": "object",
            "properties": {
                "created_at": {
                    "type": "string"
                },
                "data": {
                    "description": "The raw data string used to generate QR code, it should be used together with QR code library.",
                    "type": "string"
                },
                "expires_at": {
                    "description": "The date (unix timestamp) when the PIX expires.",
                    "type": "integer"
                },
                "hosted_instructions_url": {
                    "description": "The URL to the hosted pix instructions page, which allows customers to view the pix QR code.",
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "image_url_png": {
                    "description": "The image_url_png string used to render png QR code",
                    "type": "string"
                },
                "image_url_svg": {
                    "description": "The image_url_svg string used to render svg QR code",
                    "type": "string"
                },
                "livemode": {
                    "type": "boolean"
                },
                "metadata": {
                    "$ref": "#/definitions/core.JSONB"
                },
                "object": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                }
            }
        },
        "next.PaymentIntentNextActionPromptpayDisplayQrCode": {
            "type": "object",
            "properties": {
                "created_at": {
                    "type": "string"
                },
                "data": {
                    "description": "The raw data string used to generate QR code, it should be used together with QR code library.",
                    "type": "string"
                },
                "hosted_instructions_url": {
                    "description": "The URL to the hosted PromptPay instructions page, which allows customers to view the PromptPay QR code.",
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "image_url_png": {
                    "description": "The PNG path used to render the QR code, can be used as the source in an HTML img tag",
                    "type": "string"
                },
                "image_url_svg": {
                    "description": "The SVG path used to render the QR code, can be used as the source in an HTML img tag",
                    "type": "string"
                },
                "livemode": {
                    "type": "boolean"
                },
                "metadata": {
                    "$ref": "#/definitions/core.JSONB"
                },
                "object": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                }
            }
        },
        "next.PaymentIntentNextActionRedirectToUrl": {
            "type": "object",
            "properties": {
                "created_at": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "livemode": {
                    "type": "boolean"
                },
                "metadata": {
                    "$ref": "#/definitions/core.JSONB"
                },
                "object": {
                    "type": "string"
                },
                "return_url": {
                    "description": "If the customer does not exit their browser while authenticating, they will be redirected to this specified URL after completion.",
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                },
                "url": {
                    "description": "The URL you must redirect your customer to in order to authenticate the payment.",
                    "type": "string"
                }
            }
        },
        "next.PaymentIntentNextActionVerifyWithMicrodeposits": {
            "type": "object",
            "properties": {
                "arrival_date": {
                    "description": "The timestamp when the microdeposits are expected to land.",
                    "type": "integer"
                },
                "created_at": {
                    "type": "string"
                },
                "hosted_verification_url": {
                    "description": "The URL for the hosted verification page, which allows customers to verify their bank account.",
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "livemode": {
                    "type": "boolean"
                },
                "metadata": {
                    "$ref": "#/definitions/core.JSONB"
                },
                "microdeposit_type": {
                    "description": "The type of the microdeposit sent to the customer. Used to distinguish between different verification methods.",
                    "type": "string"
                },
                "object": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                }
            }
        },
        "next.PaymentIntentNextActionWechatPayDisplayQrCode": {
            "type": "object",
            "properties": {
                "created_at": {
                    "type": "string"
                },
                "data": {
                    "description": "The data being used to generate QR code",
                    "type": "string"
                },
                "hosted_instructions_url": {
                    "description": "The URL to the hosted WeChat Pay instructions page, which allows customers to view the WeChat Pay QR code.",
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "image_data_url": {
                    "description": "The base64 image data for a pre-generated QR code",
                    "type": "string"
                },
                "image_url_png": {
                    "description": "The image_url_png string used to render QR code",
                    "type": "string"
                },
                "image_url_svg": {
                    "description": "The image_url_svg string used to render QR code",
                    "type": "string"
                },
                "livemode": {
                    "type": "boolean"
                },
                "metadata": {
                    "$ref": "#/definitions/core.JSONB"
                },
                "object": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                }
            }
        },
        "next.PaymentIntentNextActionWechatPayRedirectToAndroidApp": {
            "type": "object",
            "properties": {
                "app_id": {
                    "description": "app_id is the APP ID registered on WeChat open platform",
                    "type": "string"
                },
                "created_at": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "livemode": {
                    "type": "boolean"
                },
                "metadata": {
                    "$ref": "#/definitions/core.JSONB"
                },
                "nonce_str": {
                    "description": "nonce_str is a random string",
                    "type": "string"
                },
                "object": {
                    "type": "string"
                },
                "package": {
                    "description": "package is static value",
                    "type": "string"
                },
                "partner_id": {
                    "description": "an unique merchant ID assigned by WeChat Pay",
                    "type": "string"
                },
                "prepay_id": {
                    "description": "an unique trading ID assigned by WeChat Pay",
                    "type": "string"
                },
                "sign": {
                    "description": "A signature",
                    "type": "string"
                },
                "timestamp": {
                    "description": "Specifies the current time in epoch format",
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                }
            }
        },
        "next.PaymentIntentNextActionWechatPayRedirectToIosApp": {
            "type": "object",
            "properties": {
                "created_at": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "livemode": {
                    "type": "boolean"
                },
                "metadata": {
                    "$ref": "#/definitions/core.JSONB"
                },
                "native_url": {
                    "description": "An universal link that redirect to WeChat Pay app",
                    "type": "string"
                },
                "object": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                }
            }
        },
        "options.CheckoutAcssDebitPaymentMethodOptions": {
            "type": "object",
            "properties": {
                "created_at": {
                    "type": "string"
                },
                "currency": {
                    "description": "Currency supported by the bank account. Returned when the Session is in `setup` mode.",
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "livemode": {
                    "type": "boolean"
                },
                "mandate_options": {
                    "type": "string",
                    "format": "uuid"
                },
                "metadata": {
                    "$ref": "#/definitions/core.JSONB"
                },
                "object": {
                    "type": "string"
                },
                "setup_future_usage": {
                    "description": "Indicates that you intend to make future payments with this PaymentIntent's payment method.  Providing this parameter will [attach the payment method](https://stripe.com/docs/payments/save-during-payment) to the PaymentIntent's Customer, if present, after the PaymentIntent is confirmed and any required actions from the user are complete. If no Customer was provided, the payment method can still be [attached](https://stripe.com/docs/api/payment_methods/attach) to a Customer after the transaction completes.  When processing card payments, Stripe also uses `setup_future_usage` to dynamically optimize your payment flow and comply with regional legislation and network rules, such as [SCA](https://stripe.com/docs/strong-customer-authentication).",
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                },
                "verification_method": {
                    "description": "Bank account verification method.",
                    "type": "string"
                }
            }
        },
        "options.CheckoutAffirmPaymentMethodOptions": {
            "type": "object",
            "properties": {
                "created_at": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "livemode": {
                    "type": "boolean"
                },
                "metadata": {
                    "$ref": "#/definitions/core.JSONB"
                },
                "object": {
                    "type": "string"
                },
                "setup_future_usage": {
                    "description": "Indicates that you intend to make future payments with this PaymentIntent's payment method.  Providing this parameter will [attach the payment method](https://stripe.com/docs/payments/save-during-payment) to the PaymentIntent's Customer, if present, after the PaymentIntent is confirmed and any required actions from the user are complete. If no Customer was provided, the payment method can still be [attached](https://stripe.com/docs/api/payment_methods/attach) to a Customer after the transaction completes.  When processing card payments, Stripe also uses `setup_future_usage` to dynamically optimize your payment flow and comply with regional legislation and network rules, such as [SCA](https://stripe.com/docs/strong-customer-authentication).",
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                }
            }
        },
        "options.CheckoutAfterpayClearpayPaymentMethodOptions": {
            "type": "object",
            "properties": {
                "created_at": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "livemode": {
                    "type": "boolean"
                },
                "metadata": {
                    "$ref": "#/definitions/core.JSONB"
                },
                "object": {
                    "type": "string"
                },
                "setup_future_usage": {
                    "description": "Indicates that you intend to make future payments with this PaymentIntent's payment method.  Providing this parameter will [attach the payment method](https://stripe.com/docs/payments/save-during-payment) to the PaymentIntent's Customer, if present, after the PaymentIntent is confirmed and any required actions from the user are complete. If no Customer was provided, the payment method can still be [attached](https://stripe.com/docs/api/payment_methods/attach) to a Customer after the transaction completes.  When processing card payments, Stripe also uses `setup_future_usage` to dynamically optimize your payment flow and comply with regional legislation and network rules, such as [SCA](https://stripe.com/docs/strong-customer-authentication).",
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                }
            }
        },
        "options.CheckoutAlipayPaymentMethodOptions": {
            "type": "object",
            "properties": {
                "created_at": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "livemode": {
                    "type": "boolean"
                },
                "metadata": {
                    "$ref": "#/definitions/core.JSONB"
                },
                "object": {
                    "type": "string"
                },
                "setup_future_usage": {
                    "description": "Indicates that you intend to make future payments with this PaymentIntent's payment method.  Providing this parameter will [attach the payment method](https://stripe.com/docs/payments/save-during-payment) to the PaymentIntent's Customer, if present, after the PaymentIntent is confirmed and any required actions from the user are complete. If no Customer was provided, the payment method can still be [attached](https://stripe.com/docs/api/payment_methods/attach) to a Customer after the transaction completes.  When processing card payments, Stripe also uses `setup_future_usage` to dynamically optimize your payment flow and comply with regional legislation and network rules, such as [SCA](https://stripe.com/docs/strong-customer-authentication).",
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                }
            }
        },
        "options.CheckoutAuBecsDebitPaymentMethodOptions": {
            "type": "object",
            "properties": {
                "created_at": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "livemode": {
                    "type": "boolean"
                },
                "metadata": {
                    "$ref": "#/definitions/core.JSONB"
                },
                "object": {
                    "type": "string"
                },
                "setup_future_usage": {
                    "description": "Indicates that you intend to make future payments with this PaymentIntent's payment method.  Providing this parameter will [attach the payment method](https://stripe.com/docs/payments/save-during-payment) to the PaymentIntent's Customer, if present, after the PaymentIntent is confirmed and any required actions from the user are complete. If no Customer was provided, the payment method can still be [attached](https://stripe.com/docs/api/payment_methods/attach) to a Customer after the transaction completes.  When processing card payments, Stripe also uses `setup_future_usage` to dynamically optimize your payment flow and comply with regional legislation and network rules, such as [SCA](https://stripe.com/docs/strong-customer-authentication).",
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                }
            }
        },
        "options.CheckoutBacsDebitPaymentMethodOptions": {
            "type": "object",
            "properties": {
                "created_at": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "livemode": {
                    "type": "boolean"
                },
                "metadata": {
                    "$ref": "#/definitions/core.JSONB"
                },
                "object": {
                    "type": "string"
                },
                "setup_future_usage": {
                    "description": "Indicates that you intend to make future payments with this PaymentIntent's payment method.  Providing this parameter will [attach the payment method](https://stripe.com/docs/payments/save-during-payment) to the PaymentIntent's Customer, if present, after the PaymentIntent is confirmed and any required actions from the user are complete. If no Customer was provided, the payment method can still be [attached](https://stripe.com/docs/api/payment_methods/attach) to a Customer after the transaction completes.  When processing card payments, Stripe also uses `setup_future_usage` to dynamically optimize your payment flow and comply with regional legislation and network rules, such as [SCA](https://stripe.com/docs/strong-customer-authentication).",
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                }
            }
        },
        "options.CheckoutBancontactPaymentMethodOptions": {
            "type": "object",
            "properties": {
                "created_at": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "livemode": {
                    "type": "boolean"
                },
                "metadata": {
                    "$ref": "#/definitions/core.JSONB"
                },
                "object": {
                    "type": "string"
                },
                "setup_future_usage": {
                    "description": "Indicates that you intend to make future payments with this PaymentIntent's payment method.  Providing this parameter will [attach the payment method](https://stripe.com/docs/payments/save-during-payment) to the PaymentIntent's Customer, if present, after the PaymentIntent is confirmed and any required actions from the user are complete. If no Customer was provided, the payment method can still be [attached](https://stripe.com/docs/api/payment_methods/attach) to a Customer after the transaction completes.  When processing card payments, Stripe also uses `setup_future_usage` to dynamically optimize your payment flow and comply with regional legislation and network rules, such as [SCA](https://stripe.com/docs/strong-customer-authentication).",
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                }
            }
        },
        "options.CheckoutBoletoPaymentMethodOptions": {
            "type": "object",
            "properties": {
                "created_at": {
                    "type": "string"
                },
                "expires_after_days": {
                    "description": "The number of calendar days before a Boleto voucher expires. For example, if you create a Boleto voucher on Monday and you set expires_after_days to 2, the Boleto voucher will expire on Wednesday at 23:59 America/Sao_Paulo time.",
                    "type": "integer"
                },
                "id": {
                    "type": "string"
                },
                "livemode": {
                    "type": "boolean"
                },
                "metadata": {
                    "$ref": "#/definitions/core.JSONB"
                },
                "object": {
                    "type": "string"
                },
                "setup_future_usage": {
                    "description": "Indicates that you intend to make future payments with this PaymentIntent's payment method.  Providing this parameter will [attach the payment method](https://stripe.com/docs/payments/save-during-payment) to the PaymentIntent's Customer, if present, after the PaymentIntent is confirmed and any required actions from the user are complete. If no Customer was provided, the payment method can still be [attached](https://stripe.com/docs/api/payment_methods/attach) to a Customer after the transaction completes.  When processing card payments, Stripe also uses `setup_future_usage` to dynamically optimize your payment flow and comply with regional legislation and network rules, such as [SCA](https://stripe.com/docs/strong-customer-authentication).",
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                }
            }
        },
        "options.CheckoutCardPaymentMethodOptions": {
            "type": "object",
            "properties": {
                "created_at": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "installments": {
                    "type": "string",
                    "format": "uuid"
                },
                "livemode": {
                    "type": "boolean"
                },
                "metadata": {
                    "$ref": "#/definitions/core.JSONB"
                },
                "object": {
                    "type": "string"
                },
                "setup_future_usage": {
                    "description": "Indicates that you intend to make future payments with this PaymentIntent's payment method.  Providing this parameter will [attach the payment method](https://stripe.com/docs/payments/save-during-payment) to the PaymentIntent's Customer, if present, after the PaymentIntent is confirmed and any required actions from the user are complete. If no Customer was provided, the payment method can still be [attached](https://stripe.com/docs/api/payment_methods/attach) to a Customer after the transaction completes.  When processing card payments, Stripe also uses `setup_future_usage` to dynamically optimize your payment flow and comply with regional legislation and network rules, such as [SCA](https://stripe.com/docs/strong-customer-authentication).",
                    "type": "string"
                },
                "statement_descriptor_suffix_kana": {
                    "description": "Provides information about a card payment that customers see on their statements. Concatenated with the Kana prefix (shortened Kana descriptor) or Kana statement descriptor that’s set on the account to form the complete statement descriptor. Maximum 22 characters. On card statements, the *concatenation* of both prefix and suffix (including separators) will appear truncated to 22 characters.",
                    "type": "string"
                },
                "statement_descriptor_suffix_kanji": {
                    "description": "Provides information about a card payment that customers see on their statements. Concatenated with the Kanji prefix (shortened Kanji descriptor) or Kanji statement descriptor that’s set on the account to form the complete statement descriptor. Maximum 17 characters. On card statements, the *concatenation* of both prefix and suffix (including separators) will appear truncated to 17 characters.",
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                }
            }
        },
        "options.CheckoutCustomerBalancePaymentMethodOptions": {
            "type": "object",
            "properties": {
                "bank_transfer": {
                    "type": "string",
                    "format": "uuid"
                },
                "created_at": {
                    "type": "string"
                },
                "funding_type": {
                    "description": "The funding method type to be used when there are not enough funds in the customer balance. Permitted values include: `bank_transfer`.",
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "livemode": {
                    "type": "boolean"
                },
                "metadata": {
                    "$ref": "#/definitions/core.JSONB"
                },
                "object": {
                    "type": "string"
                },
                "setup_future_usage": {
                    "description": "Indicates that you intend to make future payments with this PaymentIntent's payment method.  Providing this parameter will [attach the payment method](https://stripe.com/docs/payments/save-during-payment) to the PaymentIntent's Customer, if present, after the PaymentIntent is confirmed and any required actions from the user are complete. If no Customer was provided, the payment method can still be [attached](https://stripe.com/docs/api/payment_methods/attach) to a Customer after the transaction completes.  When processing card payments, Stripe also uses `setup_future_usage` to dynamically optimize your payment flow and comply with regional legislation and network rules, such as [SCA](https://stripe.com/docs/strong-customer-authentication).",
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                }
            }
        },
        "options.CheckoutEpsPaymentMethodOptions": {
            "type": "object",
            "properties": {
                "created_at": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "livemode": {
                    "type": "boolean"
                },
                "metadata": {
                    "$ref": "#/definitions/core.JSONB"
                },
                "object": {
                    "type": "string"
                },
                "setup_future_usage": {
                    "description": "Indicates that you intend to make future payments with this PaymentIntent's payment method.  Providing this parameter will [attach the payment method](https://stripe.com/docs/payments/save-during-payment) to the PaymentIntent's Customer, if present, after the PaymentIntent is confirmed and any required actions from the user are complete. If no Customer was provided, the payment method can still be [attached](https://stripe.com/docs/api/payment_methods/attach) to a Customer after the transaction completes.  When processing card payments, Stripe also uses `setup_future_usage` to dynamically optimize your payment flow and comply with regional legislation and network rules, such as [SCA](https://stripe.com/docs/strong-customer-authentication).",
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                }
            }
        },
        "options.CheckoutFpxPaymentMethodOptions": {
            "type": "object",
            "properties": {
                "created_at": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "livemode": {
                    "type": "boolean"
                },
                "metadata": {
                    "$ref": "#/definitions/core.JSONB"
                },
                "object": {
                    "type": "string"
                },
                "setup_future_usage": {
                    "description": "Indicates that you intend to make future payments with this PaymentIntent's payment method.  Providing this parameter will [attach the payment method](https://stripe.com/docs/payments/save-during-payment) to the PaymentIntent's Customer, if present, after the PaymentIntent is confirmed and any required actions from the user are complete. If no Customer was provided, the payment method can still be [attached](https://stripe.com/docs/api/payment_methods/attach) to a Customer after the transaction completes.  When processing card payments, Stripe also uses `setup_future_usage` to dynamically optimize your payment flow and comply with regional legislation and network rules, such as [SCA](https://stripe.com/docs/strong-customer-authentication).",
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                }
            }
        },
        "options.CheckoutGiropayPaymentMethodOptions": {
            "type": "object",
            "properties": {
                "created_at": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "livemode": {
                    "type": "boolean"
                },
                "metadata": {
                    "$ref": "#/definitions/core.JSONB"
                },
                "object": {
                    "type": "string"
                },
                "setup_future_usage": {
                    "description": "Indicates that you intend to make future payments with this PaymentIntent's payment method.  Providing this parameter will [attach the payment method](https://stripe.com/docs/payments/save-during-payment) to the PaymentIntent's Customer, if present, after the PaymentIntent is confirmed and any required actions from the user are complete. If no Customer was provided, the payment method can still be [attached](https://stripe.com/docs/api/payment_methods/attach) to a Customer after the transaction completes.  When processing card payments, Stripe also uses `setup_future_usage` to dynamically optimize your payment flow and comply with regional legislation and network rules, such as [SCA](https://stripe.com/docs/strong-customer-authentication).",
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                }
            }
        },
        "options.CheckoutGrabPayPaymentMethodOptions": {
            "type": "object",
            "properties": {
                "created_at": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "livemode": {
                    "type": "boolean"
                },
                "metadata": {
                    "$ref": "#/definitions/core.JSONB"
                },
                "object": {
                    "type": "string"
                },
                "setup_future_usage": {
                    "description": "Indicates that you intend to make future payments with this PaymentIntent's payment method.  Providing this parameter will [attach the payment method](https://stripe.com/docs/payments/save-during-payment) to the PaymentIntent's Customer, if present, after the PaymentIntent is confirmed and any required actions from the user are complete. If no Customer was provided, the payment method can still be [attached](https://stripe.com/docs/api/payment_methods/attach) to a Customer after the transaction completes.  When processing card payments, Stripe also uses `setup_future_usage` to dynamically optimize your payment flow and comply with regional legislation and network rules, such as [SCA](https://stripe.com/docs/strong-customer-authentication).",
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                }
            }
        },
        "options.CheckoutIdealPaymentMethodOptions": {
            "type": "object",
            "properties": {
                "created_at": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "livemode": {
                    "type": "boolean"
                },
                "metadata": {
                    "$ref": "#/definitions/core.JSONB"
                },
                "object": {
                    "type": "string"
                },
                "setup_future_usage": {
                    "description": "Indicates that you intend to make future payments with this PaymentIntent's payment method.  Providing this parameter will [attach the payment method](https://stripe.com/docs/payments/save-during-payment) to the PaymentIntent's Customer, if present, after the PaymentIntent is confirmed and any required actions from the user are complete. If no Customer was provided, the payment method can still be [attached](https://stripe.com/docs/api/payment_methods/attach) to a Customer after the transaction completes.  When processing card payments, Stripe also uses `setup_future_usage` to dynamically optimize your payment flow and comply with regional legislation and network rules, such as [SCA](https://stripe.com/docs/strong-customer-authentication).",
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                }
            }
        },
        "options.CheckoutKlarnaPaymentMethodOptions": {
            "type": "object",
            "properties": {
                "created_at": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "livemode": {
                    "type": "boolean"
                },
                "metadata": {
                    "$ref": "#/definitions/core.JSONB"
                },
                "object": {
                    "type": "string"
                },
                "setup_future_usage": {
                    "description": "Indicates that you intend to make future payments with this PaymentIntent's payment method.  Providing this parameter will [attach the payment method](https://stripe.com/docs/payments/save-during-payment) to the PaymentIntent's Customer, if present, after the PaymentIntent is confirmed and any required actions from the user are complete. If no Customer was provided, the payment method can still be [attached](https://stripe.com/docs/api/payment_methods/attach) to a Customer after the transaction completes.  When processing card payments, Stripe also uses `setup_future_usage` to dynamically optimize your payment flow and comply with regional legislation and network rules, such as [SCA](https://stripe.com/docs/strong-customer-authentication).",
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                }
            }
        },
        "options.CheckoutKonbiniPaymentMethodOptions": {
            "type": "object",
            "properties": {
                "created_at": {
                    "type": "string"
                },
                "expires_after_days": {
                    "description": "The number of calendar days (between 1 and 60) after which Konbini payment instructions will expire. For example, if a PaymentIntent is confirmed with Konbini and `expires_after_days` set to 2 on Monday JST, the instructions will expire on Wednesday 23:59:59 JST.",
                    "type": "integer"
                },
                "id": {
                    "type": "string"
                },
                "livemode": {
                    "type": "boolean"
                },
                "metadata": {
                    "$ref": "#/definitions/core.JSONB"
                },
                "object": {
                    "type": "string"
                },
                "setup_future_usage": {
                    "description": "Indicates that you intend to make future payments with this PaymentIntent's payment method.  Providing this parameter will [attach the payment method](https://stripe.com/docs/payments/save-during-payment) to the PaymentIntent's Customer, if present, after the PaymentIntent is confirmed and any required actions from the user are complete. If no Customer was provided, the payment method can still be [attached](https://stripe.com/docs/api/payment_methods/attach) to a Customer after the transaction completes.  When processing card payments, Stripe also uses `setup_future_usage` to dynamically optimize your payment flow and comply with regional legislation and network rules, such as [SCA](https://stripe.com/docs/strong-customer-authentication).",
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                }
            }
        },
        "options.CheckoutOxxoPaymentMethodOptions": {
            "type": "object",
            "properties": {
                "created_at": {
                    "type": "string"
                },
                "expires_after_days": {
                    "description": "The number of calendar days before an OXXO invoice expires. For example, if you create an OXXO invoice on Monday and you set expires_after_days to 2, the OXXO invoice will expire on Wednesday at 23:59 America/Mexico_City time.",
                    "type": "integer"
                },
                "id": {
                    "type": "string"
                },
                "livemode": {
                    "type": "boolean"
                },
                "metadata": {
                    "$ref": "#/definitions/core.JSONB"
                },
                "object": {
                    "type": "string"
                },
                "setup_future_usage": {
                    "description": "Indicates that you intend to make future payments with this PaymentIntent's payment method.  Providing this parameter will [attach the payment method](https://stripe.com/docs/payments/save-during-payment) to the PaymentIntent's Customer, if present, after the PaymentIntent is confirmed and any required actions from the user are complete. If no Customer was provided, the payment method can still be [attached](https://stripe.com/docs/api/payment_methods/attach) to a Customer after the transaction completes.  When processing card payments, Stripe also uses `setup_future_usage` to dynamically optimize your payment flow and comply with regional legislation and network rules, such as [SCA](https://stripe.com/docs/strong-customer-authentication).",
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                }
            }
        },
        "options.CheckoutP24PaymentMethodOptions": {
            "type": "object",
            "properties": {
                "created_at": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "livemode": {
                    "type": "boolean"
                },
                "metadata": {
                    "$ref": "#/definitions/core.JSONB"
                },
                "object": {
                    "type": "string"
                },
                "setup_future_usage": {
                    "description": "Indicates that you intend to make future payments with this PaymentIntent's payment method.  Providing this parameter will [attach the payment method](https://stripe.com/docs/payments/save-during-payment) to the PaymentIntent's Customer, if present, after the PaymentIntent is confirmed and any required actions from the user are complete. If no Customer was provided, the payment method can still be [attached](https://stripe.com/docs/api/payment_methods/attach) to a Customer after the transaction completes.  When processing card payments, Stripe also uses `setup_future_usage` to dynamically optimize your payment flow and comply with regional legislation and network rules, such as [SCA](https://stripe.com/docs/strong-customer-authentication).",
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                }
            }
        },
        "options.CheckoutPaynowPaymentMethodOptions": {
            "type": "object",
            "properties": {
                "created_at": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "livemode": {
                    "type": "boolean"
                },
                "metadata": {
                    "$ref": "#/definitions/core.JSONB"
                },
                "object": {
                    "type": "string"
                },
                "setup_future_usage": {
                    "description": "Indicates that you intend to make future payments with this PaymentIntent's payment method.  Providing this parameter will [attach the payment method](https://stripe.com/docs/payments/save-during-payment) to the PaymentIntent's Customer, if present, after the PaymentIntent is confirmed and any required actions from the user are complete. If no Customer was provided, the payment method can still be [attached](https://stripe.com/docs/api/payment_methods/attach) to a Customer after the transaction completes.  When processing card payments, Stripe also uses `setup_future_usage` to dynamically optimize your payment flow and comply with regional legislation and network rules, such as [SCA](https://stripe.com/docs/strong-customer-authentication).",
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                }
            }
        },
        "options.CheckoutPixPaymentMethodOptions": {
            "type": "object",
            "properties": {
                "created_at": {
                    "type": "string"
                },
                "expires_after_seconds": {
                    "description": "The number of seconds after which Pix payment will expire.",
                    "type": "integer"
                },
                "id": {
                    "type": "string"
                },
                "livemode": {
                    "type": "boolean"
                },
                "metadata": {
                    "$ref": "#/definitions/core.JSONB"
                },
                "object": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                }
            }
        },
        "options.CheckoutSepaDebitPaymentMethodOptions": {
            "type": "object",
            "properties": {
                "created_at": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "livemode": {
                    "type": "boolean"
                },
                "metadata": {
                    "$ref": "#/definitions/core.JSONB"
                },
                "object": {
                    "type": "string"
                },
                "setup_future_usage": {
                    "description": "Indicates that you intend to make future payments with this PaymentIntent's payment method.  Providing this parameter will [attach the payment method](https://stripe.com/docs/payments/save-during-payment) to the PaymentIntent's Customer, if present, after the PaymentIntent is confirmed and any required actions from the user are complete. If no Customer was provided, the payment method can still be [attached](https://stripe.com/docs/api/payment_methods/attach) to a Customer after the transaction completes.  When processing card payments, Stripe also uses `setup_future_usage` to dynamically optimize your payment flow and comply with regional legislation and network rules, such as [SCA](https://stripe.com/docs/strong-customer-authentication).",
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                }
            }
        },
        "options.CheckoutSessionPaymentMethodOptions": {
            "type": "object",
            "properties": {
                "acss_debit": {
                    "$ref": "#/definitions/options.CheckoutAcssDebitPaymentMethodOptions"
                },
                "affirm": {
                    "$ref": "#/definitions/options.CheckoutAffirmPaymentMethodOptions"
                },
                "afterpay_clearpay": {
                    "$ref": "#/definitions/options.CheckoutAfterpayClearpayPaymentMethodOptions"
                },
                "alipay": {
                    "$ref": "#/definitions/options.CheckoutAlipayPaymentMethodOptions"
                },
                "au_becs_debit": {
                    "$ref": "#/definitions/options.CheckoutAuBecsDebitPaymentMethodOptions"
                },
                "bacs_debit": {
                    "$ref": "#/definitions/options.CheckoutBacsDebitPaymentMethodOptions"
                },
                "bancontact": {
                    "$ref": "#/definitions/options.CheckoutBancontactPaymentMethodOptions"
                },
                "boleto": {
                    "$ref": "#/definitions/options.CheckoutBoletoPaymentMethodOptions"
                },
                "card": {
                    "$ref": "#/definitions/options.CheckoutCardPaymentMethodOptions"
                },
                "created_at": {
                    "type": "string"
                },
                "customer_balance": {
                    "$ref": "#/definitions/options.CheckoutCustomerBalancePaymentMethodOptions"
                },
                "eps": {
                    "$ref": "#/definitions/options.CheckoutEpsPaymentMethodOptions"
                },
                "fpx": {
                    "$ref": "#/definitions/options.CheckoutFpxPaymentMethodOptions"
                },
                "giropay": {
                    "$ref": "#/definitions/options.CheckoutGiropayPaymentMethodOptions"
                },
                "grabpay": {
                    "$ref": "#/definitions/options.CheckoutGrabPayPaymentMethodOptions"
                },
                "id": {
                    "type": "string"
                },
                "ideal": {
                    "$ref": "#/definitions/options.CheckoutIdealPaymentMethodOptions"
                },
                "klarna": {
                    "$ref": "#/definitions/options.CheckoutKlarnaPaymentMethodOptions"
                },
                "konbini": {
                    "$ref": "#/definitions/options.CheckoutKonbiniPaymentMethodOptions"
                },
                "livemode": {
                    "type": "boolean"
                },
                "metadata": {
                    "$ref": "#/definitions/core.JSONB"
                },
                "object": {
                    "type": "string"
                },
                "oxxo": {
                    "$ref": "#/definitions/options.CheckoutOxxoPaymentMethodOptions"
                },
                "p24": {
                    "$ref": "#/definitions/options.CheckoutP24PaymentMethodOptions"
                },
                "paynow": {
                    "$ref": "#/definitions/options.CheckoutPaynowPaymentMethodOptions"
                },
                "pix": {
                    "$ref": "#/definitions/options.CheckoutPixPaymentMethodOptions"
                },
                "sepa_debit": {
                    "$ref": "#/definitions/options.CheckoutSepaDebitPaymentMethodOptions"
                },
                "sofort": {
                    "$ref": "#/definitions/options.CheckoutSofortPaymentMethodOptions"
                },
                "updated_at": {
                    "type": "string"
                },
                "us_bank_account": {
                    "$ref": "#/definitions/options.CheckoutUsBankAccountPaymentMethodOptions"
                }
            }
        },
        "options.CheckoutSofortPaymentMethodOptions": {
            "type": "object",
            "properties": {
                "created_at": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "livemode": {
                    "type": "boolean"
                },
                "metadata": {
                    "$ref": "#/definitions/core.JSONB"
                },
                "object": {
                    "type": "string"
                },
                "setup_future_usage": {
                    "description": "Indicates that you intend to make future payments with this PaymentIntent's payment method.  Providing this parameter will [attach the payment method](https://stripe.com/docs/payments/save-during-payment) to the PaymentIntent's Customer, if present, after the PaymentIntent is confirmed and any required actions from the user are complete. If no Customer was provided, the payment method can still be [attached](https://stripe.com/docs/api/payment_methods/attach) to a Customer after the transaction completes.  When processing card payments, Stripe also uses `setup_future_usage` to dynamically optimize your payment flow and comply with regional legislation and network rules, such as [SCA](https://stripe.com/docs/strong-customer-authentication).",
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                }
            }
        },
        "options.CheckoutUsBankAccountPaymentMethodOptions": {
            "type": "object",
            "properties": {
                "created_at": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "livemode": {
                    "type": "boolean"
                },
                "metadata": {
                    "$ref": "#/definitions/core.JSONB"
                },
                "object": {
                    "type": "string"
                },
                "permissions": {
                    "description": "The list of permissions to request. The `payment_method` permission must be included.",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "return_url": {
                    "description": "For webview integrations only. Upon completing OAuth login in the native browser, the user will be redirected to this URL to return to your app.",
                    "type": "string"
                },
                "setup_future_usage": {
                    "description": "Indicates that you intend to make future payments with this PaymentIntent's payment method.  Providing this parameter will [attach the payment method](https://stripe.com/docs/payments/save-during-payment) to the PaymentIntent's Customer, if present, after the PaymentIntent is confirmed and any required actions from the user are complete. If no Customer was provided, the payment method can still be [attached](https://stripe.com/docs/api/payment_methods/attach) to a Customer after the transaction completes.  When processing card payments, Stripe also uses `setup_future_usage` to dynamically optimize your payment flow and comply with regional legislation and network rules, such as [SCA](https://stripe.com/docs/strong-customer-authentication).",
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                },
                "verification_method": {
                    "description": "Bank account verification method.",
                    "type": "string"
                }
            }
        },
        "options.PaymentLinksResourceAfterCompletion": {
            "type": "object",
            "properties": {
                "created_at": {
                    "type": "string"
                },
                "hosted_confirmation": {
                    "type": "string",
                    "format": "uuid"
                },
                "id": {
                    "type": "string"
                },
                "livemode": {
                    "type": "boolean"
                },
                "metadata": {
                    "$ref": "#/definitions/core.JSONB"
                },
                "object": {
                    "type": "string"
                },
                "redirect": {
                    "type": "string",
                    "format": "uuid"
                },
                "type": {
                    "description": "The specified behavior after the purchase is complete.",
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                }
            }
        },
        "options.PaymentLinksResourceConsentCollection": {
            "type": "object",
            "properties": {
                "created_at": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "livemode": {
                    "type": "boolean"
                },
                "metadata": {
                    "$ref": "#/definitions/core.JSONB"
                },
                "object": {
                    "type": "string"
                },
                "promotions": {
                    "description": "If set to `auto`, enables the collection of customer consent for promotional communications.",
                    "type": "string"
                },
                "terms_of_service": {
                    "description": "If set to `required`, it requires cutomers to accept the terms of service before being able to pay. If set to `none`, customers won't be shown a checkbox to accept the terms of service.",
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                }
            }
        },
        "options.PaymentLinksResourceCustomText": {
            "type": "object",
            "properties": {
                "created_at": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "livemode": {
                    "type": "boolean"
                },
                "metadata": {
                    "$ref": "#/definitions/core.JSONB"
                },
                "object": {
                    "type": "string"
                },
                "shipping_address": {
                    "type": "string"
                },
                "submit": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                }
            }
        },
        "options.PaymentLinksResourcePaymentIntentData": {
            "type": "object",
            "properties": {
                "capture_method": {
                    "description": "Indicates when the funds will be captured from the customer's account.",
                    "type": "string"
                },
                "created_at": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "livemode": {
                    "type": "boolean"
                },
                "metadata": {
                    "$ref": "#/definitions/core.JSONB"
                },
                "object": {
                    "type": "string"
                },
                "setup_future_usage": {
                    "description": "Indicates that you intend to make future payments with the payment method collected during checkout.",
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                }
            }
        },
        "options.PaymentLinksResourceShippingAddressCollection": {
            "type": "object",
            "properties": {
                "allowed_countries": {
                    "description": "An array of two-letter ISO country codes representing which countries Checkout should provide as options for shipping locations. Unsupported country codes: `AS, CX, CC, CU, HM, IR, KP, MH, FM, NF, MP, PW, SD, SY, UM, VI`.",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "created_at": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "livemode": {
                    "type": "boolean"
                },
                "metadata": {
                    "$ref": "#/definitions/core.JSONB"
                },
                "object": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                }
            }
        },
        "options.PaymentLinksResourceSubscriptionData": {
            "type": "object",
            "properties": {
                "created_at": {
                    "type": "string"
                },
                "description": {
                    "description": "The subscription's description, meant to be displayable to the customer. Use this field to optionally store an explanation of the subscription.",
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "livemode": {
                    "type": "boolean"
                },
                "metadata": {
                    "$ref": "#/definitions/core.JSONB"
                },
                "object": {
                    "type": "string"
                },
                "trial_period_days": {
                    "description": "Integer representing the number of trial period days before the customer is charged for the first time.",
                    "type": "integer"
                },
                "updated_at": {
                    "type": "string"
                }
            }
        },
        "options.SubscriptionsResourcePaymentMethodOptions": {
            "type": "object",
            "properties": {
                "acss_debit": {
                    "$ref": "#/definitions/options.SubscriptionsResourcePaymentMethodOptionsAcssDebit"
                },
                "bancontact": {
                    "$ref": "#/definitions/options.SubscriptionsResourcePaymentMethodOptionsBancontact"
                },
                "card": {
                    "$ref": "#/definitions/options.SubscriptionsResourcePaymentMethodOptionsCard"
                },
                "created_at": {
                    "type": "string"
                },
                "customer_balance": {
                    "$ref": "#/definitions/options.SubscriptionsResourcePaymentMethodOptionsCustomerBalance"
                },
                "id": {
                    "type": "string"
                },
                "konbini": {
                    "$ref": "#/definitions/options.SubscriptionsResourcePaymentMethodOptionsKonbini"
                },
                "livemode": {
                    "type": "boolean"
                },
                "metadata": {
                    "$ref": "#/definitions/core.JSONB"
                },
                "object": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                },
                "us_bank_account": {
                    "$ref": "#/definitions/options.SubscriptionsResourcePaymentMethodOptionsUsBankAccount"
                }
            }
        },
        "options.SubscriptionsResourcePaymentMethodOptionsAcssDebit": {
            "type": "object",
            "properties": {
                "created_at": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "livemode": {
                    "type": "boolean"
                },
                "mandate_options_transaction_type": {
                    "type": "string"
                },
                "metadata": {
                    "$ref": "#/definitions/core.JSONB"
                },
                "object": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                },
                "verification_method": {
                    "description": "Bank account verification method.",
                    "type": "string"
                }
            }
        },
        "options.SubscriptionsResourcePaymentMethodOptionsBancontact": {
            "type": "object",
            "properties": {
                "created_at": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "livemode": {
                    "type": "boolean"
                },
                "metadata": {
                    "$ref": "#/definitions/core.JSONB"
                },
                "object": {
                    "type": "string"
                },
                "preferred_language": {
                    "description": "Preferred language of the Bancontact authorization page that the customer is redirected to.",
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                }
            }
        },
        "options.SubscriptionsResourcePaymentMethodOptionsCard": {
            "type": "object",
            "properties": {
                "amount": {
                    "description": "Amount to be charged for future payments.",
                    "type": "integer"
                },
                "amount_type": {
                    "description": "One of `fixed` or `maximum`. If `fixed`, the `amount` param refers to the exact amount to be charged in future payments. If `maximum`, the amount charged can be up to the value passed for the `amount` param.",
                    "type": "string"
                },
                "created_at": {
                    "type": "string"
                },
                "description": {
                    "description": "A description of the mandate or subscription that is meant to be displayed to the customer.",
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "livemode": {
                    "type": "boolean"
                },
                "metadata": {
                    "$ref": "#/definitions/core.JSONB"
                },
                "network": {
                    "description": "Selected network to process this Subscription on. Depends on the available networks of the card attached to the Subscription. Can be only set confirm-time.",
                    "type": "string"
                },
                "object": {
                    "type": "string"
                },
                "request_three_d_secure": {
                    "description": "We strongly recommend that you rely on our SCA Engine to automatically prompt your customers for authentication based on risk level and [other requirements](https://stripe.com/docs/strong-customer-authentication). However, if you wish to request 3D Secure based on logic from your own fraud engine, provide this option. Read our guide on [manually requesting 3D Secure](https://stripe.com/docs/payments/3d-secure#manual-three-ds) for more information on how this configuration interacts with Radar and our SCA Engine.",
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                }
            }
        },
        "options.SubscriptionsResourcePaymentMethodOptionsCustomerBalance": {
            "type": "object",
            "properties": {
                "bank_transfer": {
                    "type": "string",
                    "format": "uuid"
                },
                "created_at": {
                    "type": "string"
                },
                "funding_type": {
                    "description": "The funding method type to be used when there are not enough funds in the customer balance. Permitted values include: `bank_transfer`.",
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "livemode": {
                    "type": "boolean"
                },
                "metadata": {
                    "$ref": "#/definitions/core.JSONB"
                },
                "object": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                }
            }
        },
        "options.SubscriptionsResourcePaymentMethodOptionsKonbini": {
            "type": "object",
            "properties": {
                "created_at": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "livemode": {
                    "type": "boolean"
                },
                "metadata": {
                    "$ref": "#/definitions/core.JSONB"
                },
                "object": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                }
            }
        },
        "options.SubscriptionsResourcePaymentMethodOptionsUsBankAccount": {
            "type": "object",
            "properties": {
                "created_at": {
                    "type": "string"
                },
                "financial_connections": {
                    "type": "string",
                    "format": "uuid"
                },
                "id": {
                    "type": "string"
                },
                "livemode": {
                    "type": "boolean"
                },
                "metadata": {
                    "$ref": "#/definitions/core.JSONB"
                },
                "object": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                },
                "verification_method": {
                    "description": "Bank account verification method.",
                    "type": "string"
                }
            }
        },
        "page.PaymentPagesCheckoutSessionAfterExpiration": {
            "type": "object",
            "properties": {
                "allow_promotion_codes": {
                    "description": "Enables user redeemable promotion codes on the recovered Checkout Sessions. Defaults to `false`",
                    "type": "boolean"
                },
                "created_at": {
                    "type": "string"
                },
                "enabled": {
                    "description": "If `true`, a recovery url will be generated to recover this Checkout Session if it expires before a transaction is completed. It will be attached to the Checkout Session object upon expiration.",
                    "type": "boolean"
                },
                "expires_at": {
                    "description": "The timestamp at which the recovery URL will expire.",
                    "type": "integer"
                },
                "id": {
                    "type": "string"
                },
                "livemode": {
                    "type": "boolean"
                },
                "metadata": {
                    "$ref": "#/definitions/core.JSONB"
                },
                "object": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                },
                "url": {
                    "description": "URL that creates a new Checkout Session when clicked that is a copy of this expired Checkout Session",
                    "type": "string"
                }
            }
        },
        "page.PaymentPagesCheckoutSessionConsent": {
            "type": "object",
            "properties": {
                "created_at": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "livemode": {
                    "type": "boolean"
                },
                "metadata": {
                    "$ref": "#/definitions/core.JSONB"
                },
                "object": {
                    "type": "string"
                },
                "promotions": {
                    "description": "If `opt_in`, the customer consents to receiving promotional communications from the merchant about this Checkout Session.",
                    "type": "string"
                },
                "terms_of_service": {
                    "description": "If `accepted`, the customer in this Checkout Session has agreed to the merchant's terms of service.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/page.TermsOfService"
                        }
                    ]
                },
                "updated_at": {
                    "type": "string"
                }
            }
        },
        "page.PaymentPagesCheckoutSessionConsentCollection": {
            "type": "object",
            "properties": {
                "created_at": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "livemode": {
                    "type": "boolean"
                },
                "metadata": {
                    "$ref": "#/definitions/core.JSONB"
                },
                "object": {
                    "type": "string"
                },
                "promotions": {
                    "description": "If set to `auto`, enables the collection of customer consent for promotional communications. The Checkout Session will determine whether to display an option to opt into promotional communication from the merchant depending on the customer's locale. Only available to US merchants.",
                    "type": "string"
                },
                "terms_of_service": {
                    "description": "If set to `required`, it requires customers to accept the terms of service before being able to pay.",
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                }
            }
        },
        "page.PaymentPagesCheckoutSessionCustomText": {
            "type": "object",
            "properties": {
                "created_at": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "livemode": {
                    "type": "boolean"
                },
                "metadata": {
                    "$ref": "#/definitions/core.JSONB"
                },
                "object": {
                    "type": "string"
                },
                "shipping_address": {
                    "type": "string"
                },
                "submit": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                }
            }
        },
        "page.PaymentPagesCheckoutSessionCustomerDetails": {
            "type": "object",
            "properties": {
                "address": {
                    "type": "string",
                    "format": "uuid"
                },
                "created_at": {
                    "type": "string"
                },
                "email": {
                    "description": "The email associated with the Customer, if one exists, on the Checkout Session after a completed Checkout Session or at time of session expiry. Otherwise, if the customer has consented to promotional content, this value is the most recent valid email provided by the customer on the Checkout form.",
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "livemode": {
                    "type": "boolean"
                },
                "metadata": {
                    "$ref": "#/definitions/core.JSONB"
                },
                "name": {
                    "description": "The customer's name after a completed Checkout Session. Note: This property is populated only for sessions on or after March 30, 2022.",
                    "type": "string"
                },
                "object": {
                    "type": "string"
                },
                "phone": {
                    "description": "The customer's phone number after a completed Checkout Session.",
                    "type": "string"
                },
                "tax_exempt": {
                    "description": "The customer’s tax exempt status after a completed Checkout Session.",
                    "type": "string"
                },
                "tax_ids": {
                    "description": "The customer’s tax IDs after a completed Checkout Session.",
                    "type": "array",
                    "items": {
                        "type": "string",
                        "format": "uuid"
                    }
                },
                "updated_at": {
                    "type": "string"
                }
            }
        },
        "page.PaymentPagesCheckoutSessionInvoiceCreation": {
            "type": "object",
            "properties": {
                "created_at": {
                    "type": "string"
                },
                "enabled": {
                    "description": "Indicates whether invoice creation is enabled for the Checkout Session.",
                    "type": "boolean"
                },
                "id": {
                    "type": "string"
                },
                "invoice_data": {
                    "type": "string",
                    "format": "uuid"
                },
                "livemode": {
                    "type": "boolean"
                },
                "metadata": {
                    "$ref": "#/definitions/core.JSONB"
                },
                "object": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                }
            }
        },
        "page.PaymentPagesCheckoutSessionShippingAddressCollection": {
            "type": "object",
            "properties": {
                "allowed_countries": {
                    "description": "An array of two-letter ISO country codes representing which countries Checkout should provide as options for shipping locations. Unsupported country codes: `AS, CX, CC, CU, HM, IR, KP, MH, FM, NF, MP, PW, SD, SY, UM, VI`.",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "created_at": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "livemode": {
                    "type": "boolean"
                },
                "metadata": {
                    "$ref": "#/definitions/core.JSONB"
                },
                "object": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                }
            }
        },
        "page.PaymentPagesCheckoutSessionShippingCost": {
            "type": "object",
            "properties": {
                "amount_subtota": {
                    "description": "Total shipping cost before any discounts or taxes are applied.",
                    "type": "integer"
                },
                "amount_tax": {
                    "description": "Total tax amount applied due to shipping costs. If no tax was applied, defaults to 0.",
                    "type": "integer"
                },
                "amount_tota": {
                    "description": "Total shipping cost after discounts and taxes are applied.",
                    "type": "integer"
                },
                "created_at": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "livemode": {
                    "type": "boolean"
                },
                "metadata": {
                    "$ref": "#/definitions/core.JSONB"
                },
                "object": {
                    "type": "string"
                },
                "shipping_rate": {
                    "type": "string",
                    "format": "uuid"
                },
                "taxes": {
                    "description": "The taxes applied to the shipping rate.",
                    "type": "array",
                    "items": {
                        "type": "string",
                        "format": "uuid"
                    }
                },
                "updated_at": {
                    "type": "string"
                }
            }
        },
        "page.PaymentPagesCheckoutSessionTotalDetails": {
            "type": "object",
            "properties": {
                "amount_discount": {
                    "description": "This is the sum of all the discounts.",
                    "type": "integer"
                },
                "amount_shipping": {
                    "description": "This is the sum of all the shipping amounts.",
                    "type": "integer"
                },
                "amount_tax": {
                    "description": "This is the sum of all the tax amounts.",
                    "type": "integer"
                },
                "created_at": {
                    "type": "string"
                },
                "discounts": {
                    "description": "The aggregated discounts.",
                    "type": "array",
                    "items": {
                        "type": "string",
                        "format": "uuid"
                    }
                },
                "id": {
                    "type": "string"
                },
                "livemode": {
                    "type": "boolean"
                },
                "metadata": {
                    "$ref": "#/definitions/core.JSONB"
                },
                "object": {
                    "type": "string"
                },
                "taxes": {
                    "description": "The aggregated tax amounts by rate.",
                    "type": "array",
                    "items": {
                        "type": "string",
                        "format": "uuid"
                    }
                },
                "updated_at": {
                    "type": "string"
                }
            }
        },
        "page.TermsOfService": {
            "type": "string",
            "enum": [
                "accepted"
            ],
            "x-enum-varnames": [
                "TermsOfServiceAccepted"
            ]
        },
        "paymentFlow.PaymentFlowsAmountDetails": {
            "type": "object",
            "properties": {
                "created_at": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "livemode": {
                    "type": "boolean"
                },
                "metadata": {
                    "$ref": "#/definitions/core.JSONB"
                },
                "object": {
                    "type": "string"
                },
                "tip_amount": {
                    "type": "integer"
                },
                "updated_at": {
                    "type": "string"
                }
            }
        },
        "payout.Bind.request": {
            "type": "object",
            "properties": {
                "amount": {
                    "type": "integer"
                },
                "arrival_date": {
                    "type": "integer"
                },
                "automatic": {
                    "type": "boolean"
                },
                "balance_transaction": {
                    "type": "string",
                    "format": "uuid"
                },
                "created_at": {
                    "type": "string"
                },
                "currency": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "destination": {
                    "type": "string"
                },
                "failure_balance_transaction": {
                    "type": "string",
                    "format": "uuid"
                },
                "failure_code": {
                    "type": "string"
                },
                "failure_message": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "livemode": {
                    "type": "boolean"
                },
                "metadata": {
                    "$ref": "#/definitions/core.JSONB"
                },
                "method": {
                    "$ref": "#/definitions/payout.Method"
                },
                "object": {
                    "type": "string"
                },
                "original_payout": {
                    "type": "string",
                    "format": "uuid"
                },
                "reversed_by": {
                    "type": "string",
                    "format": "uuid"
                },
                "source_type": {
                    "$ref": "#/definitions/payout.SourceType"
                },
                "statement_descriptor": {
                    "type": "string"
                },
                "status": {
                    "$ref": "#/definitions/payout.Status"
                },
                "type": {
                    "$ref": "#/definitions/payout.Type"
                },
                "updated_at": {
                    "type": "string"
                }
            }
        },
        "payout.Method": {
            "type": "string",
            "enum": [
                "standard",
                "instant"
            ],
            "x-enum-varnames": [
                "MethodStandard",
                "MethodInstant"
            ]
        },
        "payout.Payout": {
            "type": "object",
            "properties": {
                "amount": {
                    "type": "integer"
                },
                "arrival_date": {
                    "type": "integer"
                },
                "automatic": {
                    "type": "boolean"
                },
                "balance_transaction": {
                    "$ref": "#/definitions/balance.BalanceTransaction"
                },
                "created_at": {
                    "type": "string"
                },
                "currency": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "destination": {
                    "type": "string"
                },
                "failure_balance_transaction": {
                    "$ref": "#/definitions/balance.BalanceTransaction"
                },
                "failure_code": {
                    "type": "string"
                },
                "failure_message": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "livemode": {
                    "type": "boolean"
                },
                "metadata": {
                    "$ref": "#/definitions/core.JSONB"
                },
                "method": {
                    "$ref": "#/definitions/payout.Method"
                },
                "object": {
                    "type": "string"
                },
                "original_payout": {
                    "$ref": "#/definitions/payout.Payout"
                },
                "reversed_by": {
                    "$ref": "#/definitions/payout.Payout"
                },
                "source_type": {
                    "$ref": "#/definitions/payout.SourceType"
                },
                "statement_descriptor": {
                    "type": "string"
                },
                "status": {
                    "$ref": "#/definitions/payout.Status"
                },
                "type": {
                    "$ref": "#/definitions/payout.Type"
                },
                "updated_at": {
                    "type": "string"
                }
            }
        },
        "payout.SourceType": {
            "type": "string",
            "enum": [
                "card",
                "fpx",
                "bank_account"
            ],
            "x-enum-varnames": [
                "SourceTypeCard",
                "SourceTypeFpx",
                "SourceTypeBankAccount"
            ]
        },
        "payout.Status": {
            "type": "string",
            "enum": [
                "paid",
                "pending",
                "in_transit",
                "canceled",
                "failed"
            ],
            "x-enum-varnames": [
                "StatusPaid",
                "StatusPending",
                "StatusInTransit",
                "StatusCanceled",
                "StatusFailed"
            ]
        },
        "payout.Type": {
            "type": "string",
            "enum": [
                "bank_account",
                "card"
            ],
            "x-enum-varnames": [
                "TypeBankAccount",
                "TypeCard"
            ]
        },
        "plan.Bind.request": {
            "type": "object",
            "properties": {
                "active": {
                    "description": "Whether the plan can be used for new purchases.",
                    "type": "boolean"
                },
                "aggregate_usage": {
                    "description": "Specifies a usage aggregation strategy for plans of `usage_type=metered`. Allowed values are `sum` for summing up all usage during a period, `last_during_period` for using the last usage record reported within a period, `last_ever` for using the last usage record ever (across period bounds) or `max` which uses the usage record with the maximum reported usage during a period. Defaults to `sum`.",
                    "type": "string"
                },
                "amount": {
                    "description": "The unit amount in %s to be charged, represented as a whole integer if possible. Only set if `billing_scheme=per_unit`.",
                    "type": "integer"
                },
                "amount_decimal": {
                    "description": "The unit amount in %s to be charged, represented as a decimal string with at most 12 decimal places. Only set if `billing_scheme=per_unit`.",
                    "type": "number"
                },
                "billing_scheme": {
                    "description": "Describes how to compute the price per period. Either `per_unit` or `tiered`. `per_unit` indicates that the fixed amount (specified in `amount`) will be charged per unit in `quantity` (for plans with `usage_type=licensed`), or per unit of total usage (for plans with `usage_type=metered`). `tiered` indicates that the unit pricing will be computed using a tiering strategy as defined using the `tiers` and `tiers_mode` attributes.",
                    "type": "string"
                },
                "created_at": {
                    "type": "string"
                },
                "currency": {
                    "description": "Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).",
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "interval": {
                    "description": "The frequency at which a subscription is billed. One of `day`, `week`, `month` or `year`.",
                    "type": "string"
                },
                "interval_count": {
                    "description": "The number of intervals (specified in the `interval` attribute) between subscription billings. For example, `interval=month` and `interval_count=3` bills every 3 months.",
                    "type": "integer"
                },
                "livemode": {
                    "type": "boolean"
                },
                "metadata": {
                    "$ref": "#/definitions/core.JSONB"
                },
                "nickname": {
                    "description": "A brief description of the plan, hidden from customers.",
                    "type": "string"
                },
                "object": {
                    "type": "string"
                },
                "product": {
                    "type": "string",
                    "format": "uuid"
                },
                "tiers": {
                    "description": "Each element represents a pricing tier. This parameter requires `billing_scheme` to be set to `tiered`. See also the documentation for `billing_scheme`.",
                    "type": "array",
                    "items": {
                        "type": "string",
                        "format": "uuid"
                    }
                },
                "tiers_mode": {
                    "description": "Defines if the tiering price should be `graduated` or `volume` based. In `volume`-based tiering, the maximum quantity within a period determines the per unit price. In `graduated` tiering, pricing can change as the quantity grows.",
                    "type": "string"
                },
                "transform_usage": {
                    "$ref": "#/definitions/plan.TransformUsage"
                },
                "trial_period_days": {
                    "description": "Default number of trial days when subscribing a customer to this plan using [`trial_from_plan=true`](https://stripe.com/docs/api#create_subscription-trial_from_plan).",
                    "type": "integer"
                },
                "updated_at": {
                    "type": "string"
                },
                "usage_type": {
                    "description": "Configures how the quantity per period should be determined. Can be either `metered` or `licensed`. `licensed` automatically bills the `quantity` set when adding it to a subscription. `metered` aggregates the total usage based on usage records. Defaults to `licensed`.",
                    "type": "string"
                }
            }
        },
        "plan.Plan": {
            "type": "object",
            "properties": {
                "active": {
                    "description": "Whether the plan can be used for new purchases.",
                    "type": "boolean"
                },
                "aggregate_usage": {
                    "description": "Specifies a usage aggregation strategy for plans of `usage_type=metered`. Allowed values are `sum` for summing up all usage during a period, `last_during_period` for using the last usage record reported within a period, `last_ever` for using the last usage record ever (across period bounds) or `max` which uses the usage record with the maximum reported usage during a period. Defaults to `sum`.",
                    "type": "string"
                },
                "amount": {
                    "description": "The unit amount in %s to be charged, represented as a whole integer if possible. Only set if `billing_scheme=per_unit`.",
                    "type": "integer"
                },
                "amount_decimal": {
                    "description": "The unit amount in %s to be charged, represented as a decimal string with at most 12 decimal places. Only set if `billing_scheme=per_unit`.",
                    "type": "number"
                },
                "billing_scheme": {
                    "description": "Describes how to compute the price per period. Either `per_unit` or `tiered`. `per_unit` indicates that the fixed amount (specified in `amount`) will be charged per unit in `quantity` (for plans with `usage_type=licensed`), or per unit of total usage (for plans with `usage_type=metered`). `tiered` indicates that the unit pricing will be computed using a tiering strategy as defined using the `tiers` and `tiers_mode` attributes.",
                    "type": "string"
                },
                "created_at": {
                    "type": "string"
                },
                "currency": {
                    "description": "Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).",
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "interval": {
                    "description": "The frequency at which a subscription is billed. One of `day`, `week`, `month` or `year`.",
                    "type": "string"
                },
                "interval_count": {
                    "description": "The number of intervals (specified in the `interval` attribute) between subscription billings. For example, `interval=month` and `interval_count=3` bills every 3 months.",
                    "type": "integer"
                },
                "livemode": {
                    "type": "boolean"
                },
                "metadata": {
                    "$ref": "#/definitions/core.JSONB"
                },
                "nickname": {
                    "description": "A brief description of the plan, hidden from customers.",
                    "type": "string"
                },
                "object": {
                    "type": "string"
                },
                "product": {
                    "$ref": "#/definitions/product.Product"
                },
                "tiers": {
                    "description": "Each element represents a pricing tier. This parameter requires `billing_scheme` to be set to `tiered`. See also the documentation for `billing_scheme`.",
                    "type": "array",
                    "items": {
                        "type": "string",
                        "format": "uuid"
                    }
                },
                "tiers_mode": {
                    "description": "Defines if the tiering price should be `graduated` or `volume` based. In `volume`-based tiering, the maximum quantity within a period determines the per unit price. In `graduated` tiering, pricing can change as the quantity grows.",
                    "type": "string"
                },
                "transform_usage": {
                    "$ref": "#/definitions/plan.TransformUsage"
                },
                "trial_period_days": {
                    "description": "Default number of trial days when subscribing a customer to this plan using [`trial_from_plan=true`](https://stripe.com/docs/api#create_subscription-trial_from_plan).",
                    "type": "integer"
                },
                "updated_at": {
                    "type": "string"
                },
                "usage_type": {
                    "description": "Configures how the quantity per period should be determined. Can be either `metered` or `licensed`. `licensed` automatically bills the `quantity` set when adding it to a subscription. `metered` aggregates the total usage based on usage records. Defaults to `licensed`.",
                    "type": "string"
                }
            }
        },
        "plan.TransformUsage": {
            "type": "object",
            "properties": {
                "created_at": {
                    "type": "string"
                },
                "divide_by": {
                    "description": "Divide usage by this number.",
                    "type": "integer"
                },
                "id": {
                    "type": "string"
                },
                "livemode": {
                    "type": "boolean"
                },
                "metadata": {
                    "$ref": "#/definitions/core.JSONB"
                },
                "object": {
                    "type": "string"
                },
                "round": {
                    "description": "After division, either round the result `up` or `down`.",
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                }
            }
        },
        "price.AggregateUsage": {
            "type": "string",
            "enum": [
                "sum",
                "last_during_period",
                "last_ever",
                "max"
            ],
            "x-enum-varnames": [
                "AggregateUsageSum",
                "AggregateUsageLastDuringPeriod",
                "AggregateUsageLastEver",
                "AggregateUsageMax"
            ]
        },
        "price.BillingScheme": {
            "type": "string",
            "enum": [
                "per_unit",
                "tiered"
            ],
            "x-enum-varnames": [
                "BillingSchemePerUnit",
                "BillingSchemeTiered"
            ]
        },
        "price.Bind.request": {
            "type": "object",
            "properties": {
                "active": {
                    "type": "boolean"
                },
                "billing_scheme": {
                    "$ref": "#/definitions/price.BillingScheme"
                },
                "created_at": {
                    "type": "string"
                },
                "currency": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "livemode": {
                    "type": "boolean"
                },
                "lookup_key": {
                    "type": "string"
                },
                "metadata": {
                    "$ref": "#/definitions/core.JSONB"
                },
                "nickname": {
                    "type": "string"
                },
                "object": {
                    "type": "string"
                },
                "product": {
                    "type": "string",
                    "format": "uuid"
                },
                "recurring": {
                    "$ref": "#/definitions/price.Recurring"
                },
                "tax_behavior": {
                    "$ref": "#/definitions/price.TaxBehavior"
                },
                "tiers": {
                    "type": "array",
                    "items": {
                        "type": "string",
                        "format": "uuid"
                    }
                },
                "tiers_mode": {
                    "$ref": "#/definitions/price.TiersMode"
                },
                "transform_quantity": {
                    "$ref": "#/definitions/price.TransformQuantity"
                },
                "type": {
                    "$ref": "#/definitions/price.Type"
                },
                "unit_amount": {
                    "type": "integer"
                },
                "unit_amount_decimal": {
                    "type": "number"
                },
                "updated_at": {
                    "type": "string"
                }
            }
        },
        "price.Interval": {
            "type": "string",
            "enum": [
                "month",
                "year",
                "week",
                "day"
            ],
            "x-enum-varnames": [
                "IntervalMonth",
                "IntervalYear",
                "IntervalWeek",
                "IntervalDay"
            ]
        },
        "price.Price": {
            "type": "object",
            "properties": {
                "active": {
                    "type": "boolean"
                },
                "billing_scheme": {
                    "$ref": "#/definitions/price.BillingScheme"
                },
                "created_at": {
                    "type": "string"
                },
                "currency": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "livemode": {
                    "type": "boolean"
                },
                "lookup_key": {
                    "type": "string"
                },
                "metadata": {
                    "$ref": "#/definitions/core.JSONB"
                },
                "nickname": {
                    "type": "string"
                },
                "object": {
                    "type": "string"
                },
                "product": {
                    "$ref": "#/definitions/product.Product"
                },
                "recurring": {
                    "$ref": "#/definitions/price.Recurring"
                },
                "tax_behavior": {
                    "$ref": "#/definitions/price.TaxBehavior"
                },
                "tiers": {
                    "type": "array",
                    "items": {
                        "type": "string",
                        "format": "uuid"
                    }
                },
                "tiers_mode": {
                    "$ref": "#/definitions/price.TiersMode"
                },
                "transform_quantity": {
                    "$ref": "#/definitions/price.TransformQuantity"
                },
                "type": {
                    "$ref": "#/definitions/price.Type"
                },
                "unit_amount": {
                    "type": "integer"
                },
                "unit_amount_decimal": {
                    "type": "number"
                },
                "updated_at": {
                    "type": "string"
                }
            }
        },
        "price.Recurring": {
            "type": "object",
            "properties": {
                "aggregate_usage": {
                    "$ref": "#/definitions/price.AggregateUsage"
                },
                "created_at": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "interval": {
                    "$ref": "#/definitions/price.Interval"
                },
                "interval_count": {
                    "type": "integer"
                },
                "livemode": {
                    "type": "boolean"
                },
                "metadata": {
                    "$ref": "#/definitions/core.JSONB"
                },
                "object": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                },
                "usage_type": {
                    "$ref": "#/definitions/price.UsageType"
                }
            }
        },
        "price.Round": {
            "type": "string",
            "enum": [
                "up",
                "down"
            ],
            "x-enum-varnames": [
                "RoundUp",
                "RoundDown"
            ]
        },
        "price.TaxBehavior": {
            "type": "string",
            "enum": [
                "inclusive",
                "exclusive",
                "unspecified"
            ],
            "x-enum-varnames": [
                "TaxBehaviorInclusive",
                "TaxBehaviorExclusive",
                "TaxBehaviorUnspecified"
            ]
        },
        "price.TiersMode": {
            "type": "string",
            "enum": [
                "graduated",
                "volume"
            ],
            "x-enum-varnames": [
                "TiersModeGraduated",
                "TiersModeVolume"
            ]
        },
        "price.TransformQuantity": {
            "type": "object",
            "properties": {
                "created_at": {
                    "type": "string"
                },
                "divide_by": {
                    "type": "integer"
                },
                "id": {
                    "type": "string"
                },
                "livemode": {
                    "type": "boolean"
                },
                "metadata": {
                    "$ref": "#/definitions/core.JSONB"
                },
                "object": {
                    "type": "string"
                },
                "round": {
                    "$ref": "#/definitions/price.Round"
                },
                "updated_at": {
                    "type": "string"
                }
            }
        },
        "price.Type": {
            "type": "string",
            "enum": [
                "one_time",
                "recurring"
            ],
            "x-enum-varnames": [
                "TypeOneTime",
                "TypeRecurring"
            ]
        },
        "price.UsageType": {
            "type": "string",
            "enum": [
                "metered",
                "licensed"
            ],
            "x-enum-varnames": [
                "UsageTypeMetered",
                "UsageTypeLicensed"
            ]
        },
        "product.Bind.request": {
            "type": "object",
            "properties": {
                "active": {
                    "type": "boolean"
                },
                "created_at": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "images": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "livemode": {
                    "type": "boolean"
                },
                "metadata": {
                    "$ref": "#/definitions/core.JSONB"
                },
                "name": {
                    "type": "string"
                },
                "object": {
                    "type": "string"
                },
                "package_dimensions": {
                    "$ref": "#/definitions/product.PackageDimensions"
                },
                "shippable": {
                    "type": "boolean"
                },
                "statement_descriptor": {
                    "type": "string"
                },
                "tax_code": {
                    "$ref": "#/definitions/tax.TaxCode"
                },
                "unit_label": {
                    "type": "string"
                },
                "updated": {
                    "type": "integer"
                },
                "updated_at": {
                    "type": "string"
                },
                "url": {
                    "type": "string"
                }
            }
        },
        "product.PackageDimensions": {
            "type": "object",
            "properties": {
                "created_at": {
                    "type": "string"
                },
                "height": {
                    "type": "number"
                },
                "id": {
                    "type": "string"
                },
                "length": {
                    "type": "number"
                },
                "livemode": {
                    "type": "boolean"
                },
                "metadata": {
                    "$ref": "#/definitions/core.JSONB"
                },
                "object": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                },
                "weight": {
                    "type": "number"
                },
                "width": {
                    "type": "number"
                }
            }
        },
        "product.Product": {
            "type": "object",
            "properties": {
                "active": {
                    "type": "boolean"
                },
                "created_at": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "images": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "livemode": {
                    "type": "boolean"
                },
                "metadata": {
                    "$ref": "#/definitions/core.JSONB"
                },
                "name": {
                    "type": "string"
                },
                "object": {
                    "type": "string"
                },
                "package_dimensions": {
                    "$ref": "#/definitions/product.PackageDimensions"
                },
                "shippable": {
                    "type": "boolean"
                },
                "statement_descriptor": {
                    "type": "string"
                },
                "tax_code": {
                    "$ref": "#/definitions/tax.TaxCode"
                },
                "unit_label": {
                    "type": "string"
                },
                "updated": {
                    "type": "integer"
                },
                "updated_at": {
                    "type": "string"
                },
                "url": {
                    "type": "string"
                }
            }
        },
        "promotion.Bind.request": {
            "type": "object",
            "properties": {
                "active": {
                    "type": "boolean"
                },
                "code": {
                    "type": "string"
                },
                "coupon": {
                    "type": "string",
                    "format": "uuid"
                },
                "created_at": {
                    "type": "string"
                },
                "customer": {
                    "type": "string",
                    "format": "uuid"
                },
                "expires_at": {
                    "type": "integer"
                },
                "first_time_transaction": {
                    "type": "boolean"
                },
                "id": {
                    "type": "string"
                },
                "livemode": {
                    "type": "boolean"
                },
                "max_redemptions": {
                    "type": "integer"
                },
                "metadata": {
                    "$ref": "#/definitions/core.JSONB"
                },
                "minimum_amount": {
                    "type": "integer"
                },
                "minimum_amount_currency": {
                    "type": "string"
                },
                "object": {
                    "type": "string"
                },
                "times_redeemed": {
                    "type": "integer"
                },
                "updated_at": {
                    "type": "string"
                }
            }
        },
        "promotion.PromotionCode": {
            "type": "object",
            "properties": {
                "active": {
                    "type": "boolean"
                },
                "code": {
                    "type": "string"
                },
                "coupon": {
                    "$ref": "#/definitions/coupon.Coupon"
                },
                "created_at": {
                    "type": "string"
                },
                "customer": {
                    "$ref": "#/definitions/customer.Customer"
                },
                "expires_at": {
                    "type": "integer"
                },
                "first_time_transaction": {
                    "type": "boolean"
                },
                "id": {
                    "type": "string"
                },
                "livemode": {
                    "type": "boolean"
                },
                "max_redemptions": {
                    "type": "integer"
                },
                "metadata": {
                    "$ref": "#/definitions/core.JSONB"
                },
                "minimum_amount": {
                    "type": "integer"
                },
                "minimum_amount_currency": {
                    "type": "string"
                },
                "object": {
                    "type": "string"
                },
                "times_redeemed": {
                    "type": "integer"
                },
                "updated_at": {
                    "type": "string"
                }
            }
        },
        "quote.Bind.request": {
            "type": "object",
            "properties": {
                "amount_subtotal": {
                    "description": "Total before any discounts or taxes are applied.",
                    "type": "integer"
                },
                "amount_total": {
                    "description": "Total after discounts and taxes are applied.",
                    "type": "integer"
                },
                "automatic_tax": {
                    "type": "boolean"
                },
                "collection_method": {
                    "description": "Either `charge_automatically`, or `send_invoice`. When charging automatically, Stripe will attempt to pay invoices at the end of the subscription cycle or on finalization using the default payment method attached to the subscription or customer. When sending an invoice, Stripe will email your customer an invoice with payment instructions and mark the subscription as `active`. Defaults to `charge_automatically`.",
                    "type": "string"
                },
                "computed": {
                    "$ref": "#/definitions/quote.QuotesResourceComputed"
                },
                "created_at": {
                    "type": "string"
                },
                "currency": {
                    "description": "Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).",
                    "type": "string"
                },
                "customer": {
                    "type": "string",
                    "format": "uuid"
                },
                "default_tax_rates": {
                    "type": "array",
                    "items": {
                        "type": "string",
                        "format": "uuid"
                    }
                },
                "description": {
                    "description": "A description that will be displayed on the quote PDF.",
                    "type": "string"
                },
                "discounts": {
                    "type": "array",
                    "items": {
                        "type": "string",
                        "format": "uuid"
                    }
                },
                "expires_at": {
                    "description": "The date on which the quote will be canceled if in `open` or `draft` status. Measured in seconds since the Unix epoch.",
                    "type": "integer"
                },
                "footer": {
                    "description": "A footer that will be displayed on the quote PDF.",
                    "type": "string"
                },
                "header": {
                    "description": "A header that will be displayed on the quote PDF.",
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "invoice": {
                    "type": "string",
                    "format": "uuid"
                },
                "invoice_settings": {
                    "description": "Unique identifier for the object.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/settings.InvoiceSettingQuoteSetting"
                        }
                    ]
                },
                "line_items": {
                    "type": "array",
                    "items": {
                        "type": "string",
                        "format": "uuid"
                    }
                },
                "livemode": {
                    "type": "boolean"
                },
                "metadata": {
                    "$ref": "#/definitions/core.JSONB"
                },
                "number": {
                    "description": "A unique number that identifies this particular quote. This number is assigned once the quote is [finalized](https://stripe.com/docs/quotes/overview#finalize).",
                    "type": "string"
                },
                "object": {
                    "type": "string"
                },
                "status": {
                    "description": "The status of the quote.",
                    "type": "string"
                },
                "status_transitions": {
                    "$ref": "#/definitions/quote.QuotesResourceStatusTransitions"
                },
                "subscription": {
                    "type": "string",
                    "format": "uuid"
                },
                "subscription_data": {
                    "$ref": "#/definitions/quote.QuotesResourceSubscriptionDataSubscriptionData"
                },
                "subscription_schedule": {
                    "type": "string",
                    "format": "uuid"
                },
                "total_details": {
                    "$ref": "#/definitions/quote.QuotesResourceTotalDetails"
                },
                "updated_at": {
                    "type": "string"
                }
            }
        },
        "quote.Quote": {
            "type": "object",
            "properties": {
                "amount_subtotal": {
                    "description": "Total before any discounts or taxes are applied.",
                    "type": "integer"
                },
                "amount_total": {
                    "description": "Total after discounts and taxes are applied.",
                    "type": "integer"
                },
                "automatic_tax": {
                    "type": "boolean"
                },
                "collection_method": {
                    "description": "Either `charge_automatically`, or `send_invoice`. When charging automatically, Stripe will attempt to pay invoices at the end of the subscription cycle or on finalization using the default payment method attached to the subscription or customer. When sending an invoice, Stripe will email your customer an invoice with payment instructions and mark the subscription as `active`. Defaults to `charge_automatically`.",
                    "type": "string"
                },
                "computed": {
                    "$ref": "#/definitions/quote.QuotesResourceComputed"
                },
                "created_at": {
                    "type": "string"
                },
                "currency": {
                    "description": "Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).",
                    "type": "string"
                },
                "customer": {
                    "$ref": "#/definitions/customer.Customer"
                },
                "default_tax_rates": {
                    "type": "array",
                    "items": {
                        "type": "string",
                        "format": "uuid"
                    }
                },
                "description": {
                    "description": "A description that will be displayed on the quote PDF.",
                    "type": "string"
                },
                "discounts": {
                    "type": "array",
                    "items": {
                        "type": "string",
                        "format": "uuid"
                    }
                },
                "expires_at": {
                    "description": "The date on which the quote will be canceled if in `open` or `draft` status. Measured in seconds since the Unix epoch.",
                    "type": "integer"
                },
                "footer": {
                    "description": "A footer that will be displayed on the quote PDF.",
                    "type": "string"
                },
                "header": {
                    "description": "A header that will be displayed on the quote PDF.",
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "invoice": {
                    "$ref": "#/definitions/invoice.Invoice"
                },
                "invoice_settings": {
                    "description": "Unique identifier for the object.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/settings.InvoiceSettingQuoteSetting"
                        }
                    ]
                },
                "line_items": {
                    "type": "array",
                    "items": {
                        "type": "string",
                        "format": "uuid"
                    }
                },
                "livemode": {
                    "type": "boolean"
                },
                "metadata": {
                    "$ref": "#/definitions/core.JSONB"
                },
                "number": {
                    "description": "A unique number that identifies this particular quote. This number is assigned once the quote is [finalized](https://stripe.com/docs/quotes/overview#finalize).",
                    "type": "string"
                },
                "object": {
                    "type": "string"
                },
                "status": {
                    "description": "The status of the quote.",
                    "type": "string"
                },
                "status_transitions": {
                    "$ref": "#/definitions/quote.QuotesResourceStatusTransitions"
                },
                "subscription": {
                    "$ref": "#/definitions/subscription.Subscription"
                },
                "subscription_data": {
                    "$ref": "#/definitions/quote.QuotesResourceSubscriptionDataSubscriptionData"
                },
                "subscription_schedule": {
                    "$ref": "#/definitions/subscriptionSchedule.SubscriptionSchedule"
                },
                "total_details": {
                    "$ref": "#/definitions/quote.QuotesResourceTotalDetails"
                },
                "updated_at": {
                    "type": "string"
                }
            }
        },
        "quote.QuotesResourceComputed": {
            "type": "object",
            "properties": {
                "created_at": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "livemode": {
                    "type": "boolean"
                },
                "metadata": {
                    "$ref": "#/definitions/core.JSONB"
                },
                "object": {
                    "type": "string"
                },
                "recurring": {
                    "$ref": "#/definitions/quote.QuotesResourceRecurring"
                },
                "updated_at": {
                    "type": "string"
                },
                "upfront": {
                    "$ref": "#/definitions/quote.QuotesResourceUpfront"
                }
            }
        },
        "quote.QuotesResourceRecurring": {
            "type": "object",
            "properties": {
                "amount_subtotal": {
                    "description": "Total before any discounts or taxes are applied.",
                    "type": "integer"
                },
                "amount_total": {
                    "description": "Total after discounts and taxes are applied.",
                    "type": "integer"
                },
                "created_at": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "interval": {
                    "description": "The frequency at which a subscription is billed. One of `day`, `week`, `month` or `year`.",
                    "type": "string"
                },
                "interval_count": {
                    "description": "The number of intervals (specified in the `interval` attribute) between subscription billings. For example, `interval=month` and `interval_count=3` bills every 3 months.",
                    "type": "integer"
                },
                "livemode": {
                    "type": "boolean"
                },
                "metadata": {
                    "$ref": "#/definitions/core.JSONB"
                },
                "object": {
                    "type": "string"
                },
                "total_details": {
                    "$ref": "#/definitions/quote.QuotesResourceTotalDetails"
                },
                "updated_at": {
                    "type": "string"
                }
            }
        },
        "quote.QuotesResourceStatusTransitions": {
            "type": "object",
            "properties": {
                "accepted_at": {
                    "description": "The time that the quote was accepted. Measured in seconds since Unix epoch.",
                    "type": "integer"
                },
                "canceled_at": {
                    "description": "The time that the quote was canceled. Measured in seconds since Unix epoch.",
                    "type": "integer"
                },
                "created_at": {
                    "type": "string"
                },
                "finalized_at": {
                    "description": "The time that the quote was finalized. Measured in seconds since Unix epoch.",
                    "type": "integer"
                },
                "id": {
                    "type": "string"
                },
                "livemode": {
                    "type": "boolean"
                },
                "metadata": {
                    "$ref": "#/definitions/core.JSONB"
                },
                "object": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                }
            }
        },
        "quote.QuotesResourceSubscriptionDataSubscriptionData": {
            "type": "object",
            "properties": {
                "created_at": {
                    "type": "string"
                },
                "description": {
                    "description": "The subscription's description, meant to be displayable to the customer. Use this field to optionally store an explanation of the subscription.",
                    "type": "string"
                },
                "effective_date": {
                    "description": "When creating a new subscription, the date of which the subscription schedule will start after the quote is accepted. This date is ignored if it is in the past when the quote is accepted. Measured in seconds since the Unix epoch.",
                    "type": "integer"
                },
                "id": {
                    "type": "string"
                },
                "livemode": {
                    "type": "boolean"
                },
                "metadata": {
                    "$ref": "#/definitions/core.JSONB"
                },
                "object": {
                    "type": "string"
                },
                "trial_period_days": {
                    "description": "Integer representing the number of trial period days before the customer is charged for the first time.",
                    "type": "integer"
                },
                "updated_at": {
                    "type": "string"
                }
            }
        },
        "quote.QuotesResourceTotalDetails": {
            "type": "object",
            "properties": {
                "amount_discount": {
                    "description": "This is the sum of all the discounts.",
                    "type": "integer"
                },
                "amount_shipping": {
                    "description": "This is the sum of all the shipping amounts.",
                    "type": "integer"
                },
                "amount_tax": {
                    "description": "This is the sum of all the tax amounts.",
                    "type": "integer"
                },
                "breakdown": {
                    "$ref": "#/definitions/quote.QuotesResourceTotalDetailsResourceBreakdown"
                },
                "created_at": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "livemode": {
                    "type": "boolean"
                },
                "metadata": {
                    "$ref": "#/definitions/core.JSONB"
                },
                "object": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                }
            }
        },
        "quote.QuotesResourceTotalDetailsResourceBreakdown": {
            "type": "object",
            "properties": {
                "created_at": {
                    "type": "string"
                },
                "discounts": {
                    "description": "The aggregated discounts.",
                    "type": "array",
                    "items": {
                        "type": "string",
                        "format": "uuid"
                    }
                },
                "id": {
                    "type": "string"
                },
                "livemode": {
                    "type": "boolean"
                },
                "metadata": {
                    "$ref": "#/definitions/core.JSONB"
                },
                "object": {
                    "type": "string"
                },
                "taxes": {
                    "description": "The aggregated tax amounts by rate.",
                    "type": "array",
                    "items": {
                        "type": "string",
                        "format": "uuid"
                    }
                },
                "updated_at": {
                    "type": "string"
                }
            }
        },
        "quote.QuotesResourceUpfront": {
            "type": "object",
            "properties": {
                "amount_subtotal": {
                    "description": "Total before any discounts or taxes are applied.",
                    "type": "integer"
                },
                "amount_total": {
                    "description": "Total after discounts and taxes are applied.",
                    "type": "integer"
                },
                "created_at": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "livemode": {
                    "type": "boolean"
                },
                "metadata": {
                    "$ref": "#/definitions/core.JSONB"
                },
                "object": {
                    "type": "string"
                },
                "total_details": {
                    "description": "LineItems    *Item                      `json:\"line_items,omitempty\"`",
                    "allOf": [
                        {
                            "$ref": "#/definitions/quote.QuotesResourceTotalDetails"
                        }
                    ]
                },
                "updated_at": {
                    "type": "string"
                }
            }
        },
        "radar.RadarOptions": {
            "type": "object",
            "properties": {
                "created_at": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "livemode": {
                    "type": "boolean"
                },
                "metadata": {
                    "$ref": "#/definitions/core.JSONB"
                },
                "object": {
                    "type": "string"
                },
                "session": {
                    "description": "A [Radar Session](https://stripe.com/docs/radar/radar-session) is a snapshot of the browser metadata and device details that help Radar make more accurate predictions on your payments.",
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                }
            }
        },
        "refund.Bind.request": {
            "type": "object",
            "properties": {
                "amount": {
                    "type": "integer"
                },
                "balance_transaction": {
                    "type": "string",
                    "format": "uuid"
                },
                "charge": {
                    "type": "string",
                    "format": "uuid"
                },
                "created_at": {
                    "type": "string"
                },
                "currency": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "failure_balance_transaction": {
                    "type": "string",
                    "format": "uuid"
                },
                "failure_reason": {
                    "$ref": "#/definitions/refund.FailureReason"
                },
                "id": {
                    "type": "string"
                },
                "instructions_email": {
                    "type": "string"
                },
                "livemode": {
                    "type": "boolean"
                },
                "metadata": {
                    "$ref": "#/definitions/core.JSONB"
                },
                "next_action": {
                    "type": "string",
                    "format": "uuid"
                },
                "object": {
                    "type": "string"
                },
                "payment_intent": {
                    "type": "string",
                    "format": "uuid"
                },
                "reason": {
                    "$ref": "#/definitions/refund.Reason"
                },
                "receipt_number": {
                    "type": "string"
                },
                "status": {
                    "$ref": "#/definitions/refund.Status"
                },
                "updated_at": {
                    "type": "string"
                }
            }
        },
        "refund.FailureReason": {
            "type": "string",
            "enum": [
                "lost_or_stolen_card",
                "expired_or_canceled_card",
                "unknown"
            ],
            "x-enum-varnames": [
                "FailureReasonLostOrStolenCard",
                "FailureReasonExpiredOrCanceledCard",
                "FailureReasonUnknown"
            ]
        },
        "refund.Reason": {
            "type": "string",
            "enum": [
                "duplicate",
                "fraudulent",
                "requested_by_customer",
                "expired_uncaptured_charge"
            ],
            "x-enum-varnames": [
                "ReasonDuplicate",
                "ReasonFraudulent",
                "ReasonRequestedByCustomer",
                "ReasonExpiredUncapturedCharge"
            ]
        },
        "refund.Refund": {
            "type": "object",
            "properties": {
                "amount": {
                    "type": "integer"
                },
                "balance_transaction": {
                    "type": "string",
                    "format": "uuid"
                },
                "charge": {
                    "type": "string",
                    "format": "uuid"
                },
                "created_at": {
                    "type": "string"
                },
                "currency": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "failure_balance_transaction": {
                    "type": "string",
                    "format": "uuid"
                },
                "failure_reason": {
                    "$ref": "#/definitions/refund.FailureReason"
                },
                "id": {
                    "type": "string"
                },
                "instructions_email": {
                    "type": "string"
                },
                "livemode": {
                    "type": "boolean"
                },
                "metadata": {
                    "$ref": "#/definitions/core.JSONB"
                },
                "next_action": {
                    "type": "string",
                    "format": "uuid"
                },
                "object": {
                    "type": "string"
                },
                "payment_intent": {
                    "type": "string",
                    "format": "uuid"
                },
                "reason": {
                    "$ref": "#/definitions/refund.Reason"
                },
                "receipt_number": {
                    "type": "string"
                },
                "status": {
                    "$ref": "#/definitions/refund.Status"
                },
                "updated_at": {
                    "type": "string"
                }
            }
        },
        "refund.Status": {
            "type": "string",
            "enum": [
                "pending",
                "requires_action",
                "succeeded",
                "failed",
                "canceled"
            ],
            "x-enum-varnames": [
                "StatusPending",
                "StatusRequiresAction",
                "StatusSucceeded",
                "StatusFailed",
                "StatusCanceled"
            ]
        },
        "review.Review": {
            "type": "object",
            "properties": {
                "billing_zip": {
                    "description": "The ZIP or postal code of the card used, if applicable.",
                    "type": "string"
                },
                "closed_reason": {
                    "description": "The reason the review was closed, or null if it has not yet been closed. One of `approved`, `refunded`, `refunded_as_fraud`, `disputed`, or `redacted`.",
                    "type": "string"
                },
                "created_at": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "ip_address": {
                    "description": "The IP address where the payment originated.",
                    "type": "string"
                },
                "ip_address_location": {
                    "type": "string",
                    "format": "uuid"
                },
                "livemode": {
                    "type": "boolean"
                },
                "metadata": {
                    "$ref": "#/definitions/core.JSONB"
                },
                "object": {
                    "type": "string"
                },
                "open": {
                    "description": "If `true`, the review needs action.",
                    "type": "boolean"
                },
                "opened_reason": {
                    "description": "The reason the review was opened. One of `rule` or `manual`.",
                    "type": "string"
                },
                "reason": {
                    "description": "The reason the review is currently open or closed. One of `rule`, `manual`, `approved`, `refunded`, `refunded_as_fraud`, `disputed`, or `redacted`.",
                    "type": "string"
                },
                "session": {
                    "type": "string",
                    "format": "uuid"
                },
                "updated_at": {
                    "type": "string"
                }
            }
        },
        "rule.Rule": {
            "type": "object",
            "properties": {
                "action": {
                    "description": "The action taken on the payment.",
                    "type": "string"
                },
                "created_at": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "livemode": {
                    "type": "boolean"
                },
                "metadata": {
                    "$ref": "#/definitions/core.JSONB"
                },
                "object": {
                    "type": "string"
                },
                "predicate": {
                    "description": "The predicate to evaluate the payment against.",
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                }
            }
        },
        "settings.InvoiceSettingCustomerSetting": {
            "type": "object",
            "properties": {
                "created_at": {
                    "type": "string"
                },
                "custom_fields": {
                    "description": "Default custom fields to be displayed on invoices for this customer.",
                    "type": "array",
                    "items": {
                        "type": "string",
                        "format": "uuid"
                    }
                },
                "footer": {
                    "description": "DefaultPaymentMethod method.PaymentMethod `json:\"default_payment_method,omitempty\"`\nDefault footer to be displayed on invoices for this customer.",
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "livemode": {
                    "type": "boolean"
                },
                "metadata": {
                    "$ref": "#/definitions/core.JSONB"
                },
                "object": {
                    "type": "string"
                },
                "rendering_options": {
                    "$ref": "#/definitions/settings.InvoiceSettingRenderingOptions"
                },
                "updated_at": {
                    "type": "string"
                }
            }
        },
        "settings.InvoiceSettingQuoteSetting": {
            "type": "object",
            "properties": {
                "created_at": {
                    "type": "string"
                },
                "days_until_due": {
                    "description": "Number of days within which a customer must pay invoices generated by this quote. This value will be `null` for quotes where `collection_method=charge_automatically`.",
                    "type": "integer"
                },
                "id": {
                    "type": "string"
                },
                "livemode": {
                    "type": "boolean"
                },
                "metadata": {
                    "$ref": "#/definitions/core.JSONB"
                },
                "object": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                }
            }
        },
        "settings.InvoiceSettingRenderingOptions": {
            "type": "object",
            "properties": {
                "amount_tax_display": {
                    "description": "How line-item prices and amounts will be displayed with respect to tax on invoice PDFs.",
                    "type": "string"
                },
                "created_at": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "livemode": {
                    "type": "boolean"
                },
                "metadata": {
                    "$ref": "#/definitions/core.JSONB"
                },
                "object": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                }
            }
        },
        "settings.InvoiceSettingSubscriptionScheduleSetting": {
            "type": "object",
            "properties": {
                "created_at": {
                    "type": "string"
                },
                "days_until_due": {
                    "description": "Number of days within which a customer must pay invoices generated by this subscription schedule. This value will be `null` for subscription schedules where `billing=charge_automatically`.",
                    "type": "integer"
                },
                "id": {
                    "type": "string"
                },
                "livemode": {
                    "type": "boolean"
                },
                "metadata": {
                    "$ref": "#/definitions/core.JSONB"
                },
                "object": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                }
            }
        },
        "setupIntent.Bind.request": {
            "type": "object",
            "properties": {
                "attach_to_self": {
                    "type": "boolean"
                },
                "cancellation_reason": {
                    "$ref": "#/definitions/setupIntent.CancellationReason"
                },
                "client_secret": {
                    "type": "string"
                },
                "created_at": {
                    "type": "string"
                },
                "customer": {
                    "type": "string",
                    "format": "uuid"
                },
                "description": {
                    "type": "string"
                },
                "flow_directions": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "id": {
                    "type": "string"
                },
                "last_setup_error": {
                    "$ref": "#/definitions/errors.ApiErrors"
                },
                "livemode": {
                    "type": "boolean"
                },
                "mandate": {
                    "type": "string",
                    "format": "uuid"
                },
                "metadata": {
                    "$ref": "#/definitions/core.JSONB"
                },
                "next_action": {
                    "$ref": "#/definitions/setupIntent.SetupIntentNextAction"
                },
                "object": {
                    "type": "string"
                },
                "payment_method": {
                    "type": "string",
                    "format": "uuid"
                },
                "payment_method_types": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "single_use_mandate": {
                    "type": "string",
                    "format": "uuid"
                },
                "status": {
                    "$ref": "#/definitions/setupIntent.Status"
                },
                "updated_at": {
                    "type": "string"
                },
                "usage": {
                    "$ref": "#/definitions/setupIntent.Usage"
                }
            }
        },
        "setupIntent.CancellationReason": {
            "type": "string",
            "enum": [
                "abandoned",
                "requested_by_customer",
                "duplicate"
            ],
            "x-enum-varnames": [
                "CancellationReasonAbandoned",
                "CancellationReasonRequestedByCustomer",
                "CancellationReasonDuplicate"
            ]
        },
        "setupIntent.MicrodepositType": {
            "type": "string",
            "enum": [
                "descriptor_code",
                "amounts"
            ],
            "x-enum-varnames": [
                "MicrodepositTypeDescriptorCode",
                "MicrodepositTypeAmounts"
            ]
        },
        "setupIntent.SetupIntent": {
            "type": "object",
            "properties": {
                "attach_to_self": {
                    "type": "boolean"
                },
                "cancellation_reason": {
                    "$ref": "#/definitions/setupIntent.CancellationReason"
                },
                "client_secret": {
                    "type": "string"
                },
                "created_at": {
                    "type": "string"
                },
                "customer": {
                    "$ref": "#/definitions/customer.Customer"
                },
                "description": {
                    "type": "string"
                },
                "flow_directions": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "id": {
                    "type": "string"
                },
                "last_setup_error": {
                    "$ref": "#/definitions/errors.ApiErrors"
                },
                "livemode": {
                    "type": "boolean"
                },
                "mandate": {
                    "$ref": "#/definitions/mandate.Mandate"
                },
                "metadata": {
                    "$ref": "#/definitions/core.JSONB"
                },
                "next_action": {
                    "$ref": "#/definitions/setupIntent.SetupIntentNextAction"
                },
                "object": {
                    "type": "string"
                },
                "payment_method": {
                    "$ref": "#/definitions/method.PaymentMethod"
                },
                "payment_method_types": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "single_use_mandate": {
                    "$ref": "#/definitions/mandate.Mandate"
                },
                "status": {
                    "$ref": "#/definitions/setupIntent.Status"
                },
                "updated_at": {
                    "type": "string"
                },
                "usage": {
                    "$ref": "#/definitions/setupIntent.Usage"
                }
            }
        },
        "setupIntent.SetupIntentNextAction": {
            "type": "object",
            "properties": {
                "created_at": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "livemode": {
                    "type": "boolean"
                },
                "metadata": {
                    "$ref": "#/definitions/core.JSONB"
                },
                "object": {
                    "type": "string"
                },
                "redirect_to_url_return_url": {
                    "type": "string"
                },
                "redirect_to_url_url": {
                    "type": "string"
                },
                "type": {
                    "$ref": "#/definitions/setupIntent.Type"
                },
                "updated_at": {
                    "type": "string"
                },
                "use_stripe_sdk": {
                    "$ref": "#/definitions/core.JSONB"
                },
                "verify_with_microdeposits": {
                    "$ref": "#/definitions/setupIntent.SetupIntentNextActionVerifyWithMicrodeposits"
                }
            }
        },
        "setupIntent.SetupIntentNextActionVerifyWithMicrodeposits": {
            "type": "object",
            "properties": {
                "arrival_date": {
                    "type": "integer"
                },
                "created_at": {
                    "type": "string"
                },
                "hosted_verification_url": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "livemode": {
                    "type": "boolean"
                },
                "metadata": {
                    "$ref": "#/definitions/core.JSONB"
                },
                "microdeposit_type": {
                    "$ref": "#/definitions/setupIntent.MicrodepositType"
                },
                "object": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                }
            }
        },
        "setupIntent.Status": {
            "type": "string",
            "enum": [
                "requires_payment_method",
                "requires_confirmation",
                "requires_action",
                "processing",
                "succeeded",
                "failed",
                "abandoned"
            ],
            "x-enum-varnames": [
                "StatusRequiresPaymentMethod",
                "StatusRequiresConfirmation",
                "StatusRequiresAction",
                "StatusProcessing",
                "StatusSucceeded",
                "StatusFailed",
                "StatusAbandoned"
            ]
        },
        "setupIntent.Type": {
            "type": "string",
            "enum": [
                "redirect_to_url",
                "use_stripe_sdk",
                "alipay_handle_redirect",
                "oxxo_display_details",
                "verify_with_microdeposits"
            ],
            "x-enum-varnames": [
                "TypeRedirectToUrl",
                "TypeUseStripeSdk",
                "TypeAlipayHandleRedirect",
                "TypeOxxoDisplayDetails",
                "TypeVerifyWithMicrodeposits"
            ]
        },
        "setupIntent.Usage": {
            "type": "string",
            "enum": [
                "off_session",
                "on_session"
            ],
            "x-enum-varnames": [
                "UsageOffSession",
                "UsageOnSession"
            ]
        },
        "source.Bind.request": {
            "type": "object",
            "properties": {
                "ach_credit_transfer": {
                    "$ref": "#/definitions/types.SourceTypeAchCreditTransfer"
                },
                "ach_debit": {
                    "$ref": "#/definitions/types.SourceTypeAchDebit"
                },
                "acss_debit": {
                    "$ref": "#/definitions/types.SourceTypeAcssDebit"
                },
                "alipay": {
                    "$ref": "#/definitions/types.SourceTypeAlipay"
                },
                "amount": {
                    "type": "integer"
                },
                "au_becs_debit": {
                    "$ref": "#/definitions/types.SourceTypeAuBecsDebit"
                },
                "bancontact": {
                    "$ref": "#/definitions/types.SourceTypeBancontact"
                },
                "card": {
                    "$ref": "#/definitions/types.SourceTypeCard"
                },
                "card_present": {
                    "$ref": "#/definitions/types.SourceTypeCardPresent"
                },
                "client_secret": {
                    "type": "string"
                },
                "code_verification": {
                    "$ref": "#/definitions/source.SourceCodeVerificationFlow"
                },
                "created_at": {
                    "type": "string"
                },
                "currency": {
                    "type": "string"
                },
                "customer": {
                    "type": "string",
                    "format": "uuid"
                },
                "eps": {
                    "$ref": "#/definitions/types.SourceTypeEps"
                },
                "flow": {
                    "$ref": "#/definitions/source.Flow"
                },
                "giropay": {
                    "$ref": "#/definitions/types.SourceTypeGiropay"
                },
                "id": {
                    "type": "string"
                },
                "ideal": {
                    "$ref": "#/definitions/types.SourceTypeIdeal"
                },
                "klarna": {
                    "$ref": "#/definitions/types.SourceTypeKlarna"
                },
                "livemode": {
                    "type": "boolean"
                },
                "metadata": {
                    "$ref": "#/definitions/core.JSONB"
                },
                "multibanco": {
                    "$ref": "#/definitions/types.SourceTypeMultibanco"
                },
                "object": {
                    "type": "string"
                },
                "owner": {
                    "$ref": "#/definitions/source.SourceOwner"
                },
                "p24": {
                    "$ref": "#/definitions/types.SourceTypeP24"
                },
                "receiver": {
                    "$ref": "#/definitions/source.SourceReceiverFlow"
                },
                "redirect": {
                    "$ref": "#/definitions/source.SourceRedirectFlow"
                },
                "sepa_debit": {
                    "$ref": "#/definitions/types.SourceTypeSepaDebit"
                },
                "sofort": {
                    "$ref": "#/definitions/types.SourceTypeSofort"
                },
                "source_order": {
                    "$ref": "#/definitions/source.SourceOrder"
                },
                "statement_descriptor": {
                    "type": "string"
                },
                "status": {
                    "$ref": "#/definitions/source.Status"
                },
                "three_d_secure": {
                    "$ref": "#/definitions/types.SourceTypeThreeDSecure"
                },
                "type": {
                    "$ref": "#/definitions/source.Type"
                },
                "updated_at": {
                    "type": "string"
                },
                "usage": {
                    "$ref": "#/definitions/source.Usage"
                },
                "wechat": {
                    "$ref": "#/definitions/types.SourceTypeWechat"
                }
            }
        },
        "source.CodeStatus": {
            "type": "string",
            "enum": [
                "pending",
                "attempts_remaining",
                "succeeded",
                "failed "
            ],
            "x-enum-varnames": [
                "CodeStatusPending",
                "CodeStatusAttemptsRemaining",
                "CodeStatusSucceeded",
                "CodeStatusFailed"
            ]
        },
        "source.Flow": {
            "type": "string",
            "enum": [
                "redirect",
                "receiver",
                "code_verification",
                "none"
            ],
            "x-enum-varnames": [
                "FlowRedirect",
                "FlowReceiver",
                "FlowCodeVerification",
                "FlowNone"
            ]
        },
        "source.RefundAttributesMethod": {
            "type": "string",
            "enum": [
                "email",
                "manual",
                "none"
            ],
            "x-enum-varnames": [
                "RefundAttributesMethodEmail",
                "RefundAttributesMethodManual",
                "RefundAttributesMethodNone"
            ]
        },
        "source.RefundAttributesStatus": {
            "type": "string",
            "enum": [
                "missing",
                "requested",
                "available"
            ],
            "x-enum-varnames": [
                "RefundAttributesStatusMissing",
                "RefundAttributesStatusRequested",
                "RefundAttributesStatusAvailable"
            ]
        },
        "source.Source": {
            "type": "object",
            "properties": {
                "ach_credit_transfer": {
                    "$ref": "#/definitions/types.SourceTypeAchCreditTransfer"
                },
                "ach_debit": {
                    "$ref": "#/definitions/types.SourceTypeAchDebit"
                },
                "acss_debit": {
                    "$ref": "#/definitions/types.SourceTypeAcssDebit"
                },
                "alipay": {
                    "$ref": "#/definitions/types.SourceTypeAlipay"
                },
                "amount": {
                    "type": "integer"
                },
                "au_becs_debit": {
                    "$ref": "#/definitions/types.SourceTypeAuBecsDebit"
                },
                "bancontact": {
                    "$ref": "#/definitions/types.SourceTypeBancontact"
                },
                "card": {
                    "$ref": "#/definitions/types.SourceTypeCard"
                },
                "card_present": {
                    "$ref": "#/definitions/types.SourceTypeCardPresent"
                },
                "client_secret": {
                    "type": "string"
                },
                "code_verification": {
                    "$ref": "#/definitions/source.SourceCodeVerificationFlow"
                },
                "created_at": {
                    "type": "string"
                },
                "currency": {
                    "type": "string"
                },
                "customer": {
                    "$ref": "#/definitions/customer.Customer"
                },
                "eps": {
                    "$ref": "#/definitions/types.SourceTypeEps"
                },
                "flow": {
                    "$ref": "#/definitions/source.Flow"
                },
                "giropay": {
                    "$ref": "#/definitions/types.SourceTypeGiropay"
                },
                "id": {
                    "type": "string"
                },
                "ideal": {
                    "$ref": "#/definitions/types.SourceTypeIdeal"
                },
                "klarna": {
                    "$ref": "#/definitions/types.SourceTypeKlarna"
                },
                "livemode": {
                    "type": "boolean"
                },
                "metadata": {
                    "$ref": "#/definitions/core.JSONB"
                },
                "multibanco": {
                    "$ref": "#/definitions/types.SourceTypeMultibanco"
                },
                "object": {
                    "type": "string"
                },
                "owner": {
                    "$ref": "#/definitions/source.SourceOwner"
                },
                "p24": {
                    "$ref": "#/definitions/types.SourceTypeP24"
                },
                "receiver": {
                    "$ref": "#/definitions/source.SourceReceiverFlow"
                },
                "redirect": {
                    "$ref": "#/definitions/source.SourceRedirectFlow"
                },
                "sepa_debit": {
                    "$ref": "#/definitions/types.SourceTypeSepaDebit"
                },
                "sofort": {
                    "$ref": "#/definitions/types.SourceTypeSofort"
                },
                "source_order": {
                    "$ref": "#/definitions/source.SourceOrder"
                },
                "statement_descriptor": {
                    "type": "string"
                },
                "status": {
                    "$ref": "#/definitions/source.Status"
                },
                "three_d_secure": {
                    "$ref": "#/definitions/types.SourceTypeThreeDSecure"
                },
                "type": {
                    "$ref": "#/definitions/source.Type"
                },
                "updated_at": {
                    "type": "string"
                },
                "usage": {
                    "$ref": "#/definitions/source.Usage"
                },
                "wechat": {
                    "$ref": "#/definitions/types.SourceTypeWechat"
                }
            }
        },
        "source.SourceCodeVerificationFlow": {
            "type": "object",
            "properties": {
                "attempts_remaining": {
                    "type": "integer"
                },
                "created_at": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "livemode": {
                    "type": "boolean"
                },
                "metadata": {
                    "$ref": "#/definitions/core.JSONB"
                },
                "object": {
                    "type": "string"
                },
                "status": {
                    "$ref": "#/definitions/source.CodeStatus"
                },
                "updated_at": {
                    "type": "string"
                }
            }
        },
        "source.SourceOrder": {
            "type": "object",
            "properties": {
                "amount": {
                    "type": "integer"
                },
                "created_at": {
                    "type": "string"
                },
                "currency": {
                    "type": "string"
                },
                "email": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "items": {
                    "type": "array",
                    "items": {
                        "type": "string",
                        "format": "uuid"
                    }
                },
                "livemode": {
                    "type": "boolean"
                },
                "metadata": {
                    "$ref": "#/definitions/core.JSONB"
                },
                "object": {
                    "type": "string"
                },
                "shipping": {
                    "$ref": "#/definitions/address.Shipping"
                },
                "updated_at": {
                    "type": "string"
                }
            }
        },
        "source.SourceOwner": {
            "type": "object",
            "properties": {
                "address": {
                    "$ref": "#/definitions/address.Address"
                },
                "created_at": {
                    "type": "string"
                },
                "email": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "livemode": {
                    "type": "boolean"
                },
                "metadata": {
                    "$ref": "#/definitions/core.JSONB"
                },
                "name": {
                    "type": "string"
                },
                "object": {
                    "type": "string"
                },
                "phone": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                },
                "verified_address": {
                    "$ref": "#/definitions/address.Address"
                },
                "verified_email": {
                    "type": "string"
                },
                "verified_name": {
                    "type": "string"
                },
                "verified_phone": {
                    "type": "string"
                }
            }
        },
        "source.SourceReceiverFlow": {
            "type": "object",
            "properties": {
                "address": {
                    "type": "string"
                },
                "amount_charged": {
                    "type": "integer"
                },
                "amount_received": {
                    "type": "integer"
                },
                "amount_returned": {
                    "type": "integer"
                },
                "created_at": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "livemode": {
                    "type": "boolean"
                },
                "metadata": {
                    "$ref": "#/definitions/core.JSONB"
                },
                "object": {
                    "type": "string"
                },
                "refund_attributes_method": {
                    "$ref": "#/definitions/source.RefundAttributesMethod"
                },
                "refund_attributes_status": {
                    "$ref": "#/definitions/source.RefundAttributesStatus"
                },
                "updated_at": {
                    "type": "string"
                }
            }
        },
        "source.SourceRedirectFlow": {
            "type": "object",
            "properties": {
                "created_at": {
                    "type": "string"
                },
                "failure_reason": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "livemode": {
                    "type": "boolean"
                },
                "metadata": {
                    "$ref": "#/definitions/core.JSONB"
                },
                "object": {
                    "type": "string"
                },
                "return_url": {
                    "type": "string"
                },
                "status": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                },
                "url": {
                    "type": "string"
                }
            }
        },
        "source.Status": {
            "type": "string",
            "enum": [
                "canceled",
                "chargeable",
                "consumed",
                "failed",
                "pending"
            ],
            "x-enum-varnames": [
                "StatusCanceled",
                "StatusChargeable",
                "StatusConsumed",
                "StatusFailed",
                "StatusPending"
            ]
        },
        "source.Type": {
            "type": "string",
            "enum": [
                "ach_reusable_transfer",
                "ach_debit",
                "alipay",
                "bancontact",
                "card",
                "card_present",
                "eps",
                "giropay",
                "ideal",
                "multibanco",
                "klarna",
                "p24",
                "sepa_debit",
                "sofort",
                "three_d_secure",
                "wechat"
            ],
            "x-enum-varnames": [
                "TypeAchreusableTransfer",
                "TypeAchDebit",
                "TypeAlipay",
                "TypeBancontact",
                "TypeCard",
                "TypeCardPresent",
                "TypeEps",
                "TypeGiropay",
                "TypeIdeal",
                "TypeMultibanco",
                "TypeKlarna",
                "TypeP24",
                "TypeSepaDebit",
                "TypeSofort",
                "TypeThreeDSecure",
                "TypeWechat"
            ]
        },
        "source.Usage": {
            "type": "string",
            "enum": [
                "reusable",
                "single_use"
            ],
            "x-enum-varnames": [
                "UsageReusable",
                "UsageSingleUse"
            ]
        },
        "subscription.Bind.request": {
            "type": "object",
            "properties": {
                "automatic_tax": {
                    "type": "boolean"
                },
                "billing_cycle_anchor": {
                    "description": "Determines the date of the first full invoice, and, for plans with `month` or `year` intervals, the day of the month for subsequent invoices. The timestamp is in UTC format.",
                    "type": "integer"
                },
                "billing_thresholds": {
                    "$ref": "#/definitions/subscription.SubscriptionBillingThresholds"
                },
                "cancel_at": {
                    "description": "A date in the future at which the subscription will automatically get canceled",
                    "type": "integer"
                },
                "cancel_at_period_end": {
                    "description": "If the subscription has been canceled with the `at_period_end` flag set to `true`, `cancel_at_period_end` on the subscription will be true. You can use this attribute to determine whether a subscription that has a status of active is scheduled to be canceled at the end of the current period.",
                    "type": "boolean"
                },
                "canceled_at": {
                    "description": "If the subscription has been canceled, the date of that cancellation. If the subscription was canceled with `cancel_at_period_end`, `canceled_at` will reflect the time of the most recent update request, not the end of the subscription period when the subscription is automatically moved to a canceled state.",
                    "type": "integer"
                },
                "collection_method": {
                    "description": "Either `charge_automatically`, or `send_invoice`. When charging automatically, Stripe will attempt to pay this subscription at the end of the cycle using the default source attached to the customer. When sending an invoice, Stripe will email your customer an invoice with payment instructions and mark the subscription as `active`.",
                    "type": "string"
                },
                "created_at": {
                    "type": "string"
                },
                "currency": {
                    "description": "Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).",
                    "type": "string"
                },
                "current_period_end": {
                    "description": "End of the current period that the subscription has been invoiced for. At the end of this period, a new invoice will be created.",
                    "type": "integer"
                },
                "current_period_start": {
                    "description": "Start of the current period that the subscription has been invoiced for.",
                    "type": "integer"
                },
                "customer": {
                    "type": "string",
                    "format": "uuid"
                },
                "days_until_due": {
                    "description": "Number of days a customer has to pay invoices generated by this subscription. This value will be `null` for subscriptions where `collection_method=charge_automatically`.",
                    "type": "integer"
                },
                "default_payment_method": {
                    "type": "string",
                    "format": "uuid"
                },
                "default_tax_rates": {
                    "description": "The tax rates that will apply to any subscription item that does not have `tax_rates` set. Invoices created will have their `default_tax_rates` populated from the subscription.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/tax.TaxRate"
                        }
                    ]
                },
                "description": {
                    "description": "The subscription's description, meant to be displayable to the customer. Use this field to optionally store an explanation of the subscription for rendering in Stripe surfaces.",
                    "type": "string"
                },
                "discount": {
                    "$ref": "#/definitions/discount.Discount"
                },
                "ended_at": {
                    "description": "If the subscription has ended, the date the subscription ended.",
                    "type": "integer"
                },
                "id": {
                    "type": "string"
                },
                "livemode": {
                    "type": "boolean"
                },
                "metadata": {
                    "$ref": "#/definitions/core.JSONB"
                },
                "next_pending_invoice_item_invoice": {
                    "description": "Specifies the approximate timestamp on which any pending invoice items will be billed according to the schedule provided at `pending_invoice_item_interval`.",
                    "type": "integer"
                },
                "object": {
                    "type": "string"
                },
                "pause_collection": {
                    "$ref": "#/definitions/subscriptions.SubscriptionsResourcePauseCollection"
                },
                "payment_settings": {
                    "$ref": "#/definitions/subscriptions.SubscriptionsResourcePaymentSettings"
                },
                "pending_invoice_item_interval": {
                    "$ref": "#/definitions/subscription.SubscriptionPendingInvoiceItemInterval"
                },
                "pending_setup_intent": {
                    "type": "string",
                    "format": "uuid"
                },
                "pending_update": {
                    "$ref": "#/definitions/subscriptions.SubscriptionsResourcePendingUpdate"
                },
                "price": {
                    "type": "string",
                    "format": "uuid"
                },
                "schedule": {
                    "type": "string",
                    "format": "uuid"
                },
                "start_date": {
                    "description": "Date when the subscription was first created. The date might differ from the `created` date due to backdating.",
                    "type": "integer"
                },
                "status": {
                    "description": "Possible values are `incomplete`, `incomplete_expired`, `trialing`, `active`, `past_due`, `canceled`, or `unpaid`.   For `collection_method=charge_automatically` a subscription moves into `incomplete` if the initial payment attempt fails. A subscription in this state can only have metadata and default_source updated. Once the first invoice is paid, the subscription moves into an `active` state. If the first invoice is not paid within 23 hours, the subscription transitions to `incomplete_expired`. This is a terminal state, the open invoice will be voided and no further invoices will be generated.   A subscription that is currently in a trial period is `trialing` and moves to `active` when the trial period is over.   If subscription `collection_method=charge_automatically` it becomes `past_due` when payment to renew it fails and `canceled` or `unpaid` (depending on your subscriptions settings) when Stripe has exhausted all payment retry attempts.   If subscription `collection_method=send_invoice` it becomes `past_due` when its invoice is not paid by the due date, and `canceled` or `unpaid` if it is still not paid by an additional deadline after that. Note that when a subscription has a status of `unpaid`, no subsequent invoices will be attempted (invoices will be created, but then immediately automatically closed). After receiving updated payment information from a customer, you may choose to reopen and pay their closed invoices.",
                    "type": "string"
                },
                "trial_end": {
                    "description": "If the subscription has a trial, the end of that trial.",
                    "type": "integer"
                },
                "trial_start": {
                    "description": "If the subscription has a trial, the beginning of that trial.",
                    "type": "integer"
                },
                "updated_at": {
                    "type": "string"
                }
            }
        },
        "subscription.Subscription": {
            "type": "object",
            "properties": {
                "automatic_tax": {
                    "type": "boolean"
                },
                "billing_cycle_anchor": {
                    "description": "Determines the date of the first full invoice, and, for plans with `month` or `year` intervals, the day of the month for subsequent invoices. The timestamp is in UTC format.",
                    "type": "integer"
                },
                "billing_thresholds": {
                    "$ref": "#/definitions/subscription.SubscriptionBillingThresholds"
                },
                "cancel_at": {
                    "description": "A date in the future at which the subscription will automatically get canceled",
                    "type": "integer"
                },
                "cancel_at_period_end": {
                    "description": "If the subscription has been canceled with the `at_period_end` flag set to `true`, `cancel_at_period_end` on the subscription will be true. You can use this attribute to determine whether a subscription that has a status of active is scheduled to be canceled at the end of the current period.",
                    "type": "boolean"
                },
                "canceled_at": {
                    "description": "If the subscription has been canceled, the date of that cancellation. If the subscription was canceled with `cancel_at_period_end`, `canceled_at` will reflect the time of the most recent update request, not the end of the subscription period when the subscription is automatically moved to a canceled state.",
                    "type": "integer"
                },
                "collection_method": {
                    "description": "Either `charge_automatically`, or `send_invoice`. When charging automatically, Stripe will attempt to pay this subscription at the end of the cycle using the default source attached to the customer. When sending an invoice, Stripe will email your customer an invoice with payment instructions and mark the subscription as `active`.",
                    "type": "string"
                },
                "created_at": {
                    "type": "string"
                },
                "currency": {
                    "description": "Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).",
                    "type": "string"
                },
                "current_period_end": {
                    "description": "End of the current period that the subscription has been invoiced for. At the end of this period, a new invoice will be created.",
                    "type": "integer"
                },
                "current_period_start": {
                    "description": "Start of the current period that the subscription has been invoiced for.",
                    "type": "integer"
                },
                "customer": {
                    "$ref": "#/definitions/customer.Customer"
                },
                "days_until_due": {
                    "description": "Number of days a customer has to pay invoices generated by this subscription. This value will be `null` for subscriptions where `collection_method=charge_automatically`.",
                    "type": "integer"
                },
                "default_payment_method": {
                    "$ref": "#/definitions/method.PaymentMethod"
                },
                "default_tax_rates": {
                    "description": "The tax rates that will apply to any subscription item that does not have `tax_rates` set. Invoices created will have their `default_tax_rates` populated from the subscription.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/tax.TaxRate"
                        }
                    ]
                },
                "description": {
                    "description": "The subscription's description, meant to be displayable to the customer. Use this field to optionally store an explanation of the subscription for rendering in Stripe surfaces.",
                    "type": "string"
                },
                "discount": {
                    "$ref": "#/definitions/discount.Discount"
                },
                "ended_at": {
                    "description": "If the subscription has ended, the date the subscription ended.",
                    "type": "integer"
                },
                "id": {
                    "type": "string"
                },
                "livemode": {
                    "type": "boolean"
                },
                "metadata": {
                    "$ref": "#/definitions/core.JSONB"
                },
                "next_pending_invoice_item_invoice": {
                    "description": "Specifies the approximate timestamp on which any pending invoice items will be billed according to the schedule provided at `pending_invoice_item_interval`.",
                    "type": "integer"
                },
                "object": {
                    "type": "string"
                },
                "pause_collection": {
                    "$ref": "#/definitions/subscriptions.SubscriptionsResourcePauseCollection"
                },
                "payment_settings": {
                    "$ref": "#/definitions/subscriptions.SubscriptionsResourcePaymentSettings"
                },
                "pending_invoice_item_interval": {
                    "$ref": "#/definitions/subscription.SubscriptionPendingInvoiceItemInterval"
                },
                "pending_setup_intent": {
                    "$ref": "#/definitions/setupIntent.SetupIntent"
                },
                "pending_update": {
                    "$ref": "#/definitions/subscriptions.SubscriptionsResourcePendingUpdate"
                },
                "price": {
                    "$ref": "#/definitions/price.Price"
                },
                "schedule": {
                    "$ref": "#/definitions/subscriptionSchedule.SubscriptionSchedule"
                },
                "start_date": {
                    "description": "Date when the subscription was first created. The date might differ from the `created` date due to backdating.",
                    "type": "integer"
                },
                "status": {
                    "description": "Possible values are `incomplete`, `incomplete_expired`, `trialing`, `active`, `past_due`, `canceled`, or `unpaid`.   For `collection_method=charge_automatically` a subscription moves into `incomplete` if the initial payment attempt fails. A subscription in this state can only have metadata and default_source updated. Once the first invoice is paid, the subscription moves into an `active` state. If the first invoice is not paid within 23 hours, the subscription transitions to `incomplete_expired`. This is a terminal state, the open invoice will be voided and no further invoices will be generated.   A subscription that is currently in a trial period is `trialing` and moves to `active` when the trial period is over.   If subscription `collection_method=charge_automatically` it becomes `past_due` when payment to renew it fails and `canceled` or `unpaid` (depending on your subscriptions settings) when Stripe has exhausted all payment retry attempts.   If subscription `collection_method=send_invoice` it becomes `past_due` when its invoice is not paid by the due date, and `canceled` or `unpaid` if it is still not paid by an additional deadline after that. Note that when a subscription has a status of `unpaid`, no subsequent invoices will be attempted (invoices will be created, but then immediately automatically closed). After receiving updated payment information from a customer, you may choose to reopen and pay their closed invoices.",
                    "type": "string"
                },
                "trial_end": {
                    "description": "If the subscription has a trial, the end of that trial.",
                    "type": "integer"
                },
                "trial_start": {
                    "description": "If the subscription has a trial, the beginning of that trial.",
                    "type": "integer"
                },
                "updated_at": {
                    "type": "string"
                }
            }
        },
        "subscription.SubscriptionBillingThresholds": {
            "type": "object",
            "properties": {
                "amount_gte": {
                    "description": "Monetary threshold that triggers the subscription to create an invoice",
                    "type": "integer"
                },
                "created_at": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "livemode": {
                    "type": "boolean"
                },
                "metadata": {
                    "$ref": "#/definitions/core.JSONB"
                },
                "object": {
                    "type": "string"
                },
                "reset_billing_cycle_anchor": {
                    "description": "Indicates if the `billing_cycle_anchor` should be reset when a threshold is reached. If true, `billing_cycle_anchor` will be updated to the date/time the threshold was last reached; otherwise, the value will remain unchanged. This value may not be `true` if the subscription contains items with plans that have `aggregate_usage=last_ever`.",
                    "type": "boolean"
                },
                "updated_at": {
                    "type": "string"
                },
                "usage_gte": {
                    "description": "Usage threshold that triggers the subscription to create an invoice",
                    "type": "integer"
                }
            }
        },
        "subscription.SubscriptionPendingInvoiceItemInterval": {
            "type": "object",
            "properties": {
                "created_at": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "interval": {
                    "description": "Specifies invoicing frequency. Either `day`, `week`, `month` or `year`.",
                    "type": "string"
                },
                "interval_count": {
                    "description": "The number of intervals between invoices. For example, `interval=month` and `interval_count=3` bills every 3 months. Maximum of one year interval allowed (1 year, 12 months, or 52 weeks).",
                    "type": "integer"
                },
                "livemode": {
                    "type": "boolean"
                },
                "metadata": {
                    "$ref": "#/definitions/core.JSONB"
                },
                "object": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                }
            }
        },
        "subscriptionItem.Bind.request": {
            "type": "object",
            "properties": {
                "created_at": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "livemode": {
                    "type": "boolean"
                },
                "metadata": {
                    "$ref": "#/definitions/core.JSONB"
                },
                "object": {
                    "type": "string"
                },
                "price": {
                    "type": "string",
                    "format": "uuid"
                },
                "quantity": {
                    "description": "The [quantity](https://stripe.com/docs/subscriptions/quantities) of the plan to which the customer should be subscribed.",
                    "type": "integer"
                },
                "subscription": {
                    "type": "string",
                    "format": "uuid"
                },
                "tax_rates": {
                    "description": "The tax rates which apply to this `subscription_item`. When set, the `default_tax_rates` on the subscription do not apply to this `subscription_item`.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/tax.TaxRate"
                        }
                    ]
                },
                "updated_at": {
                    "type": "string"
                }
            }
        },
        "subscriptionItem.SubscriptionItem": {
            "type": "object",
            "properties": {
                "created_at": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "livemode": {
                    "type": "boolean"
                },
                "metadata": {
                    "$ref": "#/definitions/core.JSONB"
                },
                "object": {
                    "type": "string"
                },
                "price": {
                    "$ref": "#/definitions/price.Price"
                },
                "quantity": {
                    "description": "The [quantity](https://stripe.com/docs/subscriptions/quantities) of the plan to which the customer should be subscribed.",
                    "type": "integer"
                },
                "subscription": {
                    "$ref": "#/definitions/subscription.Subscription"
                },
                "tax_rates": {
                    "description": "The tax rates which apply to this `subscription_item`. When set, the `default_tax_rates` on the subscription do not apply to this `subscription_item`.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/tax.TaxRate"
                        }
                    ]
                },
                "updated_at": {
                    "type": "string"
                }
            }
        },
        "subscriptionSchedule.Bind.request": {
            "type": "object",
            "properties": {
                "canceled_at": {
                    "description": "Time at which the subscription schedule was canceled. Measured in seconds since the Unix epoch.",
                    "type": "integer"
                },
                "completed_at": {
                    "description": "Time at which the subscription schedule was completed. Measured in seconds since the Unix epoch.",
                    "type": "integer"
                },
                "created_at": {
                    "type": "string"
                },
                "customer": {
                    "type": "string",
                    "format": "uuid"
                },
                "default_settings": {
                    "$ref": "#/definitions/subscriptionSchedule.SubscriptionSchedulesResourceDefaultSettings"
                },
                "end_behavior": {
                    "description": "Behavior of the subscription schedule and underlying subscription when it ends. Possible values are `release` or `cancel` with the default being `release`. `release` will end the subscription schedule and keep the underlying subscription running.`cancel` will end the subscription schedule and cancel the underlying subscription.",
                    "type": "string"
                },
                "end_date": {
                    "description": "The end of this phase of the subscription schedule.",
                    "type": "integer"
                },
                "id": {
                    "type": "string"
                },
                "livemode": {
                    "type": "boolean"
                },
                "metadata": {
                    "$ref": "#/definitions/core.JSONB"
                },
                "object": {
                    "type": "string"
                },
                "phases": {
                    "description": "Configuration for the subscription schedule's phases.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/subscriptionSchedule.SubscriptionSchedulePhaseConfiguration"
                        }
                    ]
                },
                "released_at": {
                    "description": "Time at which the subscription schedule was released. Measured in seconds since the Unix epoch.",
                    "type": "string"
                },
                "released_subscription": {
                    "description": "ID of the subscription once managed by the subscription schedule (if it is released).",
                    "type": "string"
                },
                "start_date": {
                    "description": "The start of this phase of the subscription schedule.",
                    "type": "integer"
                },
                "status": {
                    "description": "The present status of the subscription schedule. Possible values are `not_started`, `active`, `completed`, `released`, and `canceled`. You can read more about the different states in our [behavior guide](https://stripe.com/docs/billing/subscriptions/subscription-schedules).",
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                }
            }
        },
        "subscriptionSchedule.SubscriptionSchedule": {
            "type": "object",
            "properties": {
                "canceled_at": {
                    "description": "Time at which the subscription schedule was canceled. Measured in seconds since the Unix epoch.",
                    "type": "integer"
                },
                "completed_at": {
                    "description": "Time at which the subscription schedule was completed. Measured in seconds since the Unix epoch.",
                    "type": "integer"
                },
                "created_at": {
                    "type": "string"
                },
                "customer": {
                    "$ref": "#/definitions/customer.Customer"
                },
                "default_settings": {
                    "$ref": "#/definitions/subscriptionSchedule.SubscriptionSchedulesResourceDefaultSettings"
                },
                "end_behavior": {
                    "description": "Behavior of the subscription schedule and underlying subscription when it ends. Possible values are `release` or `cancel` with the default being `release`. `release` will end the subscription schedule and keep the underlying subscription running.`cancel` will end the subscription schedule and cancel the underlying subscription.",
                    "type": "string"
                },
                "end_date": {
                    "description": "The end of this phase of the subscription schedule.",
                    "type": "integer"
                },
                "id": {
                    "type": "string"
                },
                "livemode": {
                    "type": "boolean"
                },
                "metadata": {
                    "$ref": "#/definitions/core.JSONB"
                },
                "object": {
                    "type": "string"
                },
                "phases": {
                    "description": "Configuration for the subscription schedule's phases.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/subscriptionSchedule.SubscriptionSchedulePhaseConfiguration"
                        }
                    ]
                },
                "released_at": {
                    "description": "Time at which the subscription schedule was released. Measured in seconds since the Unix epoch.",
                    "type": "string"
                },
                "released_subscription": {
                    "description": "ID of the subscription once managed by the subscription schedule (if it is released).",
                    "type": "string"
                },
                "start_date": {
                    "description": "The start of this phase of the subscription schedule.",
                    "type": "integer"
                },
                "status": {
                    "description": "The present status of the subscription schedule. Possible values are `not_started`, `active`, `completed`, `released`, and `canceled`. You can read more about the different states in our [behavior guide](https://stripe.com/docs/billing/subscriptions/subscription-schedules).",
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                }
            }
        },
        "subscriptionSchedule.SubscriptionSchedulePhaseConfiguration": {
            "type": "object",
            "properties": {
                "add_invoice_items": {
                    "description": "A list of prices and quantities that will generate invoice items appended to the next invoice for this phase.",
                    "type": "array",
                    "items": {
                        "type": "string",
                        "format": "uuid"
                    }
                },
                "automatic_tax": {
                    "type": "boolean"
                },
                "billing_cycle_anchor": {
                    "description": "Possible values are `phase_start` or `automatic`. If `phase_start` then billing cycle anchor of the subscription is set to the start of the phase when entering the phase. If `automatic` then the billing cycle anchor is automatically modified as needed when entering the phase. For more information, see the billing cycle [documentation](https://stripe.com/docs/billing/subscriptions/billing-cycle).",
                    "type": "string"
                },
                "collection_method": {
                    "description": "Either `charge_automatically`, or `send_invoice`. When charging automatically, Stripe will attempt to pay the underlying subscription at the end of each billing cycle using the default source attached to the customer. When sending an invoice, Stripe will email your customer an invoice with payment instructions and mark the subscription as `active`.",
                    "type": "string"
                },
                "coupon": {
                    "$ref": "#/definitions/coupon.Coupon"
                },
                "created_at": {
                    "type": "string"
                },
                "currency": {
                    "description": "Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).",
                    "type": "string"
                },
                "default_payment_method": {
                    "$ref": "#/definitions/method.PaymentMethod"
                },
                "default_tax_rates": {
                    "description": "The default tax rates to apply to the subscription during this phase of the subscription schedule.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/tax.TaxRate"
                        }
                    ]
                },
                "description": {
                    "description": "Subscription description, meant to be displayable to the customer. Use this field to optionally store an explanation of the subscription.",
                    "type": "string"
                },
                "end_date": {
                    "description": "The end of this phase of the subscription schedule.",
                    "type": "integer"
                },
                "id": {
                    "type": "string"
                },
                "invoice_settings": {
                    "$ref": "#/definitions/settings.InvoiceSettingSubscriptionScheduleSetting"
                },
                "items": {
                    "description": "Subscription items to configure the subscription to during this phase of the subscription schedule.",
                    "type": "array",
                    "items": {
                        "type": "string",
                        "format": "uuid"
                    }
                },
                "livemode": {
                    "type": "boolean"
                },
                "metadata": {
                    "$ref": "#/definitions/core.JSONB"
                },
                "object": {
                    "type": "string"
                },
                "proration_behavior": {
                    "description": "If the subscription schedule will prorate when transitioning to this phase. Possible values are `create_prorations` and `none`.",
                    "type": "string"
                },
                "start_date": {
                    "description": "The start of this phase of the subscription schedule.",
                    "type": "integer"
                },
                "trial_end": {
                    "description": "When the trial ends within the phase.",
                    "type": "integer"
                },
                "updated_at": {
                    "type": "string"
                }
            }
        },
        "subscriptionSchedule.SubscriptionSchedulesResourceDefaultSettings": {
            "type": "object",
            "properties": {
                "automatic_tax": {
                    "type": "boolean"
                },
                "billing_cycle_anchor": {
                    "description": "Possible values are `phase_start` or `automatic`. If `phase_start` then billing cycle anchor of the subscription is set to the start of the phase when entering the phase. If `automatic` then the billing cycle anchor is automatically modified as needed when entering the phase. For more information, see the billing cycle [documentation](https://stripe.com/docs/billing/subscriptions/billing-cycle).",
                    "type": "string"
                },
                "collection_method": {
                    "description": "Either `charge_automatically`, or `send_invoice`. When charging automatically, Stripe will attempt to pay the underlying subscription at the end of each billing cycle using the default source attached to the customer. When sending an invoice, Stripe will email your customer an invoice with payment instructions and mark the subscription as `active`.",
                    "type": "string"
                },
                "created_at": {
                    "type": "string"
                },
                "days_until_due": {
                    "description": "Number of days within which a customer must pay invoices generated by this subscription schedule. This value will be `null` for subscription schedules where `billing=charge_automatically`.",
                    "type": "integer"
                },
                "default_payment_method": {
                    "$ref": "#/definitions/method.PaymentMethod"
                },
                "description": {
                    "description": "Subscription description, meant to be displayable to the customer. Use this field to optionally store an explanation of the subscription.",
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "livemode": {
                    "type": "boolean"
                },
                "metadata": {
                    "$ref": "#/definitions/core.JSONB"
                },
                "object": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                }
            }
        },
        "subscriptions.SubscriptionsResourcePauseCollection": {
            "type": "object",
            "properties": {
                "behavior": {
                    "description": "The payment collection behavior for this subscription while paused. One of `keep_as_draft`, `mark_uncollectible`, or `void`.",
                    "type": "string"
                },
                "created_at": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "livemode": {
                    "type": "boolean"
                },
                "metadata": {
                    "$ref": "#/definitions/core.JSONB"
                },
                "object": {
                    "type": "string"
                },
                "resumes_at": {
                    "description": "The time after which the subscription will resume collecting payments.",
                    "type": "integer"
                },
                "updated_at": {
                    "type": "string"
                }
            }
        },
        "subscriptions.SubscriptionsResourcePaymentSettings": {
            "type": "object",
            "properties": {
                "created_at": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "livemode": {
                    "type": "boolean"
                },
                "metadata": {
                    "$ref": "#/definitions/core.JSONB"
                },
                "object": {
                    "type": "string"
                },
                "payment_method_options": {
                    "$ref": "#/definitions/options.SubscriptionsResourcePaymentMethodOptions"
                },
                "payment_method_types": {
                    "description": "The list of payment method types to provide to every invoice created by the subscription. If not set, Stripe attempts to automatically determine the types to use by looking at the invoice’s default payment method, the subscription’s default payment method, the customer’s default payment method, and your [invoice template settings](https://dashboard.stripe.com/settings/billing/invoice).",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "save_default_payment_method": {
                    "description": "Either `off`, or `on_subscription`. With `on_subscription` Stripe updates `subscription.default_payment_method` when a subscription payment succeeds.",
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                }
            }
        },
        "subscriptions.SubscriptionsResourcePendingUpdate": {
            "type": "object",
            "properties": {
                "billing_cycle_anchor": {
                    "description": "If the update is applied, determines the date of the first full invoice, and, for plans with `month` or `year` intervals, the day of the month for subsequent invoices. The timestamp is in UTC format.",
                    "type": "integer"
                },
                "created_at": {
                    "type": "string"
                },
                "expires_at": {
                    "description": "The point after which the changes reflected by this update will be discarded and no longer applied.",
                    "type": "integer"
                },
                "id": {
                    "type": "string"
                },
                "livemode": {
                    "type": "boolean"
                },
                "metadata": {
                    "$ref": "#/definitions/core.JSONB"
                },
                "object": {
                    "type": "string"
                },
                "trial_end": {
                    "description": "Unix timestamp representing the end of the trial period the customer will get before being charged for the first time, if the update is applied.",
                    "type": "integer"
                },
                "trial_from_plan": {
                    "description": "Indicates if a plan's `trial_period_days` should be applied to the subscription. Setting `trial_end` per subscription is preferred, and this defaults to `false`. Setting this flag to `true` together with `trial_end` is not allowed. See [Using trial periods on subscriptions](https://stripe.com/docs/billing/subscriptions/trials) to learn more.",
                    "type": "boolean"
                },
                "updated_at": {
                    "type": "string"
                }
            }
        },
        "tax.AutomaticTax": {
            "type": "object",
            "properties": {
                "created_at": {
                    "type": "string"
                },
                "enabled": {
                    "description": "Whether Stripe automatically computes tax on this invoice. Note that incompatible invoice items (invoice items with manually specified [tax rates](https://stripe.com/docs/api/tax_rates), negative amounts, or `tax_behavior=unspecified`) cannot be added to automatic tax invoices.",
                    "type": "boolean"
                },
                "id": {
                    "type": "string"
                },
                "livemode": {
                    "type": "boolean"
                },
                "metadata": {
                    "$ref": "#/definitions/core.JSONB"
                },
                "object": {
                    "type": "string"
                },
                "status": {
                    "description": "The status of the most recent automated tax calculation for this invoice.",
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                }
            }
        },
        "tax.Status": {
            "type": "string",
            "enum": [
                "pending",
                "verified",
                "unverified",
                "unavailable"
            ],
            "x-enum-varnames": [
                "StatusPending",
                "StatusVerified",
                "StatusUnverified",
                "StatusUnavailable"
            ]
        },
        "tax.TaxCode": {
            "type": "object",
            "properties": {
                "created_at": {
                    "type": "string"
                },
                "description": {
                    "description": "A detailed description of which types of products the tax code represents.",
                    "type": "string"
                },
                "id": {
                    "description": "Unique identifier for the object.",
                    "type": "string"
                },
                "livemode": {
                    "type": "boolean"
                },
                "metadata": {
                    "$ref": "#/definitions/core.JSONB"
                },
                "name": {
                    "description": "A short name for the tax code.",
                    "type": "string"
                },
                "object": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                }
            }
        },
        "tax.TaxId": {
            "type": "object",
            "properties": {
                "country": {
                    "description": "Two-letter ISO code representing the country of the tax ID.",
                    "type": "string"
                },
                "created_at": {
                    "type": "string"
                },
                "customer": {
                    "type": "string",
                    "format": "uuid"
                },
                "id": {
                    "type": "string"
                },
                "livemode": {
                    "type": "boolean"
                },
                "metadata": {
                    "$ref": "#/definitions/core.JSONB"
                },
                "object": {
                    "type": "string"
                },
                "status": {
                    "description": "Verification status, one of `pending`, `verified`, `unverified`, or `unavailable`.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/tax.Status"
                        }
                    ]
                },
                "type": {
                    "description": "The type of the tax ID, one of `eu_vat`, `br_cnpj`, `br_cpf`, `eu_oss_vat`, `gb_vat`, `nz_gst`, `au_abn`, `au_arn`, `in_gst`, `no_vat`, `za_vat`, `ch_vat`, `mx_rfc`, `sg_uen`, `ru_inn`, `ru_kpp`, `ca_bn`, `hk_br`, `es_cif`, `tw_vat`, `th_vat`, `jp_cn`, `jp_rn`, `jp_trn`, `li_uid`, `my_itn`, `us_ein`, `kr_brn`, `ca_qst`, `ca_gst_hst`, `ca_pst_bc`, `ca_pst_mb`, `ca_pst_sk`, `my_sst`, `sg_gst`, `ae_trn`, `cl_tin`, `sa_vat`, `id_npwp`, `my_frp`, `il_vat`, `ge_vat`, `ua_vat`, `is_vat`, `bg_uic`, `hu_tin`, `si_tin`, `ke_pin`, `tr_tin`, `eg_tin`, `ph_tin`, or `unknown`",
                    "allOf": [
                        {
                            "$ref": "#/definitions/tax.Type"
                        }
                    ]
                },
                "updated_at": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                },
                "verified_address": {
                    "description": "Verified address.",
                    "type": "string"
                },
                "verified_name": {
                    "description": "Verified name.",
                    "type": "string"
                }
            }
        },
        "tax.TaxRate": {
            "type": "object",
            "properties": {
                "active": {
                    "description": "Defaults to `true`. When set to `false`, this tax rate cannot be used with new applications or Checkout Sessions, but will still work for subscriptions and invoices that already have it set.",
                    "type": "boolean"
                },
                "amount": {
                    "description": "The amount, in %s, of the tax.",
                    "type": "integer"
                },
                "country": {
                    "description": "Two-letter country code ([ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2)).",
                    "type": "string"
                },
                "created_at": {
                    "type": "string"
                },
                "description": {
                    "description": "An arbitrary string attached to the tax rate for your internal use only. It will not be visible to your customers.",
                    "type": "string"
                },
                "display_name": {
                    "description": "The display name of the tax rates as it will appear to your customer on their receipt email, PDF, and the hosted invoice page.",
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "inclusive": {
                    "description": "This specifies if the tax rate is inclusive or exclusive.",
                    "type": "boolean"
                },
                "jurisdiction": {
                    "description": "The jurisdiction for the tax rate. You can use this label field for tax reporting purposes. It also appears on your customer’s invoice.",
                    "type": "string"
                },
                "livemode": {
                    "type": "boolean"
                },
                "metadata": {
                    "$ref": "#/definitions/core.JSONB"
                },
                "object": {
                    "type": "string"
                },
                "percentage": {
                    "description": "This represents the tax rate percent out of 100.",
                    "type": "number"
                },
                "state": {
                    "description": "[ISO 3166-2 subdivision code](https://en.wikipedia.org/wiki/ISO_3166-2:US), without country prefix. For example, \\\"NY\\\" for New York, United States.",
                    "type": "string"
                },
                "tax_type": {
                    "description": "The high-level tax type, such as `vat` or `sales_tax`.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/tax.TaxType"
                        }
                    ]
                },
                "updated_at": {
                    "type": "string"
                }
            }
        },
        "tax.TaxType": {
            "type": "string",
            "enum": [
                "vat",
                "sales_tax"
            ],
            "x-enum-varnames": [
                "TaxTypeVat",
                "TaxTypeSalesTax"
            ]
        },
        "tax.Type": {
            "type": "string",
            "enum": [
                "ae_trn",
                "au_abn",
                "au_arn",
                "bg_uic",
                "br_cnpj",
                "br_cpf",
                "ca_bn",
                "ca_gst_hst",
                "ca_pst_bc",
                "ca_pst_mb",
                "ca_pst_sk",
                "ca_qst",
                "ch_vat",
                "cl_tin",
                "eg_tin",
                "es_cif",
                "eu_oss_vat",
                "eu_vat",
                "gb_vat",
                "ge_vat",
                "hk_br",
                "hu_tin",
                "id_npwp",
                "il_vat",
                "in_gst",
                "is_vat",
                "jp_cn",
                "jp_rn",
                "jp_trn",
                "ke_pin",
                "kr_brn",
                "li_uid",
                "mx_rfc",
                "my_frp",
                "my_itn",
                "my_sst",
                "no_vat",
                "nz_gst",
                "ph_tin",
                "ru_inn",
                "ru_kpp",
                "sa_vat",
                "sg_gst",
                "sg_uen",
                "si_tin",
                "th_vat",
                "tr_tin",
                "tw_vat",
                "ua_vat",
                "us_ein",
                "za_vat",
                "unknown"
            ],
            "x-enum-varnames": [
                "TypeAeTrn",
                "TypeAuAbn",
                "TypeAuArn",
                "TypeBgUic",
                "TypeBrCnpj",
                "TypeBrCpf",
                "TypeCaBn",
                "TypeCaGst_hst",
                "TypeCaPst_bc",
                "TypeCaPst_mb",
                "TypeCaPst_sk",
                "TypeCaQst",
                "TypeChVat",
                "TypeClTin",
                "TypeEgTin",
                "TypeEsCif",
                "TypeEuOssVat",
                "TypeEuVat",
                "TypeGbVat",
                "TypeGeVat",
                "TypeHkBr",
                "TypeHuTin",
                "TypeIdNpwp",
                "TypeIlVat",
                "TypeInGst",
                "TypeIsVat",
                "TypeJpCn",
                "TypeJpRn",
                "TypeJpTrn",
                "TypeKePin",
                "TypeKrBrn",
                "TypeLiUid",
                "TypeMxRfc",
                "TypeMyFrp",
                "TypeMyItn",
                "TypeMySst",
                "TypeNoVat",
                "TypeNzGst",
                "TypePhTin",
                "TypeRuInn",
                "TypeRuKpp",
                "TypeSaVat",
                "TypeSgGst",
                "TypeSgUen",
                "TypeSiTin",
                "TypeThVat",
                "TypeTrTin",
                "TypeTwVat",
                "TypeUaVat",
                "TypeUsEin",
                "TypeZaVat",
                "TypeUnknown"
            ]
        },
        "types.SourceTypeAchCreditTransfer": {
            "type": "object",
            "properties": {
                "account_number": {
                    "type": "string"
                },
                "bank_name": {
                    "type": "string"
                },
                "created_at": {
                    "type": "string"
                },
                "fingerprint": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "livemode": {
                    "type": "boolean"
                },
                "metadata": {
                    "$ref": "#/definitions/core.JSONB"
                },
                "object": {
                    "type": "string"
                },
                "refund_account_holder_name": {
                    "type": "string"
                },
                "refund_account_holder_type": {
                    "type": "string"
                },
                "refund_routing_number": {
                    "type": "string"
                },
                "routing_number": {
                    "type": "string"
                },
                "swift_code": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                }
            }
        },
        "types.SourceTypeAchDebit": {
            "type": "object",
            "properties": {
                "bank_name": {
                    "type": "string"
                },
                "country": {
                    "type": "string"
                },
                "created_at": {
                    "type": "string"
                },
                "fingerprint": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "last4": {
                    "type": "string"
                },
                "livemode": {
                    "type": "boolean"
                },
                "metadata": {
                    "$ref": "#/definitions/core.JSONB"
                },
                "object": {
                    "type": "string"
                },
                "routing_number": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                }
            }
        },
        "types.SourceTypeAcssDebit": {
            "type": "object",
            "properties": {
                "bank_address_city": {
                    "type": "string"
                },
                "bank_address_line_1": {
                    "type": "string"
                },
                "bank_address_line_2": {
                    "type": "string"
                },
                "bank_address_postal_code": {
                    "type": "string"
                },
                "bank_name": {
                    "type": "string"
                },
                "category": {
                    "type": "string"
                },
                "country": {
                    "type": "string"
                },
                "created_at": {
                    "type": "string"
                },
                "fingerprint": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "last4": {
                    "type": "string"
                },
                "livemode": {
                    "type": "boolean"
                },
                "metadata": {
                    "$ref": "#/definitions/core.JSONB"
                },
                "object": {
                    "type": "string"
                },
                "routing_number": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                }
            }
        },
        "types.SourceTypeAlipay": {
            "type": "object",
            "properties": {
                "created_at": {
                    "type": "string"
                },
                "data_string": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "livemode": {
                    "type": "boolean"
                },
                "metadata": {
                    "$ref": "#/definitions/core.JSONB"
                },
                "native_url": {
                    "type": "string"
                },
                "object": {
                    "type": "string"
                },
                "statement_descriptor": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                }
            }
        },
        "types.SourceTypeAuBecsDebit": {
            "type": "object",
            "properties": {
                "bsb_number": {
                    "type": "string"
                },
                "created_at": {
                    "type": "string"
                },
                "fingerprint": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "last4": {
                    "type": "string"
                },
                "livemode": {
                    "type": "boolean"
                },
                "metadata": {
                    "$ref": "#/definitions/core.JSONB"
                },
                "object": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                }
            }
        },
        "types.SourceTypeBancontact": {
            "type": "object",
            "properties": {
                "bank_code": {
                    "type": "string"
                },
                "bank_name": {
                    "type": "string"
                },
                "bic": {
                    "type": "string"
                },
                "created_at": {
                    "type": "string"
                },
                "iban_last4": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "livemode": {
                    "type": "boolean"
                },
                "metadata": {
                    "$ref": "#/definitions/core.JSONB"
                },
                "object": {
                    "type": "string"
                },
                "preferred_language": {
                    "type": "string"
                },
                "statement_descriptor": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                }
            }
        },
        "types.SourceTypeCard": {
            "type": "object",
            "properties": {
                "address_line1_check": {
                    "type": "string"
                },
                "address_zip_check": {
                    "type": "string"
                },
                "brand": {
                    "type": "string"
                },
                "country": {
                    "type": "string"
                },
                "created_at": {
                    "type": "string"
                },
                "cvc_check": {
                    "type": "string"
                },
                "dynamic_last4": {
                    "type": "string"
                },
                "exp_month": {
                    "type": "integer"
                },
                "exp_year": {
                    "type": "integer"
                },
                "fingerprint": {
                    "type": "string"
                },
                "funding": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "last4": {
                    "type": "string"
                },
                "livemode": {
                    "type": "boolean"
                },
                "metadata": {
                    "$ref": "#/definitions/core.JSONB"
                },
                "name": {
                    "type": "string"
                },
                "object": {
                    "type": "string"
                },
                "three_d_secure": {
                    "type": "string"
                },
                "tokenization_method": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                }
            }
        },
        "types.SourceTypeCardPresent": {
            "type": "object",
            "properties": {
                "application_cryptogram": {
                    "type": "string"
                },
                "application_preferred_name": {
                    "type": "string"
                },
                "authorization_code": {
                    "type": "string"
                },
                "authorization_response_code": {
                    "type": "string"
                },
                "brand": {
                    "type": "string"
                },
                "country": {
                    "type": "string"
                },
                "created_at": {
                    "type": "string"
                },
                "cvm_type": {
                    "type": "string"
                },
                "data_type": {
                    "type": "string"
                },
                "dedicated_file_name": {
                    "type": "string"
                },
                "emv_auth_data": {
                    "type": "string"
                },
                "evidence_customer_signature": {
                    "type": "string"
                },
                "evidence_transaction_certificate": {
                    "type": "string"
                },
                "exp_month": {
                    "type": "integer"
                },
                "exp_year": {
                    "type": "integer"
                },
                "fingerprint": {
                    "type": "string"
                },
                "funding": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "last4": {
                    "type": "string"
                },
                "livemode": {
                    "type": "boolean"
                },
                "metadata": {
                    "$ref": "#/definitions/core.JSONB"
                },
                "object": {
                    "type": "string"
                },
                "pos_device_id": {
                    "type": "string"
                },
                "pos_entry_mode": {
                    "type": "string"
                },
                "read_method": {
                    "type": "string"
                },
                "reader": {
                    "type": "string"
                },
                "terminal_verification_results": {
                    "type": "string"
                },
                "transaction_status_information": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                }
            }
        },
        "types.SourceTypeEps": {
            "type": "object",
            "properties": {
                "created_at": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "livemode": {
                    "type": "boolean"
                },
                "metadata": {
                    "$ref": "#/definitions/core.JSONB"
                },
                "object": {
                    "type": "string"
                },
                "reference": {
                    "type": "string"
                },
                "statement_descriptor": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                }
            }
        },
        "types.SourceTypeGiropay": {
            "type": "object",
            "properties": {
                "bank_code": {
                    "type": "string"
                },
                "bank_name": {
                    "type": "string"
                },
                "bic": {
                    "type": "string"
                },
                "created_at": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "livemode": {
                    "type": "boolean"
                },
                "metadata": {
                    "$ref": "#/definitions/core.JSONB"
                },
                "object": {
                    "type": "string"
                },
                "statement_descriptor": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                }
            }
        },
        "types.SourceTypeIdeal": {
            "type": "object",
            "properties": {
                "bank": {
                    "type": "string"
                },
                "bic": {
                    "type": "string"
                },
                "created_at": {
                    "type": "string"
                },
                "iban_last4": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "livemode": {
                    "type": "boolean"
                },
                "metadata": {
                    "$ref": "#/definitions/core.JSONB"
                },
                "object": {
                    "type": "string"
                },
                "statement_descriptor": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                }
            }
        },
        "types.SourceTypeKlarna": {
            "type": "object",
            "properties": {
                "background_image_url": {
                    "type": "string"
                },
                "client_token": {
                    "type": "string"
                },
                "created_at": {
                    "type": "string"
                },
                "first_name": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "last_name": {
                    "type": "string"
                },
                "livemode": {
                    "type": "boolean"
                },
                "locale": {
                    "type": "string"
                },
                "logo_url": {
                    "type": "string"
                },
                "metadata": {
                    "$ref": "#/definitions/core.JSONB"
                },
                "object": {
                    "type": "string"
                },
                "page_title": {
                    "type": "string"
                },
                "pay_later_asset_urls_descriptive": {
                    "type": "string"
                },
                "pay_later_asset_urls_standard": {
                    "type": "string"
                },
                "pay_later_name": {
                    "type": "string"
                },
                "pay_later_redirect_url": {
                    "type": "string"
                },
                "pay_now_asset_urls_descriptive": {
                    "type": "string"
                },
                "pay_now_asset_urls_standard": {
                    "type": "string"
                },
                "pay_now_name": {
                    "type": "string"
                },
                "pay_now_redirect_url": {
                    "type": "string"
                },
                "pay_over_time_asset_urls_descriptive": {
                    "type": "string"
                },
                "pay_over_time_asset_urls_standard": {
                    "type": "string"
                },
                "pay_over_time_name": {
                    "type": "string"
                },
                "pay_over_time_redirect_url": {
                    "type": "string"
                },
                "payment_method_categories": {
                    "type": "string"
                },
                "purchase_country": {
                    "type": "string"
                },
                "purchase_type": {
                    "type": "string"
                },
                "redirect_url": {
                    "type": "string"
                },
                "shipping_delay": {
                    "type": "integer"
                },
                "shipping_first_name": {
                    "type": "string"
                },
                "shipping_last_name": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                }
            }
        },
        "types.SourceTypeMultibanco": {
            "type": "object",
            "properties": {
                "created_at": {
                    "type": "string"
                },
                "entity": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "livemode": {
                    "type": "boolean"
                },
                "metadata": {
                    "$ref": "#/definitions/core.JSONB"
                },
                "object": {
                    "type": "string"
                },
                "reference": {
                    "type": "string"
                },
                "refund_account_holder_address_city": {
                    "type": "string"
                },
                "refund_account_holder_address_country": {
                    "type": "string"
                },
                "refund_account_holder_address_line1": {
                    "type": "string"
                },
                "refund_account_holder_address_line2": {
                    "type": "string"
                },
                "refund_account_holder_address_postal_code": {
                    "type": "string"
                },
                "refund_account_holder_address_state": {
                    "type": "string"
                },
                "refund_account_holder_name": {
                    "type": "string"
                },
                "refund_iban": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                }
            }
        },
        "types.SourceTypeP24": {
            "type": "object",
            "properties": {
                "created_at": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "livemode": {
                    "type": "boolean"
                },
                "metadata": {
                    "$ref": "#/definitions/core.JSONB"
                },
                "object": {
                    "type": "string"
                },
                "reference": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                }
            }
        },
        "types.SourceTypeSepaDebit": {
            "type": "object",
            "properties": {
                "bank_code": {
                    "type": "string"
                },
                "branch_code": {
                    "type": "string"
                },
                "country": {
                    "type": "string"
                },
                "created_at": {
                    "type": "string"
                },
                "fingerprint": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "last4": {
                    "type": "string"
                },
                "livemode": {
                    "type": "boolean"
                },
                "mandate_reference": {
                    "type": "string"
                },
                "mandate_url": {
                    "type": "string"
                },
                "metadata": {
                    "$ref": "#/definitions/core.JSONB"
                },
                "object": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                }
            }
        },
        "types.SourceTypeSofort": {
            "type": "object",
            "properties": {
                "bank_code": {
                    "type": "string"
                },
                "bank_name": {
                    "type": "string"
                },
                "bic": {
                    "type": "string"
                },
                "country": {
                    "type": "string"
                },
                "created_at": {
                    "type": "string"
                },
                "iban_last4": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "livemode": {
                    "type": "boolean"
                },
                "metadata": {
                    "$ref": "#/definitions/core.JSONB"
                },
                "object": {
                    "type": "string"
                },
                "preferred_language": {
                    "type": "string"
                },
                "statement_descriptor": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                }
            }
        },
        "types.SourceTypeThreeDSecure": {
            "type": "object",
            "properties": {
                "address_line1_check": {
                    "type": "string"
                },
                "address_zip_check": {
                    "type": "string"
                },
                "authenticated": {
                    "type": "boolean"
                },
                "brand": {
                    "type": "string"
                },
                "card": {
                    "type": "string"
                },
                "country": {
                    "type": "string"
                },
                "created_at": {
                    "type": "string"
                },
                "customer": {
                    "type": "string"
                },
                "cvc_check": {
                    "type": "string"
                },
                "dynamic_last4": {
                    "type": "string"
                },
                "exp_month": {
                    "type": "integer"
                },
                "exp_year": {
                    "type": "integer"
                },
                "fingerprint": {
                    "type": "string"
                },
                "funding": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "last4": {
                    "type": "string"
                },
                "livemode": {
                    "type": "boolean"
                },
                "metadata": {
                    "$ref": "#/definitions/core.JSONB"
                },
                "name": {
                    "type": "string"
                },
                "object": {
                    "type": "string"
                },
                "three_d_secure": {
                    "type": "string"
                },
                "tokenization_method": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                }
            }
        },
        "types.SourceTypeWechat": {
            "type": "object",
            "properties": {
                "created_at": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "livemode": {
                    "type": "boolean"
                },
                "metadata": {
                    "$ref": "#/definitions/core.JSONB"
                },
                "object": {
                    "type": "string"
                },
                "prepay_id": {
                    "type": "string"
                },
                "qr_code_url": {
                    "type": "string"
                },
                "statement_descriptor": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                }
            }
        },
        "usageRecord.UsageRecord": {
            "type": "object",
            "properties": {
                "created_at": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "livemode": {
                    "type": "boolean"
                },
                "metadata": {
                    "$ref": "#/definitions/core.JSONB"
                },
                "object": {
                    "description": "String representing the object's type. Objects of the same type share the same value.",
                    "type": "string"
                },
                "quantity": {
                    "description": "The usage quantity for the specified date.",
                    "type": "integer"
                },
                "subscription_item": {
                    "description": "The ID of the subscription item this usage record contains data for.",
                    "type": "string"
                },
                "timestamp": {
                    "description": "The timestamp when this usage occurred.",
                    "type": "integer"
                },
                "updated_at": {
                    "type": "string"
                }
            }
        },
        "uuid.NullUUID": {
            "type": "object",
            "properties": {
                "uuid": {
                    "type": "string"
                },
                "valid": {
                    "description": "Valid is true if UUID is not NULL",
                    "type": "boolean"
                }
            }
        }
    }
}