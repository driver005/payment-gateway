// Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "termsOfService": "http://swagger.io/terms/",
        "contact": {
            "name": "API Support",
            "url": "http://www.swagger.io/support",
            "email": "support@swagger.io"
        },
        "license": {
            "name": "Apache 2.0",
            "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
        },
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/v1//subscription_items/{id}/usage_record_summaries": {
            "get": {
                "description": "Get all existing UsageRecords.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "UsageRecord"
                ],
                "summary": "get all existing UsageRecords",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/usageRecord.UsageRecord"
                            }
                        }
                    }
                }
            }
        },
        "/v1/balance": {
            "get": {
                "description": "Get Balance by given ID or 404 error.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Balance"
                ],
                "summary": "get Balance by given ID or 404 error.",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Balance ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/balance.Balance"
                        }
                    }
                }
            }
        },
        "/v1/balance_transactions": {
            "get": {
                "description": "Get all existing BalanceTransaction.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "BalanceTransaction"
                ],
                "summary": "get all existing BalanceTransaction",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/balance.BalanceTransaction"
                            }
                        }
                    }
                }
            }
        },
        "/v1/balance_transactions/{id}": {
            "get": {
                "description": "Get BalanceTransaction by given ID or 404 error.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "BalanceTransaction"
                ],
                "summary": "get BalanceTransaction by given ID or 404 error.",
                "parameters": [
                    {
                        "type": "string",
                        "description": "BalanceTransaction ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/balance.BalanceTransaction"
                        }
                    }
                }
            }
        },
        "/v1/charges": {
            "get": {
                "description": "Get all existing Charges.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Charge"
                ],
                "summary": "get all existing Charges",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/charge.Charge"
                            }
                        }
                    }
                }
            },
            "post": {
                "description": "Create a new Charge.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Charge"
                ],
                "summary": "create a new Charge",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/charge.Charge"
                        }
                    }
                }
            }
        },
        "/v1/charges/{id}": {
            "get": {
                "description": "Get Charge by given ID or 404 error.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Charge"
                ],
                "summary": "get Charge by given ID or 404 error.",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Charge ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/charge.Charge"
                        }
                    }
                }
            },
            "post": {
                "description": "Update Charge.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Charge"
                ],
                "summary": "update Charge",
                "parameters": [
                    {
                        "description": "Charge ID",
                        "name": "id",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/charge.Charge"
                        }
                    }
                }
            },
            "delete": {
                "description": "Delete Charge by given ID.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Charge"
                ],
                "summary": "delete Charge by given ID",
                "parameters": [
                    {
                        "description": "Charge ID",
                        "name": "id",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "ok",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/v1/charges/{id}/capture": {
            "post": {
                "description": "Capture Charge.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Charge"
                ],
                "summary": "capture Charge",
                "parameters": [
                    {
                        "description": "Charge ID",
                        "name": "id",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/charge.Charge"
                        }
                    }
                }
            }
        },
        "/v1/checkout/sessions": {
            "get": {
                "description": "Get all existing CheckoutSessions.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "CheckoutSession"
                ],
                "summary": "get all existing CheckoutSessions",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/checkout.CheckoutSession"
                            }
                        }
                    }
                }
            },
            "post": {
                "description": "Create a new CheckoutSession.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "CheckoutSession"
                ],
                "summary": "create a new CheckoutSession",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/checkout.CheckoutSession"
                        }
                    }
                }
            }
        },
        "/v1/checkout/sessions/{id}": {
            "get": {
                "description": "Get CheckoutSession by given ID or 404 error.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "CheckoutSession"
                ],
                "summary": "get CheckoutSession by given ID or 404 error.",
                "parameters": [
                    {
                        "type": "string",
                        "description": "CheckoutSession ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/checkout.CheckoutSession"
                        }
                    }
                }
            },
            "post": {
                "description": "Update CheckoutSession.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "CheckoutSession"
                ],
                "summary": "update CheckoutSession",
                "parameters": [
                    {
                        "description": "CheckoutSession ID",
                        "name": "id",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/checkout.CheckoutSession"
                        }
                    }
                }
            },
            "delete": {
                "description": "Delete CheckoutSession by given ID.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "CheckoutSession"
                ],
                "summary": "delete CheckoutSession by given ID",
                "parameters": [
                    {
                        "description": "CheckoutSession ID",
                        "name": "id",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "ok",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/v1/checkout/sessions/{id}/expire": {
            "post": {
                "description": "Expire CheckoutSession.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "CheckoutSession"
                ],
                "summary": "expire CheckoutSession",
                "parameters": [
                    {
                        "description": "CheckoutSession ID",
                        "name": "id",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/checkout.CheckoutSession"
                        }
                    }
                }
            }
        },
        "/v1/coupons": {
            "get": {
                "description": "Get all existing Coupons.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Coupon"
                ],
                "summary": "get all existing Coupons",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/coupon.Coupon"
                            }
                        }
                    }
                }
            },
            "post": {
                "description": "Create a new Coupon.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Coupon"
                ],
                "summary": "create a new Coupon",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/coupon.Coupon"
                        }
                    }
                }
            }
        },
        "/v1/coupons/{id}": {
            "get": {
                "description": "Get Coupon by given ID or 404 error.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Coupon"
                ],
                "summary": "get Coupon by given ID or 404 error.",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Coupon ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/coupon.Coupon"
                        }
                    }
                }
            },
            "post": {
                "description": "Update Coupon.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Coupon"
                ],
                "summary": "update Coupon",
                "parameters": [
                    {
                        "description": "Coupon ID",
                        "name": "id",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/coupon.Coupon"
                        }
                    }
                }
            },
            "delete": {
                "description": "Delete Coupon by given ID.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Coupon"
                ],
                "summary": "delete Coupon by given ID",
                "parameters": [
                    {
                        "description": "Coupon ID",
                        "name": "id",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "ok",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/v1/credit_notes": {
            "get": {
                "description": "Get all existing LineItems.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "LineItem"
                ],
                "summary": "get all existing LineItems",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/item.LineItem"
                            }
                        }
                    }
                }
            },
            "post": {
                "description": "Create a new LineItem.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "LineItem"
                ],
                "summary": "create a new LineItem",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/item.LineItem"
                        }
                    }
                }
            }
        },
        "/v1/credit_notes/{id}": {
            "get": {
                "description": "Get LineItem by given ID or 404 error.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "LineItem"
                ],
                "summary": "get LineItem by given ID or 404 error.",
                "parameters": [
                    {
                        "type": "string",
                        "description": "LineItem ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/item.LineItem"
                        }
                    }
                }
            },
            "post": {
                "description": "Update LineItem.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "LineItem"
                ],
                "summary": "update LineItem",
                "parameters": [
                    {
                        "description": "LineItem ID",
                        "name": "id",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/item.LineItem"
                        }
                    }
                }
            },
            "delete": {
                "description": "Delete LineItem by given ID.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "LineItem"
                ],
                "summary": "delete LineItem by given ID",
                "parameters": [
                    {
                        "description": "LineItem ID",
                        "name": "id",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "ok",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/v1/credit_notes/{id}/lines": {
            "get": {
                "description": "Get CreditNote by given ID and return his Linitems.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "CreditNote"
                ],
                "summary": "get CreditNote by given ID and return his Linitems.",
                "parameters": [
                    {
                        "type": "string",
                        "description": "CreditNote ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/credit.CreditNote"
                        }
                    }
                }
            }
        },
        "/v1/credit_notes/{id}/void": {
            "get": {
                "description": "Update CreditNote to status void.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "CreditNote"
                ],
                "summary": "update CreditNote to status void",
                "parameters": [
                    {
                        "description": "CreditNote ID",
                        "name": "id",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/credit.CreditNote"
                        }
                    }
                }
            }
        },
        "/v1/customers": {
            "get": {
                "description": "Get all existing Customers.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Customer"
                ],
                "summary": "get all existing Customers",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/customer.Customer"
                            }
                        }
                    }
                }
            },
            "post": {
                "description": "Create a new Customer.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Customer"
                ],
                "summary": "create a new Customer",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/customer.Customer"
                        }
                    }
                }
            }
        },
        "/v1/customers/{id}": {
            "get": {
                "description": "Get Customer by given ID or 404 error.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Customer"
                ],
                "summary": "get Customer by given ID or 404 error.",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Customer ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/customer.Customer"
                        }
                    }
                }
            },
            "post": {
                "description": "Update Customer.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Customer"
                ],
                "summary": "update Customer",
                "parameters": [
                    {
                        "description": "Customer ID",
                        "name": "id",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/customer.Customer"
                        }
                    }
                }
            },
            "delete": {
                "description": "Delete Customer by given ID.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Customer"
                ],
                "summary": "delete Customer by given ID",
                "parameters": [
                    {
                        "description": "Customer ID",
                        "name": "id",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "ok",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/v1/customers/{id}/cash_balance": {
            "get": {
                "description": "Get all existing CashBalances.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "CashBalance"
                ],
                "summary": "get all existing CashBalances",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/cash.CashBalance"
                            }
                        }
                    }
                }
            },
            "post": {
                "description": "Create a new CashBalance.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "CashBalance"
                ],
                "summary": "create a new CashBalance",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/cash.CashBalance"
                        }
                    }
                }
            }
        },
        "/v1/customers/{id}/cash_balance/{id}": {
            "get": {
                "description": "Get CashBalance by given ID or 404 error.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "CashBalance"
                ],
                "summary": "get CashBalance by given ID or 404 error.",
                "parameters": [
                    {
                        "type": "string",
                        "description": "CashBalance ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/cash.CashBalance"
                        }
                    }
                }
            },
            "post": {
                "description": "Update CashBalance.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "CashBalance"
                ],
                "summary": "update CashBalance",
                "parameters": [
                    {
                        "description": "CashBalance ID",
                        "name": "id",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/cash.CashBalance"
                        }
                    }
                }
            },
            "delete": {
                "description": "Delete CashBalance by given ID.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "CashBalance"
                ],
                "summary": "delete CashBalance by given ID",
                "parameters": [
                    {
                        "description": "CashBalance ID",
                        "name": "id",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "ok",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/v1/customers/{id}/discount": {
            "get": {
                "description": "Get all existing Discounts.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Discount"
                ],
                "summary": "get all existing Discounts",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/discount.Discount"
                            }
                        }
                    }
                }
            },
            "post": {
                "description": "Create a new Discount.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Discount"
                ],
                "summary": "create a new Discount",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/discount.Discount"
                        }
                    }
                }
            }
        },
        "/v1/customers/{id}/discount/{id}": {
            "get": {
                "description": "Get Discount by given ID or 404 error.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Discount"
                ],
                "summary": "get Discount by given ID or 404 error.",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Discount ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/discount.Discount"
                        }
                    }
                }
            },
            "post": {
                "description": "Update Discount.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Discount"
                ],
                "summary": "update Discount",
                "parameters": [
                    {
                        "description": "Discount ID",
                        "name": "id",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/discount.Discount"
                        }
                    }
                }
            },
            "delete": {
                "description": "Delete Discount by given ID.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Discount"
                ],
                "summary": "delete Discount by given ID",
                "parameters": [
                    {
                        "description": "Discount ID",
                        "name": "id",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "ok",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/v1/customers/{id}/sources": {
            "get": {
                "description": "Get all existing Cards.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Card"
                ],
                "summary": "get all existing Cards",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/github_com_driver005_gateway_payment_card.Card"
                            }
                        }
                    }
                }
            },
            "post": {
                "description": "Attaching Source to Customer by given ID.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Source"
                ],
                "summary": "attaching Source to Customer by given ID",
                "parameters": [
                    {
                        "description": "Source ID",
                        "name": "id",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "ok",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/v1/customers/{id}/sources/{id}": {
            "get": {
                "description": "Get Card by given ID or 404 error.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Card"
                ],
                "summary": "get Card by given ID or 404 error.",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Card ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/github_com_driver005_gateway_payment_card.Card"
                        }
                    }
                }
            },
            "post": {
                "description": "Update Card.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Card"
                ],
                "summary": "update Card",
                "parameters": [
                    {
                        "description": "Card ID",
                        "name": "id",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/github_com_driver005_gateway_payment_card.Card"
                        }
                    }
                }
            },
            "delete": {
                "description": "dettaching Source from Customer by given ID.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Source"
                ],
                "summary": "dettaching Source from Customer by given ID",
                "parameters": [
                    {
                        "description": "Source ID",
                        "name": "id",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "ok",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/v1/customers/{id}/sources/{id}/verify": {
            "post": {
                "description": "Verify BankAccount.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "BankAccount"
                ],
                "summary": "verify BankAccount",
                "parameters": [
                    {
                        "description": "BankAccount ID",
                        "name": "id",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/bank.BankAccount"
                        }
                    }
                }
            }
        },
        "/v1/customers/{id}/tax_ids": {
            "get": {
                "description": "Get all existing Customers.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Customer"
                ],
                "summary": "get all existing Customers",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/customer.Customer"
                            }
                        }
                    }
                }
            },
            "post": {
                "description": "Create a new Customer.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Customer"
                ],
                "summary": "create a new Customer",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/customer.Customer"
                        }
                    }
                }
            }
        },
        "/v1/customers/{id}/tax_ids/{tax_id}": {
            "get": {
                "description": "Get Customer by given ID or 404 error.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Customer"
                ],
                "summary": "get Customer by given ID or 404 error.",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Customer ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/customer.Customer"
                        }
                    }
                }
            },
            "delete": {
                "description": "Delete Customer by given ID.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Customer"
                ],
                "summary": "delete Customer by given ID",
                "parameters": [
                    {
                        "description": "Customer ID",
                        "name": "id",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "ok",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/v1/disputes": {
            "get": {
                "description": "Get all existing Disputes.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Dispute"
                ],
                "summary": "get all existing Disputes",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/dispute.Dispute"
                            }
                        }
                    }
                }
            },
            "post": {
                "description": "Create a new Dispute.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Dispute"
                ],
                "summary": "create a new Dispute",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/dispute.Dispute"
                        }
                    }
                }
            }
        },
        "/v1/disputes/{id}": {
            "get": {
                "description": "Get Dispute by given ID or 404 error.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Dispute"
                ],
                "summary": "get Dispute by given ID or 404 error.",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Dispute ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/dispute.Dispute"
                        }
                    }
                }
            },
            "post": {
                "description": "Update Dispute.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Dispute"
                ],
                "summary": "update Dispute",
                "parameters": [
                    {
                        "description": "Dispute ID",
                        "name": "id",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/dispute.Dispute"
                        }
                    }
                }
            },
            "delete": {
                "description": "Delete Dispute by given ID.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Dispute"
                ],
                "summary": "delete Dispute by given ID",
                "parameters": [
                    {
                        "description": "Dispute ID",
                        "name": "id",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "ok",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/v1/disputes/{id}/close": {
            "post": {
                "description": "Close Dispute.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Dispute"
                ],
                "summary": "close Dispute",
                "parameters": [
                    {
                        "description": "Dispute ID",
                        "name": "id",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/dispute.Dispute"
                        }
                    }
                }
            }
        },
        "/v1/files": {
            "get": {
                "description": "Get all existing Files.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "File"
                ],
                "summary": "get all existing Files",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/file.File"
                            }
                        }
                    }
                }
            },
            "post": {
                "description": "Create a new File.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "File"
                ],
                "summary": "create a new File",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/file.File"
                        }
                    }
                }
            }
        },
        "/v1/files/{id}": {
            "get": {
                "description": "Get File by given ID or 404 error.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "File"
                ],
                "summary": "get File by given ID or 404 error.",
                "parameters": [
                    {
                        "type": "string",
                        "description": "File ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/file.File"
                        }
                    }
                }
            },
            "post": {
                "description": "Update File.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "File"
                ],
                "summary": "update File",
                "parameters": [
                    {
                        "description": "File ID",
                        "name": "id",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/file.File"
                        }
                    }
                }
            },
            "delete": {
                "description": "Delete File by given ID.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "File"
                ],
                "summary": "delete File by given ID",
                "parameters": [
                    {
                        "description": "File ID",
                        "name": "id",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "ok",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/v1/invoiceitems": {
            "get": {
                "description": "Get all existing Invoiceitems.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Invoiceitem"
                ],
                "summary": "get all existing Invoiceitems",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/invoiceItem.Invoiceitem"
                            }
                        }
                    }
                }
            },
            "post": {
                "description": "Create a new Invoiceitem.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Invoiceitem"
                ],
                "summary": "create a new Invoiceitem",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/invoiceItem.Invoiceitem"
                        }
                    }
                }
            }
        },
        "/v1/invoiceitems/{id}": {
            "get": {
                "description": "Get Invoiceitem by given ID or 404 error.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Invoiceitem"
                ],
                "summary": "get Invoiceitem by given ID or 404 error.",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Invoiceitem ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/invoiceItem.Invoiceitem"
                        }
                    }
                }
            },
            "post": {
                "description": "Update Invoiceitem.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Invoiceitem"
                ],
                "summary": "update Invoiceitem",
                "parameters": [
                    {
                        "description": "Invoiceitem ID",
                        "name": "id",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/invoiceItem.Invoiceitem"
                        }
                    }
                }
            },
            "delete": {
                "description": "Delete Invoiceitem by given ID.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Invoiceitem"
                ],
                "summary": "delete Invoiceitem by given ID",
                "parameters": [
                    {
                        "description": "Invoiceitem ID",
                        "name": "id",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "ok",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/v1/invoices": {
            "get": {
                "description": "Get all existing Invoices.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Invoice"
                ],
                "summary": "get all existing Invoices",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/invoice.Invoice"
                            }
                        }
                    }
                }
            },
            "post": {
                "description": "Create a new Invoice.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Invoice"
                ],
                "summary": "create a new Invoice",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/invoice.Invoice"
                        }
                    }
                }
            }
        },
        "/v1/invoices/{id}": {
            "get": {
                "description": "Get Invoice by given ID or 404 error.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Invoice"
                ],
                "summary": "get Invoice by given ID or 404 error.",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Invoice ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/invoice.Invoice"
                        }
                    }
                }
            },
            "post": {
                "description": "Update Invoice.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Invoice"
                ],
                "summary": "update Invoice",
                "parameters": [
                    {
                        "description": "Invoice ID",
                        "name": "id",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/invoice.Invoice"
                        }
                    }
                }
            },
            "delete": {
                "description": "Delete Invoice by given ID.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Invoice"
                ],
                "summary": "delete Invoice by given ID",
                "parameters": [
                    {
                        "description": "Invoice ID",
                        "name": "id",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "ok",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/v1/invoices/{id}/cancel": {
            "post": {
                "description": "Cancel Invoice.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Invoice"
                ],
                "summary": "cancel Invoice",
                "parameters": [
                    {
                        "description": "Invoice ID",
                        "name": "id",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/invoice.Invoice"
                        }
                    }
                }
            }
        },
        "/v1/invoices/{id}/capture": {
            "post": {
                "description": "Capture Invoice.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Invoice"
                ],
                "summary": "capture Invoice",
                "parameters": [
                    {
                        "description": "Invoice ID",
                        "name": "id",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/invoice.Invoice"
                        }
                    }
                }
            }
        },
        "/v1/invoices/{id}/finalize": {
            "post": {
                "description": "Finalize Invoice.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Invoice"
                ],
                "summary": "finalize Invoice",
                "parameters": [
                    {
                        "description": "Invoice ID",
                        "name": "id",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/invoice.Invoice"
                        }
                    }
                }
            }
        },
        "/v1/invoices/{id}/mark_uncollectible": {
            "post": {
                "description": "Mark Invoice as uncollectible.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Invoice"
                ],
                "summary": "mark Invoice as uncollectible",
                "parameters": [
                    {
                        "description": "Invoice ID",
                        "name": "id",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/invoice.Invoice"
                        }
                    }
                }
            }
        },
        "/v1/invoices/{id}/pay": {
            "post": {
                "description": "Pay Invoice.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Invoice"
                ],
                "summary": "pay Invoice",
                "parameters": [
                    {
                        "description": "Invoice ID",
                        "name": "id",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/invoice.Invoice"
                        }
                    }
                }
            }
        },
        "/v1/invoices/{id}/send": {
            "post": {
                "description": "Send Invoice.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Invoice"
                ],
                "summary": "send Invoice",
                "parameters": [
                    {
                        "description": "Invoice ID",
                        "name": "id",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/invoice.Invoice"
                        }
                    }
                }
            }
        },
        "/v1/invoices/{id}/upcoming": {
            "post": {
                "description": "Upcoming Invoice.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Invoice"
                ],
                "summary": "upcoming Invoice",
                "parameters": [
                    {
                        "description": "Invoice ID",
                        "name": "id",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/invoice.Invoice"
                        }
                    }
                }
            }
        },
        "/v1/invoices/{id}/void": {
            "post": {
                "description": "Void Invoice.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Invoice"
                ],
                "summary": "void Invoice",
                "parameters": [
                    {
                        "description": "Invoice ID",
                        "name": "id",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/invoice.Invoice"
                        }
                    }
                }
            }
        },
        "/v1/mandates": {
            "get": {
                "description": "Get all existing Mandates.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Mandate"
                ],
                "summary": "get all existing Mandates",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/mandate.Mandate"
                            }
                        }
                    }
                }
            },
            "post": {
                "description": "Create a new Mandate.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Mandate"
                ],
                "summary": "create a new Mandate",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/mandate.Mandate"
                        }
                    }
                }
            }
        },
        "/v1/mandates/{id}": {
            "get": {
                "description": "Get Mandate by given ID or 404 error.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Mandate"
                ],
                "summary": "get Mandate by given ID or 404 error.",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Mandate ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/mandate.Mandate"
                        }
                    }
                }
            },
            "post": {
                "description": "Update Mandate.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Mandate"
                ],
                "summary": "update Mandate",
                "parameters": [
                    {
                        "description": "Mandate ID",
                        "name": "id",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/mandate.Mandate"
                        }
                    }
                }
            },
            "delete": {
                "description": "Delete Mandate by given ID.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Mandate"
                ],
                "summary": "delete Mandate by given ID",
                "parameters": [
                    {
                        "description": "Mandate ID",
                        "name": "id",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "ok",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/v1/payment_intents": {
            "get": {
                "description": "Get all existing PaymentIntents.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "PaymentIntent"
                ],
                "summary": "get all existing PaymentIntents",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/intent.PaymentIntent"
                            }
                        }
                    }
                }
            },
            "post": {
                "description": "Create a new PaymentIntent.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "PaymentIntent"
                ],
                "summary": "create a new PaymentIntent",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/intent.PaymentIntent"
                        }
                    }
                }
            }
        },
        "/v1/payment_intents/{id}": {
            "get": {
                "description": "Get PaymentIntent by given ID or 404 error.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "PaymentIntent"
                ],
                "summary": "get PaymentIntent by given ID or 404 error.",
                "parameters": [
                    {
                        "type": "string",
                        "description": "PaymentIntent ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/intent.PaymentIntent"
                        }
                    }
                }
            },
            "post": {
                "description": "Update PaymentIntent.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "PaymentIntent"
                ],
                "summary": "update PaymentIntent",
                "parameters": [
                    {
                        "description": "PaymentIntent ID",
                        "name": "id",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/intent.PaymentIntent"
                        }
                    }
                }
            },
            "delete": {
                "description": "Delete PaymentIntent by given ID.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "PaymentIntent"
                ],
                "summary": "delete PaymentIntent by given ID",
                "parameters": [
                    {
                        "description": "PaymentIntent ID",
                        "name": "id",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "ok",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/v1/payment_links": {
            "get": {
                "description": "Get all existing PaymentLinks.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "PaymentLink"
                ],
                "summary": "get all existing PaymentLinks",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/link.PaymentLink"
                            }
                        }
                    }
                }
            },
            "post": {
                "description": "Create a new PaymentLink.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "PaymentLink"
                ],
                "summary": "create a new PaymentLink",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/link.PaymentLink"
                        }
                    }
                }
            }
        },
        "/v1/payment_links/{id}": {
            "get": {
                "description": "Get PaymentLink by given ID or 404 error.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "PaymentLink"
                ],
                "summary": "get PaymentLink by given ID or 404 error.",
                "parameters": [
                    {
                        "type": "string",
                        "description": "PaymentLink ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/link.PaymentLink"
                        }
                    }
                }
            },
            "post": {
                "description": "Update PaymentLink.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "PaymentLink"
                ],
                "summary": "update PaymentLink",
                "parameters": [
                    {
                        "description": "PaymentLink ID",
                        "name": "id",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/link.PaymentLink"
                        }
                    }
                }
            },
            "delete": {
                "description": "Delete PaymentLink by given ID.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "PaymentLink"
                ],
                "summary": "delete PaymentLink by given ID",
                "parameters": [
                    {
                        "description": "PaymentLink ID",
                        "name": "id",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "ok",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/v1/payment_methods": {
            "get": {
                "description": "Get all existing PaymentMethods.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "PaymentMethod"
                ],
                "summary": "get all existing PaymentMethods",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/method.PaymentMethod"
                            }
                        }
                    }
                }
            },
            "post": {
                "description": "Create a new PaymentMethod.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "PaymentMethod"
                ],
                "summary": "create a new PaymentMethod",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/method.PaymentMethod"
                        }
                    }
                }
            }
        },
        "/v1/payment_methods/{id}": {
            "get": {
                "description": "Get PaymentMethod by given ID or 404 error.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "PaymentMethod"
                ],
                "summary": "get PaymentMethod by given ID or 404 error.",
                "parameters": [
                    {
                        "type": "string",
                        "description": "PaymentMethod ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/method.PaymentMethod"
                        }
                    }
                }
            },
            "post": {
                "description": "Update PaymentMethod.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "PaymentMethod"
                ],
                "summary": "update PaymentMethod",
                "parameters": [
                    {
                        "description": "PaymentMethod ID",
                        "name": "id",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/method.PaymentMethod"
                        }
                    }
                }
            },
            "delete": {
                "description": "Delete PaymentMethod by given ID.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "PaymentMethod"
                ],
                "summary": "delete PaymentMethod by given ID",
                "parameters": [
                    {
                        "description": "PaymentMethod ID",
                        "name": "id",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "ok",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/v1/payment_methods/{id}/attach": {
            "post": {
                "description": "Attaching PaymentMethod to Customer by given ID.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "PaymentMethod"
                ],
                "summary": "attaching PaymentMethod to Customer by given ID",
                "parameters": [
                    {
                        "description": "PaymentMethod ID",
                        "name": "id",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "ok",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/v1/payment_methods/{id}/dettach": {
            "post": {
                "description": "dettaching PaymentMethod from Customer by given ID.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "PaymentMethod"
                ],
                "summary": "dettaching PaymentMethod from Customer by given ID",
                "parameters": [
                    {
                        "description": "PaymentMethod ID",
                        "name": "id",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "ok",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/v1/payouts": {
            "get": {
                "description": "Get all existing Payouts.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Payout"
                ],
                "summary": "get all existing Payouts",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/payout.Payout"
                            }
                        }
                    }
                }
            },
            "post": {
                "description": "Create a new Payout.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Payout"
                ],
                "summary": "create a new Payout",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/payout.Payout"
                        }
                    }
                }
            }
        },
        "/v1/payouts/{id}": {
            "get": {
                "description": "Get Payout by given ID or 404 error.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Payout"
                ],
                "summary": "get Payout by given ID or 404 error.",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Payout ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/payout.Payout"
                        }
                    }
                }
            },
            "post": {
                "description": "Update Payout.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Payout"
                ],
                "summary": "update Payout",
                "parameters": [
                    {
                        "description": "Payout ID",
                        "name": "id",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/payout.Payout"
                        }
                    }
                }
            },
            "delete": {
                "description": "Delete Payout by given ID.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Payout"
                ],
                "summary": "delete Payout by given ID",
                "parameters": [
                    {
                        "description": "Payout ID",
                        "name": "id",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "ok",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/v1/payouts/{id}/cancele": {
            "post": {
                "description": "Cancel Payout.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Payout"
                ],
                "summary": "cancel Payout",
                "parameters": [
                    {
                        "description": "Payout ID",
                        "name": "id",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/payout.Payout"
                        }
                    }
                }
            }
        },
        "/v1/payouts/{id}/reverse": {
            "post": {
                "description": "Reverse Payout.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Payout"
                ],
                "summary": "reverse Payout",
                "parameters": [
                    {
                        "description": "Payout ID",
                        "name": "id",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/payout.Payout"
                        }
                    }
                }
            }
        },
        "/v1/plans": {
            "get": {
                "description": "Get all existing Plans.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Plan"
                ],
                "summary": "get all existing Plans",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/plan.Plan"
                            }
                        }
                    }
                }
            },
            "post": {
                "description": "Create a new Plan.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Plan"
                ],
                "summary": "create a new Plan",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/plan.Plan"
                        }
                    }
                }
            }
        },
        "/v1/plans/{id}": {
            "get": {
                "description": "Get Plan by given ID or 404 error.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Plan"
                ],
                "summary": "get Plan by given ID or 404 error.",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Plan ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/plan.Plan"
                        }
                    }
                }
            },
            "post": {
                "description": "Update Plan.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Plan"
                ],
                "summary": "update Plan",
                "parameters": [
                    {
                        "description": "Plan ID",
                        "name": "id",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/plan.Plan"
                        }
                    }
                }
            },
            "delete": {
                "description": "Delete Plan by given ID.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Plan"
                ],
                "summary": "delete Plan by given ID",
                "parameters": [
                    {
                        "description": "Plan ID",
                        "name": "id",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "ok",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/v1/prices": {
            "get": {
                "description": "Get all existing Prices.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Price"
                ],
                "summary": "get all existing Prices",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/price.Price"
                            }
                        }
                    }
                }
            },
            "post": {
                "description": "Create a new Price.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Price"
                ],
                "summary": "create a new Price",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/price.Price"
                        }
                    }
                }
            }
        },
        "/v1/prices/{id}": {
            "get": {
                "description": "Get Price by given ID or 404 error.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Price"
                ],
                "summary": "get Price by given ID or 404 error.",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Price ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/price.Price"
                        }
                    }
                }
            },
            "post": {
                "description": "Update Price.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Price"
                ],
                "summary": "update Price",
                "parameters": [
                    {
                        "description": "Price ID",
                        "name": "id",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/price.Price"
                        }
                    }
                }
            },
            "delete": {
                "description": "Delete Price by given ID.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Price"
                ],
                "summary": "delete Price by given ID",
                "parameters": [
                    {
                        "description": "Price ID",
                        "name": "id",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "ok",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/v1/products": {
            "get": {
                "description": "Get all existing Products.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Product"
                ],
                "summary": "get all existing Products",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/product.Product"
                            }
                        }
                    }
                }
            },
            "post": {
                "description": "Create a new Product.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Product"
                ],
                "summary": "create a new Product",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/product.Product"
                        }
                    }
                }
            }
        },
        "/v1/products/{id}": {
            "get": {
                "description": "Get Product by given ID or 404 error.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Product"
                ],
                "summary": "get Product by given ID or 404 error.",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Product ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/product.Product"
                        }
                    }
                }
            },
            "post": {
                "description": "Update Product.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Product"
                ],
                "summary": "update Product",
                "parameters": [
                    {
                        "description": "Product ID",
                        "name": "id",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/product.Product"
                        }
                    }
                }
            },
            "delete": {
                "description": "Delete Product by given ID.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Product"
                ],
                "summary": "delete Product by given ID",
                "parameters": [
                    {
                        "description": "Product ID",
                        "name": "id",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "ok",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/v1/promotion_codes": {
            "get": {
                "description": "Get all existing PromotionCodes.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "PromotionCode"
                ],
                "summary": "get all existing PromotionCodes",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/promotion.PromotionCode"
                            }
                        }
                    }
                }
            },
            "post": {
                "description": "Create a new PromotionCode.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "PromotionCode"
                ],
                "summary": "create a new PromotionCode",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/promotion.PromotionCode"
                        }
                    }
                }
            }
        },
        "/v1/promotion_codes/{id}": {
            "get": {
                "description": "Get PromotionCode by given ID or 404 error.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "PromotionCode"
                ],
                "summary": "get PromotionCode by given ID or 404 error.",
                "parameters": [
                    {
                        "type": "string",
                        "description": "PromotionCode ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/promotion.PromotionCode"
                        }
                    }
                }
            },
            "post": {
                "description": "Update PromotionCode.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "PromotionCode"
                ],
                "summary": "update PromotionCode",
                "parameters": [
                    {
                        "description": "PromotionCode ID",
                        "name": "id",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/promotion.PromotionCode"
                        }
                    }
                }
            },
            "delete": {
                "description": "Delete PromotionCode by given ID.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "PromotionCode"
                ],
                "summary": "delete PromotionCode by given ID",
                "parameters": [
                    {
                        "description": "PromotionCode ID",
                        "name": "id",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "ok",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/v1/quotes": {
            "get": {
                "description": "Get all existing Quotes.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Quote"
                ],
                "summary": "get all existing Quotes",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/quote.Quote"
                            }
                        }
                    }
                }
            },
            "post": {
                "description": "Create a new Quote.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Quote"
                ],
                "summary": "create a new Quote",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/quote.Quote"
                        }
                    }
                }
            }
        },
        "/v1/quotes/{id}": {
            "get": {
                "description": "Get Quote by given ID or 404 error.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Quote"
                ],
                "summary": "get Quote by given ID or 404 error.",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Quote ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/quote.Quote"
                        }
                    }
                }
            },
            "post": {
                "description": "Update Quote.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Quote"
                ],
                "summary": "update Quote",
                "parameters": [
                    {
                        "description": "Quote ID",
                        "name": "id",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/quote.Quote"
                        }
                    }
                }
            },
            "delete": {
                "description": "Delete Quote by given ID.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Quote"
                ],
                "summary": "delete Quote by given ID",
                "parameters": [
                    {
                        "description": "Quote ID",
                        "name": "id",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "ok",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/v1/quotes/{id}/accept": {
            "post": {
                "description": "Accept Quote.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Quote"
                ],
                "summary": "accept Quote",
                "parameters": [
                    {
                        "description": "Quote ID",
                        "name": "id",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/quote.Quote"
                        }
                    }
                }
            }
        },
        "/v1/quotes/{id}/cancel": {
            "post": {
                "description": "Cancel Quote.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Quote"
                ],
                "summary": "cancel Quote",
                "parameters": [
                    {
                        "description": "Quote ID",
                        "name": "id",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/quote.Quote"
                        }
                    }
                }
            }
        },
        "/v1/quotes/{id}/finalize": {
            "post": {
                "description": "Finalize Quote.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Quote"
                ],
                "summary": "finalize Quote",
                "parameters": [
                    {
                        "description": "Quote ID",
                        "name": "id",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/quote.Quote"
                        }
                    }
                }
            }
        },
        "/v1/refunds": {
            "get": {
                "description": "Get all existing Refunds.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Refund"
                ],
                "summary": "get all existing Refunds",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/refund.Refund"
                            }
                        }
                    }
                }
            },
            "post": {
                "description": "Create a new Refund.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Refund"
                ],
                "summary": "create a new Refund",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/refund.Refund"
                        }
                    }
                }
            }
        },
        "/v1/refunds/{id}": {
            "get": {
                "description": "Get Refund by given ID or 404 error.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Refund"
                ],
                "summary": "get Refund by given ID or 404 error.",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Refund ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/refund.Refund"
                        }
                    }
                }
            },
            "post": {
                "description": "Update Refund.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Refund"
                ],
                "summary": "update Refund",
                "parameters": [
                    {
                        "description": "Refund ID",
                        "name": "id",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/refund.Refund"
                        }
                    }
                }
            },
            "delete": {
                "description": "Delete Refund by given ID.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Refund"
                ],
                "summary": "delete Refund by given ID",
                "parameters": [
                    {
                        "description": "Refund ID",
                        "name": "id",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "ok",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/v1/refunds/{id}/cancele": {
            "post": {
                "description": "Cancel Refund.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Refund"
                ],
                "summary": "cancel Refund",
                "parameters": [
                    {
                        "description": "Refund ID",
                        "name": "id",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/refund.Refund"
                        }
                    }
                }
            }
        },
        "/v1/setup_attempts": {
            "get": {
                "description": "Get all existing SetupAttempts.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "SetupAttempt"
                ],
                "summary": "get all existing SetupAttempts",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/attempt.SetupAttempt"
                            }
                        }
                    }
                }
            },
            "post": {
                "description": "Create a new SetupAttempt.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "SetupAttempt"
                ],
                "summary": "create a new SetupAttempt",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/attempt.SetupAttempt"
                        }
                    }
                }
            }
        },
        "/v1/setup_attempts/{id}": {
            "get": {
                "description": "Get SetupAttempt by given ID or 404 error.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "SetupAttempt"
                ],
                "summary": "get SetupAttempt by given ID or 404 error.",
                "parameters": [
                    {
                        "type": "string",
                        "description": "SetupAttempt ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/attempt.SetupAttempt"
                        }
                    }
                }
            },
            "post": {
                "description": "Update SetupAttempt.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "SetupAttempt"
                ],
                "summary": "update SetupAttempt",
                "parameters": [
                    {
                        "description": "SetupAttempt ID",
                        "name": "id",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/attempt.SetupAttempt"
                        }
                    }
                }
            },
            "delete": {
                "description": "Delete SetupAttempt by given ID.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "SetupAttempt"
                ],
                "summary": "delete SetupAttempt by given ID",
                "parameters": [
                    {
                        "description": "SetupAttempt ID",
                        "name": "id",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "ok",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/v1/setup_intents": {
            "get": {
                "description": "Get all existing SetupIntents.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "SetupIntent"
                ],
                "summary": "get all existing SetupIntents",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/intent.SetupIntent"
                            }
                        }
                    }
                }
            },
            "post": {
                "description": "Create a new SetupIntent.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "SetupIntent"
                ],
                "summary": "create a new SetupIntent",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/intent.SetupIntent"
                        }
                    }
                }
            }
        },
        "/v1/setup_intents/{id}": {
            "get": {
                "description": "Get SetupIntent by given ID or 404 error.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "SetupIntent"
                ],
                "summary": "get SetupIntent by given ID or 404 error.",
                "parameters": [
                    {
                        "type": "string",
                        "description": "SetupIntent ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/intent.SetupIntent"
                        }
                    }
                }
            },
            "post": {
                "description": "Update SetupIntent.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "SetupIntent"
                ],
                "summary": "update SetupIntent",
                "parameters": [
                    {
                        "description": "SetupIntent ID",
                        "name": "id",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/intent.SetupIntent"
                        }
                    }
                }
            },
            "delete": {
                "description": "Delete SetupIntent by given ID.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "SetupIntent"
                ],
                "summary": "delete SetupIntent by given ID",
                "parameters": [
                    {
                        "description": "SetupIntent ID",
                        "name": "id",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "ok",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/v1/setup_intents/{id}/cancele": {
            "post": {
                "description": "Cancel SetupIntent.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "SetupIntent"
                ],
                "summary": "cancel SetupIntent",
                "parameters": [
                    {
                        "description": "SetupIntent ID",
                        "name": "id",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/intent.SetupIntent"
                        }
                    }
                }
            }
        },
        "/v1/setup_intents/{id}/confirm": {
            "post": {
                "description": "Confirm SetupIntent.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "SetupIntent"
                ],
                "summary": "confirm SetupIntent",
                "parameters": [
                    {
                        "description": "SetupIntent ID",
                        "name": "id",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/intent.SetupIntent"
                        }
                    }
                }
            }
        },
        "/v1/sources": {
            "get": {
                "description": "Get all existing Sources.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Source"
                ],
                "summary": "get all existing Sources",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/source.Source"
                            }
                        }
                    }
                }
            },
            "post": {
                "description": "Create a new Source.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Source"
                ],
                "summary": "create a new Source",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/source.Source"
                        }
                    }
                }
            }
        },
        "/v1/sources/{id}": {
            "get": {
                "description": "Get Source by given ID or 404 error.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Source"
                ],
                "summary": "get Source by given ID or 404 error.",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Source ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/source.Source"
                        }
                    }
                }
            },
            "post": {
                "description": "Update Source.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Source"
                ],
                "summary": "update Source",
                "parameters": [
                    {
                        "description": "Source ID",
                        "name": "id",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/source.Source"
                        }
                    }
                }
            },
            "delete": {
                "description": "Delete Source by given ID.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Source"
                ],
                "summary": "delete Source by given ID",
                "parameters": [
                    {
                        "description": "Source ID",
                        "name": "id",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "ok",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/v1/subscription_items": {
            "get": {
                "description": "Get all existing SubscriptionItems.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "SubscriptionItem"
                ],
                "summary": "get all existing SubscriptionItems",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/subscriptionItem.SubscriptionItem"
                            }
                        }
                    }
                }
            },
            "post": {
                "description": "Create a new SubscriptionItem.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "SubscriptionItem"
                ],
                "summary": "create a new SubscriptionItem",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/subscriptionItem.SubscriptionItem"
                        }
                    }
                }
            }
        },
        "/v1/subscription_items/{id}": {
            "get": {
                "description": "Get SubscriptionItem by given ID or 404 error.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "SubscriptionItem"
                ],
                "summary": "get SubscriptionItem by given ID or 404 error.",
                "parameters": [
                    {
                        "type": "string",
                        "description": "SubscriptionItem ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/subscriptionItem.SubscriptionItem"
                        }
                    }
                }
            },
            "post": {
                "description": "Update SubscriptionItem.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "SubscriptionItem"
                ],
                "summary": "update SubscriptionItem",
                "parameters": [
                    {
                        "description": "SubscriptionItem ID",
                        "name": "id",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/subscriptionItem.SubscriptionItem"
                        }
                    }
                }
            },
            "delete": {
                "description": "Delete SubscriptionItem by given ID.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "SubscriptionItem"
                ],
                "summary": "delete SubscriptionItem by given ID",
                "parameters": [
                    {
                        "description": "SubscriptionItem ID",
                        "name": "id",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "ok",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/v1/subscription_items/{id}/usage_records": {
            "get": {
                "description": "Get UsageRecord by given ID or 404 error.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "UsageRecord"
                ],
                "summary": "get UsageRecord by given ID or 404 error.",
                "parameters": [
                    {
                        "type": "string",
                        "description": "UsageRecord ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/usageRecord.UsageRecord"
                        }
                    }
                }
            }
        },
        "/v1/subscription_schedules": {
            "get": {
                "description": "Get all existing SubscriptionSchedules.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "SubscriptionSchedule"
                ],
                "summary": "get all existing SubscriptionSchedules",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/subscriptionSchedule.SubscriptionSchedule"
                            }
                        }
                    }
                }
            },
            "post": {
                "description": "Create a new SubscriptionSchedule.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "SubscriptionSchedule"
                ],
                "summary": "create a new SubscriptionSchedule",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/subscriptionSchedule.SubscriptionSchedule"
                        }
                    }
                }
            }
        },
        "/v1/subscription_schedules/{id}": {
            "get": {
                "description": "Get SubscriptionSchedule by given ID or 404 error.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "SubscriptionSchedule"
                ],
                "summary": "get SubscriptionSchedule by given ID or 404 error.",
                "parameters": [
                    {
                        "type": "string",
                        "description": "SubscriptionSchedule ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/subscriptionSchedule.SubscriptionSchedule"
                        }
                    }
                }
            },
            "post": {
                "description": "Update SubscriptionSchedule.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "SubscriptionSchedule"
                ],
                "summary": "update SubscriptionSchedule",
                "parameters": [
                    {
                        "description": "SubscriptionSchedule ID",
                        "name": "id",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/subscriptionSchedule.SubscriptionSchedule"
                        }
                    }
                }
            },
            "delete": {
                "description": "Delete SubscriptionSchedule by given ID.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "SubscriptionSchedule"
                ],
                "summary": "delete SubscriptionSchedule by given ID",
                "parameters": [
                    {
                        "description": "SubscriptionSchedule ID",
                        "name": "id",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "ok",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/v1/subscription_schedules/{id}/cancele": {
            "post": {
                "description": "Cancel SubscriptionSchedule.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "SubscriptionSchedule"
                ],
                "summary": "cancel SubscriptionSchedule",
                "parameters": [
                    {
                        "description": "SubscriptionSchedule ID",
                        "name": "id",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/subscriptionSchedule.SubscriptionSchedule"
                        }
                    }
                }
            }
        },
        "/v1/subscription_schedules/{id}/release": {
            "post": {
                "description": "Release SubscriptionSchedule.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "SubscriptionSchedule"
                ],
                "summary": "release SubscriptionSchedule",
                "parameters": [
                    {
                        "description": "SubscriptionSchedule ID",
                        "name": "id",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/subscriptionSchedule.SubscriptionSchedule"
                        }
                    }
                }
            }
        },
        "/v1/subscriptions": {
            "get": {
                "description": "Get all existing Subscriptions.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Subscription"
                ],
                "summary": "get all existing Subscriptions",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/subscription.Subscription"
                            }
                        }
                    }
                }
            },
            "post": {
                "description": "Create a new Subscription.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Subscription"
                ],
                "summary": "create a new Subscription",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/subscription.Subscription"
                        }
                    }
                }
            }
        },
        "/v1/subscriptions/{id}": {
            "get": {
                "description": "Get Subscription by given ID or 404 error.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Subscription"
                ],
                "summary": "get Subscription by given ID or 404 error.",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Subscription ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/subscription.Subscription"
                        }
                    }
                }
            },
            "post": {
                "description": "Update Subscription.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Subscription"
                ],
                "summary": "update Subscription",
                "parameters": [
                    {
                        "description": "Subscription ID",
                        "name": "id",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/subscription.Subscription"
                        }
                    }
                }
            },
            "delete": {
                "description": "Delete Subscription by given ID.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Subscription"
                ],
                "summary": "delete Subscription by given ID",
                "parameters": [
                    {
                        "description": "Subscription ID",
                        "name": "id",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "ok",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/v1/usage_record": {
            "post": {
                "description": "Create a new UsageRecord.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "UsageRecord"
                ],
                "summary": "create a new UsageRecord",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/usageRecord.UsageRecord"
                        }
                    }
                }
            }
        },
        "/v1/usage_record/{id}": {
            "post": {
                "description": "Update UsageRecord.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "UsageRecord"
                ],
                "summary": "update UsageRecord",
                "parameters": [
                    {
                        "description": "UsageRecord ID",
                        "name": "id",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/usageRecord.UsageRecord"
                        }
                    }
                }
            },
            "delete": {
                "description": "Delete UsageRecord by given ID.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "UsageRecord"
                ],
                "summary": "delete UsageRecord by given ID",
                "parameters": [
                    {
                        "description": "UsageRecord ID",
                        "name": "id",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "ok",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "account.Account": {
            "type": "object",
            "properties": {
                "business_profile": {
                    "type": "string",
                    "format": "uuid"
                },
                "created_at": {
                    "type": "string"
                },
                "deleted_at": {
                    "$ref": "#/definitions/database.DeletedAt"
                },
                "id": {
                    "type": "string"
                },
                "livemode": {
                    "type": "boolean"
                },
                "metadata": {
                    "$ref": "#/definitions/core.JSONB"
                },
                "object": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                }
            }
        },
        "attempt.SetupAttempt": {
            "type": "object",
            "properties": {
                "attach_to_self": {
                    "type": "boolean"
                },
                "created_at": {
                    "type": "string"
                },
                "customer": {
                    "type": "string",
                    "format": "uuid"
                },
                "deleted_at": {
                    "$ref": "#/definitions/database.DeletedAt"
                },
                "flow_directions": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "id": {
                    "type": "string"
                },
                "livemode": {
                    "type": "boolean"
                },
                "metadata": {
                    "$ref": "#/definitions/core.JSONB"
                },
                "object": {
                    "type": "string"
                },
                "payment_method": {
                    "type": "string",
                    "format": "uuid"
                },
                "payment_method_details": {
                    "type": "string",
                    "format": "uuid"
                },
                "setup_error": {
                    "type": "string",
                    "format": "uuid"
                },
                "setup_intent": {
                    "type": "string",
                    "format": "uuid"
                },
                "status": {
                    "$ref": "#/definitions/attempt.Status"
                },
                "updated_at": {
                    "type": "string"
                },
                "usage": {
                    "$ref": "#/definitions/attempt.Usage"
                }
            }
        },
        "attempt.Status": {
            "type": "string",
            "enum": [
                "requires_confirmation",
                "requires_action",
                "processing",
                "succeeded",
                "failed",
                "abandoned"
            ],
            "x-enum-varnames": [
                "StatusRequiresConfirmation",
                "StatusRequiresAction",
                "StatusProcessing",
                "StatusSucceeded",
                "StatusFailed",
                "StatusAbandoned"
            ]
        },
        "attempt.Usage": {
            "type": "string",
            "enum": [
                "off_session",
                "on_session"
            ],
            "x-enum-varnames": [
                "UsageOffSession",
                "UsageOnSession"
            ]
        },
        "balance.Balance": {
            "type": "object",
            "properties": {
                "available": {
                    "description": "Funds that are available to be transferred or paid out, whether automatically by Stripe or explicitly via the [Transfers API](https://stripe.com/docs/api#transfers) or [Payouts API](https://stripe.com/docs/api#payouts). The available balance for each currency and payment type can be found in the ` + "`" + `source_types` + "`" + ` property.",
                    "type": "array",
                    "items": {
                        "type": "string",
                        "format": "uuid"
                    }
                },
                "connect_reserved": {
                    "description": "Funds held due to negative balances on connected Custom accounts. The connect reserve balance for each currency and payment type can be found in the ` + "`" + `source_types` + "`" + ` property.",
                    "type": "array",
                    "items": {
                        "type": "string",
                        "format": "uuid"
                    }
                },
                "created_at": {
                    "type": "string"
                },
                "deleted_at": {
                    "$ref": "#/definitions/database.DeletedAt"
                },
                "id": {
                    "type": "string"
                },
                "instant_available": {
                    "description": "Funds that can be paid out using Instant Payouts.",
                    "type": "array",
                    "items": {
                        "type": "string",
                        "format": "uuid"
                    }
                },
                "issuing": {
                    "type": "string",
                    "format": "uuid"
                },
                "livemode": {
                    "type": "boolean"
                },
                "metadata": {
                    "$ref": "#/definitions/core.JSONB"
                },
                "object": {
                    "type": "string"
                },
                "pending": {
                    "description": "Funds that are not yet available in the balance, due to the 7-day rolling pay cycle. The pending balance for each currency, and for each payment type, can be found in the ` + "`" + `source_types` + "`" + ` property.",
                    "type": "array",
                    "items": {
                        "type": "string",
                        "format": "uuid"
                    }
                },
                "updated_at": {
                    "type": "string"
                }
            }
        },
        "balance.BalanceTransaction": {
            "type": "object",
            "properties": {
                "amount": {
                    "description": "Gross amount of the transaction, in %s.",
                    "type": "integer"
                },
                "available_on": {
                    "description": "The date the transaction's net funds will become available in the Stripe balance.",
                    "type": "integer"
                },
                "created_at": {
                    "type": "string"
                },
                "currency": {
                    "description": "Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).",
                    "type": "string"
                },
                "deleted_at": {
                    "$ref": "#/definitions/database.DeletedAt"
                },
                "description": {
                    "description": "An arbitrary string attached to the object. Often useful for displaying to users.",
                    "type": "string"
                },
                "exchange_rate": {
                    "description": "The exchange rate used, if applicable, for this transaction. Specifically, if money was converted from currency A to currency B, then the ` + "`" + `amount` + "`" + ` in currency A, times ` + "`" + `exchange_rate` + "`" + `, would be the ` + "`" + `amount` + "`" + ` in currency B. For example, suppose you charged a customer 10.00 EUR. Then the PaymentIntent's ` + "`" + `amount` + "`" + ` would be ` + "`" + `1000` + "`" + ` and ` + "`" + `currency` + "`" + ` would be ` + "`" + `eur` + "`" + `. Suppose this was converted into 12.34 USD in your Stripe account. Then the BalanceTransaction's ` + "`" + `amount` + "`" + ` would be ` + "`" + `1234` + "`" + `, ` + "`" + `currency` + "`" + ` would be ` + "`" + `usd` + "`" + `, and ` + "`" + `exchange_rate` + "`" + ` would be ` + "`" + `1.234` + "`" + `.",
                    "type": "number"
                },
                "fee": {
                    "description": "Fees (in %s) paid for this transaction.",
                    "type": "integer"
                },
                "fee_details": {
                    "description": "Detailed breakdown of fees (in %s) paid for this transaction.",
                    "type": "array",
                    "items": {
                        "type": "string",
                        "format": "uuid"
                    }
                },
                "id": {
                    "type": "string"
                },
                "livemode": {
                    "type": "boolean"
                },
                "metadata": {
                    "$ref": "#/definitions/core.JSONB"
                },
                "net": {
                    "description": "Net amount of the transaction, in %s.",
                    "type": "integer"
                },
                "object": {
                    "type": "string"
                },
                "reporting_category": {
                    "description": "[Learn more](https://stripe.com/docs/reports/reporting-categories) about how reporting categories can help you understand balance transactions from an accounting perspective.",
                    "type": "string"
                },
                "source": {
                    "type": "string"
                },
                "status": {
                    "description": "If the transaction's net funds are available in the Stripe balance yet. Either ` + "`" + `available` + "`" + ` or ` + "`" + `pending` + "`" + `.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/balance.Status"
                        }
                    ]
                },
                "type": {
                    "description": "Transaction type: ` + "`" + `adjustment` + "`" + `, ` + "`" + `advance` + "`" + `, ` + "`" + `advance_funding` + "`" + `, ` + "`" + `anticipation_repayment` + "`" + `, ` + "`" + `application_fee` + "`" + `, ` + "`" + `application_fee_refund` + "`" + `, ` + "`" + `charge` + "`" + `, ` + "`" + `connect_collection_transfer` + "`" + `, ` + "`" + `contribution` + "`" + `, ` + "`" + `issuing_authorization_hold` + "`" + `, ` + "`" + `issuing_authorization_release` + "`" + `, ` + "`" + `issuing_dispute` + "`" + `, ` + "`" + `issuing_transaction` + "`" + `, ` + "`" + `payment` + "`" + `, ` + "`" + `payment_failure_refund` + "`" + `, ` + "`" + `payment_refund` + "`" + `, ` + "`" + `payout` + "`" + `, ` + "`" + `payout_cancel` + "`" + `, ` + "`" + `payout_failure` + "`" + `, ` + "`" + `refund` + "`" + `, ` + "`" + `refund_failure` + "`" + `, ` + "`" + `reserve_transaction` + "`" + `, ` + "`" + `reserved_funds` + "`" + `, ` + "`" + `stripe_fee` + "`" + `, ` + "`" + `stripe_fx_fee` + "`" + `, ` + "`" + `tax_fee` + "`" + `, ` + "`" + `topup` + "`" + `, ` + "`" + `topup_reversal` + "`" + `, ` + "`" + `transfer` + "`" + `, ` + "`" + `transfer_cancel` + "`" + `, ` + "`" + `transfer_failure` + "`" + `, or ` + "`" + `transfer_refund` + "`" + `. [Learn more](https://stripe.com/docs/reports/balance-transaction-types) about balance transaction types and what they represent. If you are looking to classify transactions for accounting purposes, you might want to consider ` + "`" + `reporting_category` + "`" + ` instead.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/balance.Type"
                        }
                    ]
                },
                "updated_at": {
                    "type": "string"
                }
            }
        },
        "balance.Status": {
            "type": "string",
            "enum": [
                "available",
                "pending"
            ],
            "x-enum-varnames": [
                "StatusAvailable",
                "StatusPending"
            ]
        },
        "balance.Type": {
            "type": "string",
            "enum": [
                "adjustment",
                "advance",
                "advance_funding",
                "anticipation_repayment",
                "application_fee",
                "application_fee_refund",
                "charge",
                "connect_collection_transfer",
                "contribution",
                "issuing_authorization_hold",
                "issuing_authorization_release",
                "issuing_dispute",
                "issuing_transaction",
                "payment",
                "payment_failure_refund",
                "payment_refund",
                "payout",
                "payout_cancel",
                "payout_failure",
                "refund",
                "refund_failure",
                "reserve_transaction",
                "reserved_funds",
                "reporting_category",
                "stripe_fee",
                "stripe_fx_fee",
                "tax_fee",
                "topup",
                "topup_reversal",
                "transfer",
                "transfer_cancel",
                "transfer_failure",
                "transfer_refund"
            ],
            "x-enum-varnames": [
                "TypeAdjustment",
                "TypeAdvance",
                "TypeAdvanceFunding",
                "TypeAnticipationRepayment",
                "TypeApplicationFee",
                "TypeApplicationFeeRefund",
                "TypeCharge",
                "TypeConnectCollectionTransfer",
                "TypeContribution",
                "TypeIssuingAuthorizationHold",
                "TypeIssuingAuthorizationRelease",
                "TypeIssuingDispute",
                "TypeIssuingTransaction",
                "TypePayment",
                "TypePaymentFailureRefund",
                "TypePaymentRefund",
                "TypePayout",
                "TypePayoutCancel",
                "TypePayoutFailure",
                "TypeRefund",
                "TypeRefundFailure",
                "TypeReserveTransaction",
                "TypeReservedFunds",
                "TypeReportingCategory",
                "TypeStripeFee",
                "TypeStripeFxFee",
                "TypeTaxFee",
                "TypeTopup",
                "TypeTopupReversal",
                "TypeTransfer",
                "TypeTransferCancel",
                "TypeTransferFailure",
                "TypeTransferRefund"
            ]
        },
        "bank.AccountHolderType": {
            "type": "string",
            "enum": [
                "individual",
                "company"
            ],
            "x-enum-varnames": [
                "AccountHolderTypeIndividual",
                "AccountHolderTypeCompany"
            ]
        },
        "bank.AccountType": {
            "type": "string",
            "enum": [
                "checking",
                "savings",
                "futsu",
                "toza"
            ],
            "x-enum-varnames": [
                "AccountTypeChecking",
                "AccountTypeSavings",
                "AccountTypeFutsu",
                "AccountTypeToza"
            ]
        },
        "bank.BankAccount": {
            "type": "object",
            "properties": {
                "account": {
                    "$ref": "#/definitions/account.Account"
                },
                "account_holder_name": {
                    "type": "string"
                },
                "account_holder_type": {
                    "$ref": "#/definitions/bank.AccountHolderType"
                },
                "account_id": {
                    "$ref": "#/definitions/uuid.NullUUID"
                },
                "account_type": {
                    "$ref": "#/definitions/bank.AccountType"
                },
                "available_payout_methods": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "bank_name": {
                    "type": "string"
                },
                "country": {
                    "type": "string"
                },
                "created_at": {
                    "type": "string"
                },
                "currency": {
                    "type": "string"
                },
                "customer": {
                    "$ref": "#/definitions/customer.Customer"
                },
                "customer_id": {
                    "$ref": "#/definitions/uuid.NullUUID"
                },
                "default_for_currency": {
                    "type": "boolean"
                },
                "deleted_at": {
                    "$ref": "#/definitions/database.DeletedAt"
                },
                "fingerprint": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "last4": {
                    "type": "string"
                },
                "livemode": {
                    "type": "boolean"
                },
                "metadata": {
                    "$ref": "#/definitions/core.JSONB"
                },
                "object": {
                    "type": "string"
                },
                "routing_number": {
                    "type": "string"
                },
                "status": {
                    "$ref": "#/definitions/bank.Status"
                },
                "updated_at": {
                    "type": "string"
                }
            }
        },
        "bank.Status": {
            "type": "string",
            "enum": [
                "new",
                "validated",
                "verified",
                "verification_failed",
                "errored"
            ],
            "x-enum-varnames": [
                "StatusNew",
                "StatusValidated",
                "StatusVerified",
                "StatusVerificationFailed",
                "StatusErrored"
            ]
        },
        "card.AddressLine1Check": {
            "type": "string",
            "enum": [
                "pass",
                "fail",
                "unavailable",
                "unchecked"
            ],
            "x-enum-varnames": [
                "AddressLine1CheckPass",
                "AddressLine1CheckFail",
                "AddressLine1CheckUnavailable",
                "AddressLine1CheckUnchecked"
            ]
        },
        "card.AddressZipCheck": {
            "type": "string",
            "enum": [
                "pass",
                "fail",
                "unavailable",
                "unchecked"
            ],
            "x-enum-varnames": [
                "AddressZipCheckPass",
                "AddressZipCheckFail",
                "AddressZipCheckUnavailable",
                "AddressZipCheckUnchecked"
            ]
        },
        "card.Brand": {
            "type": "string",
            "enum": [
                "American Express",
                "Diners Club",
                "Discover",
                "JCB",
                "MasterCard",
                "UnionPay",
                "Visa",
                "Unknown"
            ],
            "x-enum-varnames": [
                "BrandAmericanExpress",
                "BrandDinersClub",
                "BrandDiscover",
                "BrandJCB",
                "BrandMasterCard",
                "BrandUnionPay",
                "BrandVisa",
                "BrandUnknown"
            ]
        },
        "card.CvcCheck": {
            "type": "string",
            "enum": [
                "pass",
                "fail",
                "unavailable",
                "unchecked"
            ],
            "x-enum-varnames": [
                "CvcCheckPass",
                "CvcCheckFail",
                "CvcCheckUnavailable",
                "CvcCheckUnchecked"
            ]
        },
        "card.Funding": {
            "type": "string",
            "enum": [
                "credit",
                "debit",
                "prepaid",
                "unknown"
            ],
            "x-enum-varnames": [
                "FundingCredit",
                "FundingDebit",
                "FundingPrepaid",
                "FundingUnknown"
            ]
        },
        "card.TokenizationMethod": {
            "type": "string",
            "enum": [
                "android_pay",
                "apple_pay",
                "masterpass",
                "visa_checkout",
                "unknown"
            ],
            "x-enum-varnames": [
                "TokenizationMethodAndroidPay",
                "TokenizationMethodApplePay",
                "TokenizationMethodMasterpass",
                "TokenizationMethodVisaCheckout",
                "TokenizationMethodUnknown"
            ]
        },
        "cash.CashBalance": {
            "type": "object",
            "properties": {
                "available": {
                    "description": "A hash of all cash balances available to this customer. You cannot delete a customer with any cash balances, even if the balance is 0. Amounts are represented in the [smallest currency unit](https://stripe.com/docs/currencies#zero-decimal).",
                    "allOf": [
                        {
                            "$ref": "#/definitions/core.JSONB"
                        }
                    ]
                },
                "created_at": {
                    "type": "string"
                },
                "customer": {
                    "description": "The ID of the customer whose cash balance this object represents.",
                    "type": "string"
                },
                "deleted_at": {
                    "$ref": "#/definitions/database.DeletedAt"
                },
                "id": {
                    "type": "string"
                },
                "livemode": {
                    "type": "boolean"
                },
                "metadata": {
                    "$ref": "#/definitions/core.JSONB"
                },
                "object": {
                    "type": "string"
                },
                "setting_reconciliation_mode": {
                    "description": "The configuration for how funds that land in the customer cash balance are reconciled.",
                    "type": "string"
                },
                "setting_using_merchant_default": {
                    "description": "A flag to indicate if reconciliation mode returned is the user's default or is specific to this customer cash balance",
                    "type": "boolean"
                },
                "updated_at": {
                    "type": "string"
                }
            }
        },
        "charge.Charge": {
            "type": "object",
            "properties": {
                "amount": {
                    "type": "integer"
                },
                "amount_captured": {
                    "type": "integer"
                },
                "amount_refunded": {
                    "type": "integer"
                },
                "balance_transaction": {
                    "type": "string",
                    "format": "uuid"
                },
                "billing_details": {
                    "type": "string",
                    "format": "uuid"
                },
                "calculated_statement_descriptor": {
                    "type": "string"
                },
                "captured": {
                    "type": "boolean"
                },
                "created_at": {
                    "type": "string"
                },
                "currency": {
                    "type": "string"
                },
                "customer": {
                    "type": "string",
                    "format": "uuid"
                },
                "deleted_at": {
                    "$ref": "#/definitions/database.DeletedAt"
                },
                "description": {
                    "type": "string"
                },
                "disputed": {
                    "type": "boolean"
                },
                "failure_balance_transaction": {
                    "type": "string",
                    "format": "uuid"
                },
                "failure_code": {
                    "type": "string"
                },
                "failure_message": {
                    "type": "string"
                },
                "fraud_details": {
                    "type": "string",
                    "format": "uuid"
                },
                "id": {
                    "type": "string"
                },
                "livemode": {
                    "type": "boolean"
                },
                "metadata": {
                    "$ref": "#/definitions/core.JSONB"
                },
                "object": {
                    "type": "string"
                },
                "outcome": {
                    "type": "string",
                    "format": "uuid"
                },
                "paid": {
                    "type": "boolean"
                },
                "payment_method": {
                    "type": "string",
                    "format": "uuid"
                },
                "payment_method_details": {
                    "type": "string",
                    "format": "uuid"
                },
                "radar_options": {
                    "type": "string",
                    "format": "uuid"
                },
                "receipt_email": {
                    "type": "string"
                },
                "receipt_number": {
                    "type": "string"
                },
                "receipt_url": {
                    "type": "string"
                },
                "refunded": {
                    "type": "boolean"
                },
                "review": {
                    "type": "string",
                    "format": "uuid"
                },
                "shipping": {
                    "type": "string",
                    "format": "uuid"
                },
                "statement_descriptor": {
                    "type": "string"
                },
                "statement_descriptor_suffix": {
                    "type": "string"
                },
                "status": {
                    "$ref": "#/definitions/charge.Status"
                },
                "updated_at": {
                    "type": "string"
                }
            }
        },
        "charge.Status": {
            "type": "string",
            "enum": [
                "succeeded",
                "pending",
                "failed"
            ],
            "x-enum-varnames": [
                "StatusSucceeded",
                "StatusPending",
                "StatusFailed"
            ]
        },
        "checkout.BillingAddressCollection": {
            "type": "string",
            "enum": [
                "auto",
                "required"
            ],
            "x-enum-varnames": [
                "BillingAddressCollectionAuto",
                "BillingAddressCollectionRequired"
            ]
        },
        "checkout.CheckoutSession": {
            "type": "object",
            "properties": {
                "after_expiration": {
                    "type": "string",
                    "format": "uuid"
                },
                "allow_promotion_codes": {
                    "type": "boolean"
                },
                "amount_subtotal": {
                    "type": "integer"
                },
                "amount_total": {
                    "type": "integer"
                },
                "automatic_tax": {
                    "type": "boolean"
                },
                "billing_address_collection": {
                    "$ref": "#/definitions/checkout.BillingAddressCollection"
                },
                "cancel_url": {
                    "type": "string"
                },
                "client_reference_id": {
                    "type": "string"
                },
                "consent": {
                    "type": "string",
                    "format": "uuid"
                },
                "consent_collection": {
                    "type": "string",
                    "format": "uuid"
                },
                "created_at": {
                    "type": "string"
                },
                "currency": {
                    "type": "string"
                },
                "custom_text": {
                    "type": "string",
                    "format": "uuid"
                },
                "customer": {
                    "type": "string",
                    "format": "uuid"
                },
                "customer_creation": {
                    "$ref": "#/definitions/checkout.CustomerCreation"
                },
                "customer_details": {
                    "type": "string",
                    "format": "uuid"
                },
                "customer_email": {
                    "type": "string"
                },
                "deleted_at": {
                    "$ref": "#/definitions/database.DeletedAt"
                },
                "expires_at": {
                    "type": "integer"
                },
                "id": {
                    "type": "string"
                },
                "invoice": {
                    "type": "string",
                    "format": "uuid"
                },
                "invoice_creation": {
                    "type": "string",
                    "format": "uuid"
                },
                "line_items": {
                    "type": "array",
                    "items": {
                        "type": "string",
                        "format": "uuid"
                    }
                },
                "livemode": {
                    "type": "boolean"
                },
                "locale": {
                    "$ref": "#/definitions/checkout.Locale"
                },
                "metadata": {
                    "$ref": "#/definitions/core.JSONB"
                },
                "mode": {
                    "$ref": "#/definitions/checkout.Mode"
                },
                "object": {
                    "type": "string"
                },
                "payment_intent": {
                    "type": "string",
                    "format": "uuid"
                },
                "payment_link": {
                    "type": "string",
                    "format": "uuid"
                },
                "payment_method_collection": {
                    "$ref": "#/definitions/checkout.PaymentMethodCollection"
                },
                "payment_method_options": {
                    "type": "string",
                    "format": "uuid"
                },
                "payment_method_types": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "payment_status": {
                    "$ref": "#/definitions/checkout.PaymentStatus"
                },
                "phone_number_collection": {
                    "type": "boolean"
                },
                "recovered_from": {
                    "type": "string"
                },
                "setup_intent": {
                    "type": "string",
                    "format": "uuid"
                },
                "shipping_address_collection": {
                    "type": "string",
                    "format": "uuid"
                },
                "shipping_cost": {
                    "type": "string",
                    "format": "uuid"
                },
                "shipping_details": {
                    "type": "string",
                    "format": "uuid"
                },
                "shipping_options": {
                    "type": "array",
                    "items": {
                        "type": "string",
                        "format": "uuid"
                    }
                },
                "status": {
                    "$ref": "#/definitions/checkout.Status"
                },
                "submit_type": {
                    "$ref": "#/definitions/checkout.SubmitType"
                },
                "subscription": {
                    "type": "string",
                    "format": "uuid"
                },
                "success_url": {
                    "type": "string"
                },
                "tax_id_collection": {
                    "type": "boolean"
                },
                "total_details": {
                    "type": "string",
                    "format": "uuid"
                },
                "updated_at": {
                    "type": "string"
                },
                "url": {
                    "type": "string"
                }
            }
        },
        "checkout.CustomerCreation": {
            "type": "string",
            "enum": [
                "if_required",
                "always"
            ],
            "x-enum-varnames": [
                "CustomerCreationIfRequired",
                "CustomerCreationAlways"
            ]
        },
        "checkout.Locale": {
            "type": "string",
            "enum": [
                "auto",
                "bg",
                "cs",
                "da",
                "de",
                "el",
                "en",
                "en-GB",
                "es",
                "es-419",
                "et",
                "fi",
                "fil",
                "fr",
                "fr-CA",
                "hr",
                "hu",
                "id",
                "it",
                "ja",
                "ko",
                "lt",
                "lv",
                "ms",
                "mt",
                "nb",
                "nl",
                "pl",
                "pt",
                "pt-BR",
                "ro",
                "ru",
                "sk",
                "sl",
                "sv",
                "th",
                "tr",
                "vi",
                "zh",
                "zh-HK",
                "zh-TW"
            ],
            "x-enum-varnames": [
                "Localeauto",
                "Localebg",
                "Localecs",
                "Localeda",
                "Localede",
                "Localeel",
                "Localeen",
                "Localeen_GB",
                "Localees",
                "Localees_419",
                "Localeet",
                "Localefi",
                "Localefil",
                "Localefr",
                "Localefr_CA",
                "Localehr",
                "Localehu",
                "Localeid",
                "Localeit",
                "Localeja",
                "Localeko",
                "Localelt",
                "Localelv",
                "Localems",
                "Localemt",
                "Localenb",
                "Localenl",
                "Localepl",
                "Localept",
                "Localept_BR",
                "Localero",
                "Localeru",
                "Localesk",
                "Localesl",
                "Localesv",
                "Localeth",
                "Localetr",
                "Localevi",
                "Localezh",
                "Localezh_HK",
                "Localezh_TW"
            ]
        },
        "checkout.Mode": {
            "type": "string",
            "enum": [
                "payment",
                "setup",
                "subscription"
            ],
            "x-enum-varnames": [
                "ModePayment",
                "ModeSetup",
                "ModeSubscription"
            ]
        },
        "checkout.PaymentMethodCollection": {
            "type": "string",
            "enum": [
                "always",
                "if_required"
            ],
            "x-enum-varnames": [
                "PaymentMethodCollectionAlways",
                "PaymentMethodCollectionIfRequired"
            ]
        },
        "checkout.PaymentStatus": {
            "type": "string",
            "enum": [
                "paid",
                "unpaid",
                "no_payment_required"
            ],
            "x-enum-varnames": [
                "PaymentStatusPaid",
                "PaymentStatusUnpaid",
                "PaymentStatusNoPaymentRequired"
            ]
        },
        "checkout.Status": {
            "type": "string",
            "enum": [
                "open",
                "complete",
                "expired"
            ],
            "x-enum-varnames": [
                "StatusOpen",
                "StatusComplete",
                "StatusExpired"
            ]
        },
        "checkout.SubmitType": {
            "type": "string",
            "enum": [
                "auto",
                "pay",
                "book",
                "donate"
            ],
            "x-enum-varnames": [
                "SubmitTypeAuto",
                "SubmitTypePay",
                "SubmitTypeBook",
                "SubmitTypeDonate"
            ]
        },
        "core.JSONB": {
            "type": "object",
            "additionalProperties": true
        },
        "coupon.Coupon": {
            "type": "object",
            "properties": {
                "amount_off": {
                    "type": "integer"
                },
                "applies_to": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "created_at": {
                    "type": "string"
                },
                "currency": {
                    "type": "string"
                },
                "deleted_at": {
                    "$ref": "#/definitions/database.DeletedAt"
                },
                "duration": {
                    "$ref": "#/definitions/coupon.Duration"
                },
                "duration_in_months": {
                    "type": "integer"
                },
                "id": {
                    "type": "string"
                },
                "livemode": {
                    "type": "boolean"
                },
                "max_redemptions": {
                    "type": "integer"
                },
                "metadata": {
                    "$ref": "#/definitions/core.JSONB"
                },
                "name": {
                    "type": "string"
                },
                "object": {
                    "type": "string"
                },
                "percent_off": {
                    "type": "number"
                },
                "redeem_by": {
                    "type": "integer"
                },
                "times_redeemed": {
                    "type": "integer"
                },
                "updated_at": {
                    "type": "string"
                },
                "valid": {
                    "type": "boolean"
                }
            }
        },
        "coupon.Duration": {
            "type": "string",
            "enum": [
                "once",
                "repeating",
                "forever"
            ],
            "x-enum-varnames": [
                "DurationOnce",
                "DurationRepeating",
                "DurationForever"
            ]
        },
        "credit.CreditNote": {
            "type": "object",
            "properties": {
                "amount": {
                    "description": "The integer amount in %s representing the total amount of the credit note, including tax.",
                    "type": "integer"
                },
                "created_at": {
                    "type": "string"
                },
                "currency": {
                    "description": "Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).",
                    "type": "string"
                },
                "customer": {
                    "type": "string",
                    "format": "uuid"
                },
                "customer_balance_transaction": {
                    "type": "string",
                    "format": "uuid"
                },
                "deleted_at": {
                    "$ref": "#/definitions/database.DeletedAt"
                },
                "discount_amount": {
                    "description": "The integer amount in %s representing the total amount of discount that was credited.",
                    "type": "integer"
                },
                "id": {
                    "type": "string"
                },
                "invoice": {
                    "type": "string",
                    "format": "uuid"
                },
                "lines": {
                    "description": "The aggregate amounts calculated per discount for all line items.",
                    "type": "array",
                    "items": {
                        "type": "string",
                        "format": "uuid"
                    }
                },
                "livemode": {
                    "type": "boolean"
                },
                "memo": {
                    "description": "Customer-facing text that appears on the credit note PDF.",
                    "type": "string"
                },
                "metadata": {
                    "$ref": "#/definitions/core.JSONB"
                },
                "number": {
                    "description": "A unique number that identifies this particular credit note and appears on the PDF of the credit note and its associated invoice.",
                    "type": "string"
                },
                "object": {
                    "type": "string"
                },
                "out_of_band_amount": {
                    "description": "Amount that was credited outside of Stripe.",
                    "type": "integer"
                },
                "pdf": {
                    "description": "The link to download the PDF of the credit note.",
                    "type": "string"
                },
                "reason": {
                    "description": "Reason for issuing this credit note, one of ` + "`" + `duplicate` + "`" + `, ` + "`" + `fraudulent` + "`" + `, ` + "`" + `order_change` + "`" + `, or ` + "`" + `product_unsatisfactory` + "`" + `",
                    "type": "string",
                    "format": "uuid"
                },
                "refund": {
                    "type": "string",
                    "format": "uuid"
                },
                "status": {
                    "description": "Status of this credit note, one of ` + "`" + `issued` + "`" + ` or ` + "`" + `void` + "`" + `. Learn more about [voiding credit notes](https://stripe.com/docs/billing/invoices/credit-notes#voiding).",
                    "type": "string",
                    "format": "uuid"
                },
                "subtotal": {
                    "description": "The integer amount in %s representing the amount of the credit note, excluding exclusive tax and invoice level discounts.",
                    "type": "integer"
                },
                "subtotal_excluding_tax": {
                    "description": "The integer amount in %s representing the amount of the credit note, excluding all tax and invoice level discounts.",
                    "type": "integer"
                },
                "tax_amounts": {
                    "description": "The aggregate amounts calculated per tax rate for all line items.",
                    "type": "array",
                    "items": {
                        "type": "string",
                        "format": "uuid"
                    }
                },
                "total": {
                    "description": "The integer amount in %s representing the total amount of the credit note, including tax and all discount.",
                    "type": "integer"
                },
                "total_excluding_tax": {
                    "description": "The integer amount in %s representing the total amount of the credit note, excluding tax, but including discounts.",
                    "type": "integer"
                },
                "type": {
                    "description": "Type of this credit note, one of ` + "`" + `pre_payment` + "`" + ` or ` + "`" + `post_payment` + "`" + `. A ` + "`" + `pre_payment` + "`" + ` credit note means it was issued when the invoice was open. A ` + "`" + `post_payment` + "`" + ` credit note means it was issued when the invoice was paid.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/credit.Type"
                        }
                    ]
                },
                "updated_at": {
                    "type": "string"
                },
                "voided_at": {
                    "description": "The time that the credit note was voided.",
                    "type": "string"
                }
            }
        },
        "credit.Type": {
            "type": "string",
            "enum": [
                "pre_payment",
                "post_payment"
            ],
            "x-enum-varnames": [
                "TypePrePayment",
                "TypePostPayment"
            ]
        },
        "customer.Customer": {
            "type": "object",
            "properties": {
                "address": {
                    "type": "string",
                    "format": "uuid"
                },
                "balance": {
                    "type": "integer"
                },
                "created_at": {
                    "type": "string"
                },
                "currency": {
                    "description": "CashBalance          *CashBalance                     ` + "`" + `json:\"cash_balance,omitempty\"` + "`" + `",
                    "type": "string"
                },
                "deleted_at": {
                    "$ref": "#/definitions/database.DeletedAt"
                },
                "delinquent": {
                    "type": "boolean"
                },
                "description": {
                    "type": "string"
                },
                "email": {
                    "description": "Discount             *Discount                        ` + "`" + `json:\"discount,omitempty\"` + "`" + `",
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "invoice_credit_balance": {
                    "$ref": "#/definitions/core.JSONB"
                },
                "invoice_prefix": {
                    "type": "string"
                },
                "invoice_settings": {
                    "type": "string",
                    "format": "uuid"
                },
                "livemode": {
                    "type": "boolean"
                },
                "metadata": {
                    "$ref": "#/definitions/core.JSONB"
                },
                "name": {
                    "type": "string"
                },
                "next_invoice_sequence": {
                    "type": "integer"
                },
                "object": {
                    "type": "string"
                },
                "phone": {
                    "type": "string"
                },
                "preferred_locales": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "shipping": {
                    "type": "string",
                    "format": "uuid"
                },
                "tax": {
                    "description": "Sources              *ApmsSourcesSourceList                  ` + "`" + `json:\"sources,omitempty\"` + "`" + `\nSubscriptions        *SubscriptionList                       ` + "`" + `json:\"subscriptions,omitempty\"` + "`" + `",
                    "type": "string",
                    "format": "uuid"
                },
                "tax_exempt": {
                    "$ref": "#/definitions/customer.TaxExempt"
                },
                "updated_at": {
                    "type": "string"
                }
            }
        },
        "customer.TaxExempt": {
            "type": "string",
            "enum": [
                "none",
                "exempt",
                "reverse"
            ],
            "x-enum-varnames": [
                "TaxExemptNone",
                "TaxExemptExempt",
                "TaxExemptReverse"
            ]
        },
        "database.DeletedAt": {
            "type": "object",
            "properties": {
                "time": {
                    "type": "string"
                },
                "valid": {
                    "description": "Valid is true if Time is not NULL",
                    "type": "boolean"
                }
            }
        },
        "discount.Discount": {
            "type": "object",
            "properties": {
                "amount": {
                    "type": "integer"
                },
                "checkout_session": {
                    "type": "string"
                },
                "coupon": {
                    "type": "string",
                    "format": "uuid"
                },
                "created_at": {
                    "type": "string"
                },
                "customer": {
                    "type": "string",
                    "format": "uuid"
                },
                "deleted_at": {
                    "$ref": "#/definitions/database.DeletedAt"
                },
                "end": {
                    "type": "integer"
                },
                "id": {
                    "type": "string"
                },
                "invoice": {
                    "type": "string"
                },
                "invoice_item": {
                    "type": "string"
                },
                "livemode": {
                    "type": "boolean"
                },
                "metadata": {
                    "$ref": "#/definitions/core.JSONB"
                },
                "object": {
                    "type": "string"
                },
                "promotion_code": {
                    "type": "string",
                    "format": "uuid"
                },
                "start": {
                    "type": "integer"
                },
                "subscription": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                }
            }
        },
        "dispute.Dispute": {
            "type": "object",
            "properties": {
                "amount": {
                    "description": "Disputed amount. Usually the amount of the charge, but can differ (usually because of currency fluctuation or because only part of the order is disputed).",
                    "type": "integer"
                },
                "balance_transactions": {
                    "description": "List of zero, one, or two balance transactions that show funds withdrawn and reinstated to your Stripe account as a result of this dispute.",
                    "type": "array",
                    "items": {
                        "type": "string",
                        "format": "uuid"
                    }
                },
                "charge": {
                    "type": "string",
                    "format": "uuid"
                },
                "created_at": {
                    "type": "string"
                },
                "currency": {
                    "description": "Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).",
                    "type": "string"
                },
                "deleted_at": {
                    "$ref": "#/definitions/database.DeletedAt"
                },
                "evidence": {
                    "type": "string",
                    "format": "uuid"
                },
                "evidence_details": {
                    "type": "string",
                    "format": "uuid"
                },
                "id": {
                    "type": "string"
                },
                "is_charge_refundable": {
                    "description": "If true, it is still possible to refund the disputed payment. Once the payment has been fully refunded, no further funds will be withdrawn from your Stripe account as a result of this dispute.",
                    "type": "boolean"
                },
                "livemode": {
                    "type": "boolean"
                },
                "metadata": {
                    "$ref": "#/definitions/core.JSONB"
                },
                "object": {
                    "type": "string"
                },
                "payment_intent": {
                    "type": "string",
                    "format": "uuid"
                },
                "reason": {
                    "description": "Reason given by cardholder for dispute. Possible values are ` + "`" + `bank_cannot_process` + "`" + `, ` + "`" + `check_returned` + "`" + `, ` + "`" + `credit_not_processed` + "`" + `, ` + "`" + `customer_initiated` + "`" + `, ` + "`" + `debit_not_authorized` + "`" + `, ` + "`" + `duplicate` + "`" + `, ` + "`" + `fraudulent` + "`" + `, ` + "`" + `general` + "`" + `, ` + "`" + `incorrect_account_details` + "`" + `, ` + "`" + `insufficient_funds` + "`" + `, ` + "`" + `product_not_received` + "`" + `, ` + "`" + `product_unacceptable` + "`" + `, ` + "`" + `subscription_canceled` + "`" + `, or ` + "`" + `unrecognized` + "`" + `. Read more about [dispute reasons](https://stripe.com/docs/disputes/categories).",
                    "allOf": [
                        {
                            "$ref": "#/definitions/dispute.Reason"
                        }
                    ]
                },
                "status": {
                    "description": "Current status of dispute. Possible values are ` + "`" + `warning_needs_response` + "`" + `, ` + "`" + `warning_under_review` + "`" + `, ` + "`" + `warning_closed` + "`" + `, ` + "`" + `needs_response` + "`" + `, ` + "`" + `under_review` + "`" + `, ` + "`" + `charge_refunded` + "`" + `, ` + "`" + `won` + "`" + `, or ` + "`" + `lost` + "`" + `.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/dispute.Status"
                        }
                    ]
                },
                "updated_at": {
                    "type": "string"
                }
            }
        },
        "dispute.Reason": {
            "type": "string",
            "enum": [
                "bank_cannot_process",
                "check_returned",
                "credit_not_processed",
                "customer_initiated",
                "debit_not_authorized",
                "duplicate",
                "fraudulent",
                "general",
                "incorrect_account_details",
                "insufficient_funds",
                "product_not_received",
                "product_unacceptable",
                "subscription_canceled",
                "unrecognized"
            ],
            "x-enum-varnames": [
                "ReasonBankCannotProcess",
                "ReasonCheckReturned",
                "ReasonCreditNotProcessed",
                "ReasonCustomerInitiated",
                "ReasonDebitNotAuthorized",
                "ReasonDuplicate",
                "ReasonFraudulent",
                "ReasonGeneral",
                "ReasonIncorrectAccountDetails",
                "ReasonInsufficientFunds",
                "ReasonProductNotReceived",
                "ReasonProductUnacceptable",
                "ReasonSubscriptionCanceled",
                "ReasonUnrecognized"
            ]
        },
        "dispute.Status": {
            "type": "string",
            "enum": [
                "warning_needs_response",
                "warning_under_review",
                "warning_closed",
                "needs_response",
                "under_review",
                "charge_refunded",
                "won",
                "lost"
            ],
            "x-enum-varnames": [
                "StatusWarningNeedsResponse",
                "StatusWarningUnderReview",
                "StatusWarningClosed",
                "StatusNeedsResponse",
                "StatusUnderReview",
                "StatusChargeRefunded",
                "StatusWon",
                "StatusLost"
            ]
        },
        "file.File": {
            "type": "object",
            "properties": {
                "created_at": {
                    "type": "string"
                },
                "deleted_at": {
                    "$ref": "#/definitions/database.DeletedAt"
                },
                "expires_at": {
                    "description": "The time at which the file expires and is no longer available in epoch seconds.",
                    "type": "integer"
                },
                "filename": {
                    "description": "A filename for the file, suitable for saving to a filesystem.",
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "links": {
                    "type": "string",
                    "format": "uuid"
                },
                "livemode": {
                    "type": "boolean"
                },
                "metadata": {
                    "$ref": "#/definitions/core.JSONB"
                },
                "object": {
                    "type": "string"
                },
                "purpose": {
                    "description": "The [purpose](https://stripe.com/docs/file-upload#uploading-a-file) of the uploaded file.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/file.Purpose"
                        }
                    ]
                },
                "size": {
                    "description": "The size in bytes of the file object.",
                    "type": "integer"
                },
                "title": {
                    "description": "A user friendly title for the document.",
                    "type": "string"
                },
                "type": {
                    "description": "The type of the file returned (e.g., ` + "`" + `csv` + "`" + `, ` + "`" + `pdf` + "`" + `, ` + "`" + `jpg` + "`" + `, or ` + "`" + `png` + "`" + `).",
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                },
                "url": {
                    "description": "The URL from which the file can be downloaded using your live secret API key.",
                    "type": "string"
                }
            }
        },
        "file.Purpose": {
            "type": "string",
            "enum": [
                "account_requirement",
                "additional_verification",
                "business_icon",
                "business_logo",
                "customer_signature",
                "dispute_evidence",
                "document_provider_identity_document",
                "finance_report_run",
                "identity_document",
                "identity_document_downloadable",
                "pci_document",
                "selfie",
                "sigma_scheduled_query",
                "tax_document_user_upload",
                "terminal_reader_splashscreen"
            ],
            "x-enum-varnames": [
                "PurposeAccountRequirement",
                "PurposeAdditionalVerification",
                "PurposeBusinessIcon",
                "PurposeBusinesslogo",
                "PurposeCustomerSignature",
                "PurposeDisputeEvidence",
                "PurposeDocumentProviderIdentityDocument",
                "PurposeFinanceReportRun",
                "PurposeIdentityDocument",
                "PurposeIdentityDocumentDownloadable",
                "PurposePciDocument",
                "PurposeSelfie",
                "PurposeSigmaScheduledQuery",
                "PurposeTaxDocumentUserUpload",
                "PurposeTerminalReaderSplashscreen"
            ]
        },
        "github_com_driver005_gateway_internal_intent.CancellationReason": {
            "type": "string",
            "enum": [
                "duplicate",
                "fraudulent",
                "requested_by_customer",
                "abandoned",
                "failed_invoice",
                "void_invoice",
                "automatic"
            ],
            "x-enum-varnames": [
                "CancellationReasonDuplicate",
                "CancellationReasonFraudulent",
                "CancellationReasonRequestedByCustomer",
                "CancellationReasonAbandoned",
                "CancellationReasonFailedInvoice",
                "CancellationReasonVoidInvoice",
                "CancellationReasonAutomatic"
            ]
        },
        "github_com_driver005_gateway_internal_intent.Status": {
            "type": "string",
            "enum": [
                "requires_payment_method",
                "requires_confirmation",
                "requires_action",
                "processing",
                "requires_capture",
                "canceled",
                "succeeded"
            ],
            "x-enum-varnames": [
                "StatusRequiresPaymentMethod",
                "StatusRequiresConfirmation",
                "StatusRequiresAction",
                "StatusProcessing",
                "StatusRequiresCapture",
                "StatusCanceled",
                "StatusSucceeded"
            ]
        },
        "github_com_driver005_gateway_internal_setup_intent.CancellationReason": {
            "type": "string",
            "enum": [
                "abandoned",
                "requested_by_customer",
                "duplicate"
            ],
            "x-enum-varnames": [
                "CancellationReasonAbandoned",
                "CancellationReasonRequestedByCustomer",
                "CancellationReasonDuplicate"
            ]
        },
        "github_com_driver005_gateway_internal_setup_intent.Status": {
            "type": "string",
            "enum": [
                "requires_payment_method",
                "requires_confirmation",
                "requires_action",
                "processing",
                "succeeded",
                "failed",
                "abandoned"
            ],
            "x-enum-varnames": [
                "StatusRequiresPaymentMethod",
                "StatusRequiresConfirmation",
                "StatusRequiresAction",
                "StatusProcessing",
                "StatusSucceeded",
                "StatusFailed",
                "StatusAbandoned"
            ]
        },
        "github_com_driver005_gateway_payment_card.Card": {
            "type": "object",
            "properties": {
                "account": {
                    "type": "string",
                    "format": "uuid"
                },
                "address_city": {
                    "type": "string"
                },
                "address_country": {
                    "type": "string"
                },
                "address_line1": {
                    "type": "string"
                },
                "address_line1_check": {
                    "$ref": "#/definitions/card.AddressLine1Check"
                },
                "address_line2": {
                    "type": "string"
                },
                "address_state": {
                    "type": "string"
                },
                "address_zip": {
                    "type": "string"
                },
                "address_zip_check": {
                    "$ref": "#/definitions/card.AddressZipCheck"
                },
                "available_payout_methods": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "brand": {
                    "$ref": "#/definitions/card.Brand"
                },
                "country": {
                    "type": "string"
                },
                "created_at": {
                    "type": "string"
                },
                "currency": {
                    "type": "string"
                },
                "customer": {
                    "type": "string",
                    "format": "uuid"
                },
                "cvc_check": {
                    "$ref": "#/definitions/card.CvcCheck"
                },
                "default_for_currency": {
                    "type": "boolean"
                },
                "deleted_at": {
                    "$ref": "#/definitions/database.DeletedAt"
                },
                "dynamic_last4": {
                    "type": "string"
                },
                "exp_month": {
                    "type": "integer"
                },
                "exp_year": {
                    "type": "integer"
                },
                "fingerprint": {
                    "type": "string"
                },
                "funding": {
                    "$ref": "#/definitions/card.Funding"
                },
                "id": {
                    "type": "string"
                },
                "last4": {
                    "type": "string"
                },
                "livemode": {
                    "type": "boolean"
                },
                "metadata": {
                    "$ref": "#/definitions/core.JSONB"
                },
                "name": {
                    "type": "string"
                },
                "object": {
                    "type": "string"
                },
                "status": {
                    "type": "string"
                },
                "tokenization_method": {
                    "$ref": "#/definitions/card.TokenizationMethod"
                },
                "updated_at": {
                    "type": "string"
                }
            }
        },
        "intent.CaptureMethod": {
            "type": "string",
            "enum": [
                "automatic",
                "manual"
            ],
            "x-enum-varnames": [
                "CaptureMethodAutomatic",
                "CaptureMethodManual"
            ]
        },
        "intent.ConfirmationMethod": {
            "type": "string",
            "enum": [
                "automatic",
                "manual"
            ],
            "x-enum-varnames": [
                "ConfirmationMethodAutomatic",
                "ConfirmationMethodManual"
            ]
        },
        "intent.PaymentIntent": {
            "type": "object",
            "properties": {
                "amount": {
                    "type": "integer"
                },
                "amount_capturable": {
                    "type": "integer"
                },
                "amount_details": {
                    "type": "string",
                    "format": "uuid"
                },
                "amount_received": {
                    "type": "integer"
                },
                "automatic_payment_methods": {
                    "type": "boolean"
                },
                "canceled_at": {
                    "type": "integer"
                },
                "cancellation_reason": {
                    "$ref": "#/definitions/github_com_driver005_gateway_internal_intent.CancellationReason"
                },
                "capture_method": {
                    "$ref": "#/definitions/intent.CaptureMethod"
                },
                "client_secret": {
                    "type": "string"
                },
                "confirmation_method": {
                    "$ref": "#/definitions/intent.ConfirmationMethod"
                },
                "created_at": {
                    "type": "string"
                },
                "currency": {
                    "type": "string"
                },
                "customer": {
                    "type": "string",
                    "format": "uuid"
                },
                "deleted_at": {
                    "$ref": "#/definitions/database.DeletedAt"
                },
                "description": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "last_payment_error": {
                    "type": "string",
                    "format": "uuid"
                },
                "latest_charge": {
                    "type": "string",
                    "format": "uuid"
                },
                "livemode": {
                    "type": "boolean"
                },
                "metadata": {
                    "$ref": "#/definitions/core.JSONB"
                },
                "next_action": {
                    "type": "string",
                    "format": "uuid"
                },
                "object": {
                    "type": "string"
                },
                "payment_method": {
                    "type": "string",
                    "format": "uuid"
                },
                "payment_method_options": {
                    "type": "string",
                    "format": "uuid"
                },
                "payment_method_types": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "processing": {
                    "type": "string",
                    "format": "uuid"
                },
                "receipt_email": {
                    "type": "string"
                },
                "review": {
                    "type": "string",
                    "format": "uuid"
                },
                "setup_future_usage": {
                    "$ref": "#/definitions/intent.SetupFutureUsage"
                },
                "shipping": {
                    "type": "string",
                    "format": "uuid"
                },
                "statement_descriptor": {
                    "type": "string"
                },
                "statement_descriptor_suffix": {
                    "type": "string"
                },
                "status": {
                    "$ref": "#/definitions/github_com_driver005_gateway_internal_intent.Status"
                },
                "updated_at": {
                    "type": "string"
                }
            }
        },
        "intent.SetupFutureUsage": {
            "type": "string",
            "enum": [
                "off_session",
                "on_session"
            ],
            "x-enum-varnames": [
                "SetupFutureUsageOffSession",
                "SetupFutureUsageOnSession"
            ]
        },
        "intent.SetupIntent": {
            "type": "object",
            "properties": {
                "attach_to_self": {
                    "type": "boolean"
                },
                "cancellation_reason": {
                    "$ref": "#/definitions/github_com_driver005_gateway_internal_setup_intent.CancellationReason"
                },
                "client_secret": {
                    "type": "string"
                },
                "created_at": {
                    "type": "string"
                },
                "customer": {
                    "type": "string",
                    "format": "uuid"
                },
                "deleted_at": {
                    "$ref": "#/definitions/database.DeletedAt"
                },
                "description": {
                    "type": "string"
                },
                "flow_directions": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "id": {
                    "type": "string"
                },
                "last_setup_error": {
                    "type": "string",
                    "format": "uuid"
                },
                "livemode": {
                    "type": "boolean"
                },
                "mandate": {
                    "type": "string",
                    "format": "uuid"
                },
                "metadata": {
                    "$ref": "#/definitions/core.JSONB"
                },
                "next_action": {
                    "type": "string",
                    "format": "uuid"
                },
                "object": {
                    "type": "string"
                },
                "payment_method": {
                    "type": "string",
                    "format": "uuid"
                },
                "payment_method_types": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "single_use_mandate": {
                    "type": "string",
                    "format": "uuid"
                },
                "status": {
                    "$ref": "#/definitions/github_com_driver005_gateway_internal_setup_intent.Status"
                },
                "updated_at": {
                    "type": "string"
                },
                "usage": {
                    "$ref": "#/definitions/intent.Usage"
                }
            }
        },
        "intent.Usage": {
            "type": "string",
            "enum": [
                "off_session",
                "on_session"
            ],
            "x-enum-varnames": [
                "UsageOffSession",
                "UsageOnSession"
            ]
        },
        "invoice.BillingReason": {
            "type": "string",
            "enum": [
                "subscription_cycle",
                "subscription_create",
                "subscription_update",
                "subscription_threshold",
                "subscription",
                "manual",
                "upcoming"
            ],
            "x-enum-varnames": [
                "BillingReasonSubscriptionCycle",
                "BillingReasonSubscriptionCreate",
                "BillingReasonSubscriptionUpdate",
                "BillingReasonSubscriptionThreshold",
                "BillingReasonSubscription",
                "BillingReasonManual",
                "BillingReasonUpcoming"
            ]
        },
        "invoice.CollectionMethod": {
            "type": "string",
            "enum": [
                "charge_automatically",
                "send_invoice"
            ],
            "x-enum-varnames": [
                "CollectionMethodChargeAutomatically",
                "CollectionMethodSendInvoiced"
            ]
        },
        "invoice.Invoice": {
            "type": "object",
            "properties": {
                "account_country": {
                    "type": "string"
                },
                "account_name": {
                    "type": "string"
                },
                "account_tax_ids": {
                    "type": "string",
                    "format": "uuid"
                },
                "amount_due": {
                    "type": "integer"
                },
                "amount_paid": {
                    "type": "integer"
                },
                "amount_remaining": {
                    "type": "integer"
                },
                "attempt_count": {
                    "type": "integer"
                },
                "attempted": {
                    "type": "boolean"
                },
                "auto_advance": {
                    "type": "boolean"
                },
                "automatic_tax": {
                    "type": "string",
                    "format": "uuid"
                },
                "billing_reason": {
                    "$ref": "#/definitions/invoice.BillingReason"
                },
                "charge": {
                    "type": "string",
                    "format": "uuid"
                },
                "collection_method": {
                    "$ref": "#/definitions/invoice.CollectionMethod"
                },
                "created_at": {
                    "type": "string"
                },
                "currency": {
                    "type": "string"
                },
                "custom_fields": {
                    "type": "array",
                    "items": {
                        "type": "string",
                        "format": "uuid"
                    }
                },
                "customer": {
                    "type": "string",
                    "format": "uuid"
                },
                "customer_address": {
                    "type": "string",
                    "format": "uuid"
                },
                "customer_email": {
                    "type": "string"
                },
                "customer_name": {
                    "type": "string"
                },
                "customer_phone": {
                    "type": "string"
                },
                "customer_shipping": {
                    "type": "string",
                    "format": "uuid"
                },
                "customer_tax_exempt": {
                    "$ref": "#/definitions/customer.TaxExempt"
                },
                "customer_tax_ids": {
                    "type": "array",
                    "items": {
                        "type": "string",
                        "format": "uuid"
                    }
                },
                "default_payment_method": {
                    "type": "string",
                    "format": "uuid"
                },
                "default_tax_rates": {
                    "type": "string",
                    "format": "uuid"
                },
                "deleted_at": {
                    "$ref": "#/definitions/database.DeletedAt"
                },
                "description": {
                    "type": "string"
                },
                "discountable": {
                    "type": "boolean"
                },
                "discounts": {
                    "type": "array",
                    "items": {
                        "type": "string",
                        "format": "uuid"
                    }
                },
                "due_date": {
                    "type": "string"
                },
                "ending_balance": {
                    "type": "integer"
                },
                "footer": {
                    "type": "string"
                },
                "from_invoice": {
                    "type": "string",
                    "format": "uuid"
                },
                "hosted_invoice_url": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "invoice_pdf": {
                    "type": "string"
                },
                "last_finalization_error": {
                    "type": "string",
                    "format": "uuid"
                },
                "latest_revision": {
                    "type": "string",
                    "format": "uuid"
                },
                "lines": {
                    "type": "array",
                    "items": {
                        "type": "string",
                        "format": "uuid"
                    }
                },
                "livemode": {
                    "type": "boolean"
                },
                "metadata": {
                    "$ref": "#/definitions/core.JSONB"
                },
                "next_payment_attempt": {
                    "type": "integer"
                },
                "number": {
                    "type": "string"
                },
                "object": {
                    "type": "string"
                },
                "paid": {
                    "type": "boolean"
                },
                "paid_out_of_band": {
                    "type": "boolean"
                },
                "payment_intent": {
                    "type": "string",
                    "format": "uuid"
                },
                "payment_settings": {
                    "type": "string",
                    "format": "uuid"
                },
                "period_end": {
                    "type": "string"
                },
                "period_start": {
                    "type": "string"
                },
                "post_payment_credit_notes_amount": {
                    "type": "integer"
                },
                "pre_payment_credit_notes_amount": {
                    "type": "integer"
                },
                "price": {
                    "type": "string",
                    "format": "uuid"
                },
                "quantity": {
                    "type": "integer"
                },
                "receipt_number": {
                    "type": "string"
                },
                "rendering_options": {
                    "type": "string",
                    "format": "uuid"
                },
                "starting_balance": {
                    "type": "integer"
                },
                "statement_descriptor": {
                    "type": "string"
                },
                "status": {
                    "$ref": "#/definitions/invoice.Status"
                },
                "status_transitions": {
                    "type": "string",
                    "format": "uuid"
                },
                "subscription": {
                    "type": "string",
                    "format": "uuid"
                },
                "subscription_proration_date": {
                    "type": "integer"
                },
                "subtotal": {
                    "type": "integer"
                },
                "subtotal_excluding_tax": {
                    "type": "integer"
                },
                "tax": {
                    "type": "integer"
                },
                "threshold_reason": {
                    "type": "string",
                    "format": "uuid"
                },
                "total": {
                    "type": "integer"
                },
                "total_excluding_tax": {
                    "type": "integer"
                },
                "total_tax_amounts": {
                    "type": "array",
                    "items": {
                        "type": "string",
                        "format": "uuid"
                    }
                },
                "updated_at": {
                    "type": "string"
                },
                "webhooks_delivered_at": {
                    "type": "integer"
                }
            }
        },
        "invoice.Status": {
            "type": "string",
            "enum": [
                "draft",
                "open",
                "paid",
                "uncollectible",
                "void"
            ],
            "x-enum-varnames": [
                "StatusDraft",
                "StatusOpen",
                "StatusPaid",
                "StatusUncollectible",
                "StatusVoid"
            ]
        },
        "invoiceItem.Invoiceitem": {
            "type": "object",
            "properties": {
                "amount": {
                    "description": "Amount (in the ` + "`" + `currency` + "`" + ` specified) of the invoice item. This should always be equal to ` + "`" + `unit_amount * quantity` + "`" + `.",
                    "type": "integer"
                },
                "created_at": {
                    "type": "string"
                },
                "currency": {
                    "description": "Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).",
                    "type": "string"
                },
                "customer": {
                    "type": "string",
                    "format": "uuid"
                },
                "date": {
                    "description": "Time at which the object was created. Measured in seconds since the Unix epoch.",
                    "type": "integer"
                },
                "deleted_at": {
                    "$ref": "#/definitions/database.DeletedAt"
                },
                "description": {
                    "description": "An arbitrary string attached to the object. Often useful for displaying to users.",
                    "type": "string"
                },
                "discountable": {
                    "description": "If true, discounts will apply to this invoice item. Always false for prorations.",
                    "type": "boolean"
                },
                "discounts": {
                    "description": "The discounts which apply to the invoice item. Item discounts are applied before invoice discounts. Use ` + "`" + `expand[]=discounts` + "`" + ` to expand each discount.",
                    "type": "array",
                    "items": {
                        "type": "string",
                        "format": "uuid"
                    }
                },
                "id": {
                    "type": "string"
                },
                "invoice": {
                    "type": "string",
                    "format": "uuid"
                },
                "livemode": {
                    "type": "boolean"
                },
                "metadata": {
                    "$ref": "#/definitions/core.JSONB"
                },
                "object": {
                    "type": "string"
                },
                "period_end": {
                    "description": "Unique identifier for the object.",
                    "type": "integer"
                },
                "period_start": {
                    "type": "integer"
                },
                "price": {
                    "type": "string",
                    "format": "uuid"
                },
                "proration": {
                    "description": "Whether the invoice item was created automatically as a proration adjustment when the customer switched plans.",
                    "type": "boolean"
                },
                "quantity": {
                    "description": "Quantity of units for the invoice item. If the invoice item is a proration, the quantity of the subscription that the proration was computed for.",
                    "type": "integer"
                },
                "subscription": {
                    "type": "string",
                    "format": "uuid"
                },
                "subscription_item": {
                    "type": "string",
                    "format": "uuid"
                },
                "tax_rates": {
                    "description": "The tax rates which apply to the invoice item. When set, the ` + "`" + `default_tax_rates` + "`" + ` on the invoice do not apply to this invoice item.",
                    "type": "string",
                    "format": "uuid"
                },
                "unit_amount": {
                    "description": "Unit amount (in the ` + "`" + `currency` + "`" + ` specified) of the invoice item.",
                    "type": "integer"
                },
                "unit_amount_decimal": {
                    "description": "Same as ` + "`" + `unit_amount` + "`" + `, but contains a decimal value with at most 12 decimal places.",
                    "type": "number"
                },
                "updated_at": {
                    "type": "string"
                }
            }
        },
        "item.LineItem": {
            "type": "object",
            "properties": {
                "amount": {
                    "type": "integer"
                },
                "amount_excluding_tax": {
                    "type": "integer"
                },
                "created_at": {
                    "type": "string"
                },
                "currency": {
                    "type": "string"
                },
                "deleted_at": {
                    "$ref": "#/definitions/database.DeletedAt"
                },
                "description": {
                    "type": "string"
                },
                "discountable": {
                    "type": "boolean"
                },
                "discounts": {
                    "type": "array",
                    "items": {
                        "type": "string",
                        "format": "uuid"
                    }
                },
                "id": {
                    "type": "string"
                },
                "livemode": {
                    "type": "boolean"
                },
                "metadata": {
                    "$ref": "#/definitions/core.JSONB"
                },
                "object": {
                    "type": "string"
                },
                "period_end": {
                    "type": "string"
                },
                "period_start": {
                    "type": "string"
                },
                "price": {
                    "type": "string",
                    "format": "uuid"
                },
                "product": {
                    "type": "string",
                    "format": "uuid"
                },
                "proration": {
                    "type": "boolean"
                },
                "proration_details": {
                    "type": "string",
                    "format": "uuid"
                },
                "quantity": {
                    "type": "integer"
                },
                "subscription": {
                    "type": "string"
                },
                "subscription_item": {
                    "type": "string"
                },
                "tax_rates": {
                    "type": "array",
                    "items": {
                        "type": "string",
                        "format": "uuid"
                    }
                },
                "type": {
                    "type": "string"
                },
                "unit_amount_excluding_tax": {
                    "type": "number"
                },
                "updated_at": {
                    "type": "string"
                }
            }
        },
        "link.PaymentLink": {
            "type": "object",
            "properties": {
                "active": {
                    "type": "boolean"
                },
                "after_completion": {
                    "type": "string",
                    "format": "uuid"
                },
                "allow_promotion_codes": {
                    "type": "boolean"
                },
                "application_fee_amount": {
                    "type": "integer"
                },
                "application_fee_percent": {
                    "type": "number"
                },
                "automatic_tax": {
                    "type": "boolean"
                },
                "billing_address_collection": {
                    "type": "string"
                },
                "consent_collection": {
                    "type": "string",
                    "format": "uuid"
                },
                "created_at": {
                    "type": "string"
                },
                "currency": {
                    "type": "string"
                },
                "custom_text": {
                    "type": "string",
                    "format": "uuid"
                },
                "customer_creation": {
                    "type": "string"
                },
                "deleted_at": {
                    "$ref": "#/definitions/database.DeletedAt"
                },
                "id": {
                    "type": "string"
                },
                "line_items": {
                    "type": "array",
                    "items": {
                        "type": "string",
                        "format": "uuid"
                    }
                },
                "livemode": {
                    "type": "boolean"
                },
                "metadata": {
                    "$ref": "#/definitions/core.JSONB"
                },
                "object": {
                    "type": "string"
                },
                "payment_intent_data": {
                    "type": "string",
                    "format": "uuid"
                },
                "payment_method_collection": {
                    "type": "string"
                },
                "payment_method_types": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "phone_number_collection": {
                    "type": "boolean"
                },
                "shipping_address_collection": {
                    "type": "string",
                    "format": "uuid"
                },
                "shipping_options": {
                    "type": "array",
                    "items": {
                        "type": "string",
                        "format": "uuid"
                    }
                },
                "submit_type": {
                    "type": "string"
                },
                "subscription_data": {
                    "type": "string",
                    "format": "uuid"
                },
                "tax_id_collection": {
                    "type": "boolean"
                },
                "updated_at": {
                    "type": "string"
                },
                "url": {
                    "type": "string"
                }
            }
        },
        "mandate.Mandate": {
            "type": "object",
            "properties": {
                "created_at": {
                    "type": "string"
                },
                "deleted_at": {
                    "$ref": "#/definitions/database.DeletedAt"
                },
                "id": {
                    "type": "string"
                },
                "livemode": {
                    "type": "boolean"
                },
                "metadata": {
                    "$ref": "#/definitions/core.JSONB"
                },
                "object": {
                    "type": "string"
                },
                "payment_method": {
                    "type": "string",
                    "format": "uuid"
                },
                "payment_method_details": {
                    "type": "string",
                    "format": "uuid"
                },
                "single_use": {
                    "type": "string",
                    "format": "uuid"
                },
                "status": {
                    "$ref": "#/definitions/mandate.Status"
                },
                "type": {
                    "$ref": "#/definitions/mandate.Type"
                },
                "updated_at": {
                    "type": "string"
                }
            }
        },
        "mandate.Status": {
            "type": "string",
            "enum": [
                "active",
                "inactive",
                "pending"
            ],
            "x-enum-varnames": [
                "StatusActive",
                "StatusInactive",
                "StatusPending"
            ]
        },
        "mandate.Type": {
            "type": "string",
            "enum": [
                "multi_use",
                "single_use"
            ],
            "x-enum-varnames": [
                "TypeMultiUse",
                "TypeSingleUse"
            ]
        },
        "method.PaymentMethod": {
            "type": "object",
            "properties": {
                "acss_debit": {
                    "type": "string",
                    "format": "uuid"
                },
                "affirm": {
                    "type": "string",
                    "format": "uuid"
                },
                "afterpay_clearpay": {
                    "type": "string",
                    "format": "uuid"
                },
                "alipay": {
                    "type": "string",
                    "format": "uuid"
                },
                "au_becs_debit": {
                    "type": "string",
                    "format": "uuid"
                },
                "bacs_debit": {
                    "type": "string",
                    "format": "uuid"
                },
                "bancontact": {
                    "type": "string",
                    "format": "uuid"
                },
                "billing_details": {
                    "type": "string",
                    "format": "uuid"
                },
                "blik": {
                    "type": "string",
                    "format": "uuid"
                },
                "boleto": {
                    "type": "string",
                    "format": "uuid"
                },
                "btc_pay": {
                    "type": "string",
                    "format": "uuid"
                },
                "card": {
                    "type": "string",
                    "format": "uuid"
                },
                "card_present": {
                    "type": "string",
                    "format": "uuid"
                },
                "created_at": {
                    "type": "string"
                },
                "customer": {
                    "type": "string",
                    "format": "uuid"
                },
                "customer_balance": {
                    "type": "string",
                    "format": "uuid"
                },
                "deleted_at": {
                    "$ref": "#/definitions/database.DeletedAt"
                },
                "eps": {
                    "type": "string",
                    "format": "uuid"
                },
                "fpx": {
                    "type": "string",
                    "format": "uuid"
                },
                "giropay": {
                    "type": "string",
                    "format": "uuid"
                },
                "grabpay": {
                    "type": "string",
                    "format": "uuid"
                },
                "id": {
                    "type": "string"
                },
                "ideal": {
                    "type": "string",
                    "format": "uuid"
                },
                "interac_present": {
                    "type": "string",
                    "format": "uuid"
                },
                "klarna": {
                    "type": "string",
                    "format": "uuid"
                },
                "konbini": {
                    "type": "string",
                    "format": "uuid"
                },
                "link": {
                    "type": "string",
                    "format": "uuid"
                },
                "livemode": {
                    "type": "boolean"
                },
                "metadata": {
                    "$ref": "#/definitions/core.JSONB"
                },
                "object": {
                    "type": "string"
                },
                "oxxo": {
                    "type": "string",
                    "format": "uuid"
                },
                "p24": {
                    "type": "string",
                    "format": "uuid"
                },
                "paynow": {
                    "type": "string",
                    "format": "uuid"
                },
                "pix": {
                    "type": "string",
                    "format": "uuid"
                },
                "promptpay": {
                    "type": "string",
                    "format": "uuid"
                },
                "radar_options": {
                    "type": "string",
                    "format": "uuid"
                },
                "sepa_debit": {
                    "type": "string",
                    "format": "uuid"
                },
                "sofort": {
                    "type": "string",
                    "format": "uuid"
                },
                "type": {
                    "$ref": "#/definitions/method.Type"
                },
                "updated_at": {
                    "type": "string"
                },
                "us_bank_account": {
                    "type": "string",
                    "format": "uuid"
                },
                "wechat_pay": {
                    "type": "string",
                    "format": "uuid"
                }
            }
        },
        "method.Type": {
            "type": "string",
            "enum": [
                "acss_debit",
                "affirm",
                "afterpay_clearpay",
                "alipay",
                "au_becs_debit",
                "bacs_debit",
                "bancontact",
                "blik",
                "boleto",
                "btcpay",
                "card",
                "card_present",
                "customer_balance",
                "eps",
                "fpx",
                "giropay",
                "grabpay",
                "ideal",
                "interac_present",
                "klarna",
                "konbini",
                "link",
                "oxxo",
                "p24",
                "paynow",
                "pix",
                "promptpay",
                "sepa_debit",
                "sofort",
                "us_bank_account",
                "wechat_pay"
            ],
            "x-enum-varnames": [
                "TypeAcssDebit",
                "TypeAffirm",
                "TypeAfterpayClearpay",
                "TypeAlipay",
                "TypeAuBecsDebit",
                "TypeBacsDebit",
                "TypeBancontact",
                "TypeBlik",
                "TypeBoleto",
                "TypeBtcpay",
                "TypeCard",
                "TypeCardPresent",
                "TypeCustomerBalance",
                "TypeEps",
                "TypeFpx",
                "TypeGiropay",
                "TypeGrabpay",
                "TypeIdeal",
                "TypeInteracPresent",
                "TypeKlarna",
                "TypeKonbini",
                "TypeLink",
                "TypeOxxo",
                "TypeP24",
                "TypePaynow",
                "TypePix",
                "TypePromptpay",
                "TypeSepaDebit",
                "TypeSofort",
                "TypeUsBankAccount",
                "TypeWechatPay"
            ]
        },
        "payout.Method": {
            "type": "string",
            "enum": [
                "standard",
                "instant"
            ],
            "x-enum-varnames": [
                "MethodStandard",
                "MethodInstant"
            ]
        },
        "payout.Payout": {
            "type": "object",
            "properties": {
                "amount": {
                    "type": "integer"
                },
                "arrival_date": {
                    "type": "integer"
                },
                "automatic": {
                    "type": "boolean"
                },
                "balance_transaction": {
                    "type": "string",
                    "format": "uuid"
                },
                "created_at": {
                    "type": "string"
                },
                "currency": {
                    "type": "string"
                },
                "deleted_at": {
                    "$ref": "#/definitions/database.DeletedAt"
                },
                "description": {
                    "type": "string"
                },
                "destination": {
                    "type": "string"
                },
                "failure_balance_transaction": {
                    "type": "string",
                    "format": "uuid"
                },
                "failure_code": {
                    "type": "string"
                },
                "failure_message": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "livemode": {
                    "type": "boolean"
                },
                "metadata": {
                    "$ref": "#/definitions/core.JSONB"
                },
                "method": {
                    "$ref": "#/definitions/payout.Method"
                },
                "object": {
                    "type": "string"
                },
                "original_payout": {
                    "type": "string",
                    "format": "uuid"
                },
                "reversed_by": {
                    "type": "string",
                    "format": "uuid"
                },
                "source_type": {
                    "$ref": "#/definitions/payout.SourceType"
                },
                "statement_descriptor": {
                    "type": "string"
                },
                "status": {
                    "$ref": "#/definitions/payout.Status"
                },
                "type": {
                    "$ref": "#/definitions/payout.Type"
                },
                "updated_at": {
                    "type": "string"
                }
            }
        },
        "payout.SourceType": {
            "type": "string",
            "enum": [
                "card",
                "fpx",
                "bank_account"
            ],
            "x-enum-varnames": [
                "SourceTypeCard",
                "SourceTypeFpx",
                "SourceTypeBankAccount"
            ]
        },
        "payout.Status": {
            "type": "string",
            "enum": [
                "paid",
                "pending",
                "in_transit",
                "canceled",
                "failed"
            ],
            "x-enum-varnames": [
                "StatusPaid",
                "StatusPending",
                "StatusInTransit",
                "StatusCanceled",
                "StatusFailed"
            ]
        },
        "payout.Type": {
            "type": "string",
            "enum": [
                "bank_account",
                "card"
            ],
            "x-enum-varnames": [
                "TypeBankAccount",
                "TypeCard"
            ]
        },
        "plan.Plan": {
            "type": "object",
            "properties": {
                "active": {
                    "description": "Whether the plan can be used for new purchases.",
                    "type": "boolean"
                },
                "aggregate_usage": {
                    "description": "Specifies a usage aggregation strategy for plans of ` + "`" + `usage_type=metered` + "`" + `. Allowed values are ` + "`" + `sum` + "`" + ` for summing up all usage during a period, ` + "`" + `last_during_period` + "`" + ` for using the last usage record reported within a period, ` + "`" + `last_ever` + "`" + ` for using the last usage record ever (across period bounds) or ` + "`" + `max` + "`" + ` which uses the usage record with the maximum reported usage during a period. Defaults to ` + "`" + `sum` + "`" + `.",
                    "type": "string"
                },
                "amount": {
                    "description": "The unit amount in %s to be charged, represented as a whole integer if possible. Only set if ` + "`" + `billing_scheme=per_unit` + "`" + `.",
                    "type": "integer"
                },
                "amount_decimal": {
                    "description": "The unit amount in %s to be charged, represented as a decimal string with at most 12 decimal places. Only set if ` + "`" + `billing_scheme=per_unit` + "`" + `.",
                    "type": "number"
                },
                "billing_scheme": {
                    "description": "Describes how to compute the price per period. Either ` + "`" + `per_unit` + "`" + ` or ` + "`" + `tiered` + "`" + `. ` + "`" + `per_unit` + "`" + ` indicates that the fixed amount (specified in ` + "`" + `amount` + "`" + `) will be charged per unit in ` + "`" + `quantity` + "`" + ` (for plans with ` + "`" + `usage_type=licensed` + "`" + `), or per unit of total usage (for plans with ` + "`" + `usage_type=metered` + "`" + `). ` + "`" + `tiered` + "`" + ` indicates that the unit pricing will be computed using a tiering strategy as defined using the ` + "`" + `tiers` + "`" + ` and ` + "`" + `tiers_mode` + "`" + ` attributes.",
                    "type": "string"
                },
                "created_at": {
                    "type": "string"
                },
                "currency": {
                    "description": "Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).",
                    "type": "string"
                },
                "deleted_at": {
                    "$ref": "#/definitions/database.DeletedAt"
                },
                "id": {
                    "type": "string"
                },
                "interval": {
                    "description": "The frequency at which a subscription is billed. One of ` + "`" + `day` + "`" + `, ` + "`" + `week` + "`" + `, ` + "`" + `month` + "`" + ` or ` + "`" + `year` + "`" + `.",
                    "type": "string"
                },
                "interval_count": {
                    "description": "The number of intervals (specified in the ` + "`" + `interval` + "`" + ` attribute) between subscription billings. For example, ` + "`" + `interval=month` + "`" + ` and ` + "`" + `interval_count=3` + "`" + ` bills every 3 months.",
                    "type": "integer"
                },
                "livemode": {
                    "type": "boolean"
                },
                "metadata": {
                    "$ref": "#/definitions/core.JSONB"
                },
                "nickname": {
                    "description": "A brief description of the plan, hidden from customers.",
                    "type": "string"
                },
                "object": {
                    "type": "string"
                },
                "product": {
                    "type": "string",
                    "format": "uuid"
                },
                "tiers": {
                    "description": "Each element represents a pricing tier. This parameter requires ` + "`" + `billing_scheme` + "`" + ` to be set to ` + "`" + `tiered` + "`" + `. See also the documentation for ` + "`" + `billing_scheme` + "`" + `.",
                    "type": "array",
                    "items": {
                        "type": "string",
                        "format": "uuid"
                    }
                },
                "tiers_mode": {
                    "description": "Defines if the tiering price should be ` + "`" + `graduated` + "`" + ` or ` + "`" + `volume` + "`" + ` based. In ` + "`" + `volume` + "`" + `-based tiering, the maximum quantity within a period determines the per unit price. In ` + "`" + `graduated` + "`" + ` tiering, pricing can change as the quantity grows.",
                    "type": "string"
                },
                "transform_usage": {
                    "type": "string",
                    "format": "uuid"
                },
                "trial_period_days": {
                    "description": "Default number of trial days when subscribing a customer to this plan using [` + "`" + `trial_from_plan=true` + "`" + `](https://stripe.com/docs/api#create_subscription-trial_from_plan).",
                    "type": "integer"
                },
                "updated_at": {
                    "type": "string"
                },
                "usage_type": {
                    "description": "Configures how the quantity per period should be determined. Can be either ` + "`" + `metered` + "`" + ` or ` + "`" + `licensed` + "`" + `. ` + "`" + `licensed` + "`" + ` automatically bills the ` + "`" + `quantity` + "`" + ` set when adding it to a subscription. ` + "`" + `metered` + "`" + ` aggregates the total usage based on usage records. Defaults to ` + "`" + `licensed` + "`" + `.",
                    "type": "string"
                }
            }
        },
        "price.BillingScheme": {
            "type": "string",
            "enum": [
                "per_unit",
                "tiered"
            ],
            "x-enum-varnames": [
                "BillingSchemePerUnit",
                "BillingSchemeTiered"
            ]
        },
        "price.Price": {
            "type": "object",
            "properties": {
                "active": {
                    "type": "boolean"
                },
                "billing_scheme": {
                    "$ref": "#/definitions/price.BillingScheme"
                },
                "created_at": {
                    "type": "string"
                },
                "currency": {
                    "type": "string"
                },
                "deleted_at": {
                    "$ref": "#/definitions/database.DeletedAt"
                },
                "id": {
                    "type": "string"
                },
                "livemode": {
                    "type": "boolean"
                },
                "lookup_key": {
                    "type": "string"
                },
                "metadata": {
                    "$ref": "#/definitions/core.JSONB"
                },
                "nickname": {
                    "type": "string"
                },
                "object": {
                    "type": "string"
                },
                "product": {
                    "type": "string",
                    "format": "uuid"
                },
                "recurring": {
                    "type": "string",
                    "format": "uuid"
                },
                "tax_behavior": {
                    "$ref": "#/definitions/price.TaxBehavior"
                },
                "tiers": {
                    "type": "array",
                    "items": {
                        "type": "string",
                        "format": "uuid"
                    }
                },
                "tiers_mode": {
                    "$ref": "#/definitions/price.TiersMode"
                },
                "transform_quantity": {
                    "type": "string",
                    "format": "uuid"
                },
                "type": {
                    "$ref": "#/definitions/price.Type"
                },
                "unit_amount": {
                    "type": "integer"
                },
                "unit_amount_decimal": {
                    "type": "number"
                },
                "updated_at": {
                    "type": "string"
                }
            }
        },
        "price.TaxBehavior": {
            "type": "string",
            "enum": [
                "inclusive",
                "exclusive",
                "unspecified"
            ],
            "x-enum-varnames": [
                "TaxBehaviorInclusive",
                "TaxBehaviorExclusive",
                "TaxBehaviorUnspecified"
            ]
        },
        "price.TiersMode": {
            "type": "string",
            "enum": [
                "graduated",
                "volume"
            ],
            "x-enum-varnames": [
                "TiersModeGraduated",
                "TiersModeVolume"
            ]
        },
        "price.Type": {
            "type": "string",
            "enum": [
                "one_time",
                "recurring"
            ],
            "x-enum-varnames": [
                "TypeOneTime",
                "TypeRecurring"
            ]
        },
        "product.Product": {
            "type": "object",
            "properties": {
                "active": {
                    "type": "boolean"
                },
                "created_at": {
                    "type": "string"
                },
                "deleted_at": {
                    "$ref": "#/definitions/database.DeletedAt"
                },
                "description": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "images": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "livemode": {
                    "type": "boolean"
                },
                "metadata": {
                    "$ref": "#/definitions/core.JSONB"
                },
                "name": {
                    "type": "string"
                },
                "object": {
                    "type": "string"
                },
                "package_dimensions": {
                    "type": "string",
                    "format": "uuid"
                },
                "shippable": {
                    "type": "boolean"
                },
                "statement_descriptor": {
                    "type": "string"
                },
                "tax_code": {
                    "type": "string",
                    "format": "uuid"
                },
                "unit_label": {
                    "type": "string"
                },
                "updated": {
                    "type": "integer"
                },
                "updated_at": {
                    "type": "string"
                },
                "url": {
                    "type": "string"
                }
            }
        },
        "promotion.PromotionCode": {
            "type": "object",
            "properties": {
                "active": {
                    "type": "boolean"
                },
                "code": {
                    "type": "string"
                },
                "coupon": {
                    "type": "string",
                    "format": "uuid"
                },
                "created_at": {
                    "type": "string"
                },
                "customer": {
                    "type": "string",
                    "format": "uuid"
                },
                "deleted_at": {
                    "$ref": "#/definitions/database.DeletedAt"
                },
                "expires_at": {
                    "type": "integer"
                },
                "first_time_transaction": {
                    "type": "boolean"
                },
                "id": {
                    "type": "string"
                },
                "livemode": {
                    "type": "boolean"
                },
                "max_redemptions": {
                    "type": "integer"
                },
                "metadata": {
                    "$ref": "#/definitions/core.JSONB"
                },
                "minimum_amount": {
                    "type": "integer"
                },
                "minimum_amount_currency": {
                    "type": "string"
                },
                "object": {
                    "type": "string"
                },
                "times_redeemed": {
                    "type": "integer"
                },
                "updated_at": {
                    "type": "string"
                }
            }
        },
        "quote.Quote": {
            "type": "object",
            "properties": {
                "amount_subtotal": {
                    "description": "Total before any discounts or taxes are applied.",
                    "type": "integer"
                },
                "amount_total": {
                    "description": "Total after discounts and taxes are applied.",
                    "type": "integer"
                },
                "automatic_tax": {
                    "type": "boolean"
                },
                "collection_method": {
                    "description": "Either ` + "`" + `charge_automatically` + "`" + `, or ` + "`" + `send_invoice` + "`" + `. When charging automatically, Stripe will attempt to pay invoices at the end of the subscription cycle or on finalization using the default payment method attached to the subscription or customer. When sending an invoice, Stripe will email your customer an invoice with payment instructions and mark the subscription as ` + "`" + `active` + "`" + `. Defaults to ` + "`" + `charge_automatically` + "`" + `.",
                    "type": "string"
                },
                "computed": {
                    "type": "string",
                    "format": "uuid"
                },
                "created_at": {
                    "type": "string"
                },
                "currency": {
                    "description": "Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).",
                    "type": "string"
                },
                "customer": {
                    "type": "string",
                    "format": "uuid"
                },
                "default_tax_rates": {
                    "type": "array",
                    "items": {
                        "type": "string",
                        "format": "uuid"
                    }
                },
                "deleted_at": {
                    "$ref": "#/definitions/database.DeletedAt"
                },
                "description": {
                    "description": "A description that will be displayed on the quote PDF.",
                    "type": "string"
                },
                "discounts": {
                    "type": "array",
                    "items": {
                        "type": "string",
                        "format": "uuid"
                    }
                },
                "expires_at": {
                    "description": "The date on which the quote will be canceled if in ` + "`" + `open` + "`" + ` or ` + "`" + `draft` + "`" + ` status. Measured in seconds since the Unix epoch.",
                    "type": "integer"
                },
                "footer": {
                    "description": "A footer that will be displayed on the quote PDF.",
                    "type": "string"
                },
                "header": {
                    "description": "A header that will be displayed on the quote PDF.",
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "invoice": {
                    "type": "string",
                    "format": "uuid"
                },
                "invoice_settings": {
                    "description": "Unique identifier for the object.",
                    "type": "string",
                    "format": "uuid"
                },
                "line_items": {
                    "type": "array",
                    "items": {
                        "type": "string",
                        "format": "uuid"
                    }
                },
                "livemode": {
                    "type": "boolean"
                },
                "metadata": {
                    "$ref": "#/definitions/core.JSONB"
                },
                "number": {
                    "description": "A unique number that identifies this particular quote. This number is assigned once the quote is [finalized](https://stripe.com/docs/quotes/overview#finalize).",
                    "type": "string"
                },
                "object": {
                    "type": "string"
                },
                "status": {
                    "description": "The status of the quote.",
                    "type": "string"
                },
                "status_transitions": {
                    "type": "string",
                    "format": "uuid"
                },
                "subscription": {
                    "type": "string",
                    "format": "uuid"
                },
                "subscription_data": {
                    "type": "string",
                    "format": "uuid"
                },
                "subscription_schedule": {
                    "type": "string",
                    "format": "uuid"
                },
                "total_details": {
                    "type": "string",
                    "format": "uuid"
                },
                "updated_at": {
                    "type": "string"
                }
            }
        },
        "refund.FailureReason": {
            "type": "string",
            "enum": [
                "lost_or_stolen_card",
                "expired_or_canceled_card",
                "unknown"
            ],
            "x-enum-varnames": [
                "FailureReasonLostOrStolenCard",
                "FailureReasonExpiredOrCanceledCard",
                "FailureReasonUnknown"
            ]
        },
        "refund.Reason": {
            "type": "string",
            "enum": [
                "duplicate",
                "fraudulent",
                "requested_by_customer",
                "expired_uncaptured_charge"
            ],
            "x-enum-varnames": [
                "ReasonDuplicate",
                "ReasonFraudulent",
                "ReasonRequestedByCustomer",
                "ReasonExpiredUncapturedCharge"
            ]
        },
        "refund.Refund": {
            "type": "object",
            "properties": {
                "amount": {
                    "type": "integer"
                },
                "balance_transaction": {
                    "type": "string",
                    "format": "uuid"
                },
                "charge": {
                    "type": "string",
                    "format": "uuid"
                },
                "created_at": {
                    "type": "string"
                },
                "currency": {
                    "type": "string"
                },
                "deleted_at": {
                    "$ref": "#/definitions/database.DeletedAt"
                },
                "description": {
                    "type": "string"
                },
                "failure_balance_transaction": {
                    "type": "string",
                    "format": "uuid"
                },
                "failure_reason": {
                    "$ref": "#/definitions/refund.FailureReason"
                },
                "id": {
                    "type": "string"
                },
                "instructions_email": {
                    "type": "string"
                },
                "livemode": {
                    "type": "boolean"
                },
                "metadata": {
                    "$ref": "#/definitions/core.JSONB"
                },
                "next_action": {
                    "type": "string",
                    "format": "uuid"
                },
                "object": {
                    "type": "string"
                },
                "payment_intent": {
                    "type": "string",
                    "format": "uuid"
                },
                "reason": {
                    "$ref": "#/definitions/refund.Reason"
                },
                "receipt_number": {
                    "type": "string"
                },
                "status": {
                    "$ref": "#/definitions/refund.Status"
                },
                "updated_at": {
                    "type": "string"
                }
            }
        },
        "refund.Status": {
            "type": "string",
            "enum": [
                "pending",
                "requires_action",
                "succeeded",
                "failed",
                "canceled"
            ],
            "x-enum-varnames": [
                "StatusPending",
                "StatusRequiresAction",
                "StatusSucceeded",
                "StatusFailed",
                "StatusCanceled"
            ]
        },
        "source.Flow": {
            "type": "string",
            "enum": [
                "redirect",
                "receiver",
                "code_verification",
                "none"
            ],
            "x-enum-varnames": [
                "FlowRedirect",
                "FlowReceiver",
                "FlowCodeVerification",
                "FlowNone"
            ]
        },
        "source.Source": {
            "type": "object",
            "properties": {
                "ach_credit_transfer": {
                    "type": "string",
                    "format": "uuid"
                },
                "ach_debit": {
                    "type": "string",
                    "format": "uuid"
                },
                "acss_debit": {
                    "type": "string",
                    "format": "uuid"
                },
                "alipay": {
                    "type": "string",
                    "format": "uuid"
                },
                "amount": {
                    "type": "integer"
                },
                "au_becs_debit": {
                    "type": "string",
                    "format": "uuid"
                },
                "bancontact": {
                    "type": "string",
                    "format": "uuid"
                },
                "card": {
                    "type": "string",
                    "format": "uuid"
                },
                "card_present": {
                    "type": "string",
                    "format": "uuid"
                },
                "client_secret": {
                    "type": "string"
                },
                "code_verification": {
                    "type": "string",
                    "format": "uuid"
                },
                "created_at": {
                    "type": "string"
                },
                "currency": {
                    "type": "string"
                },
                "customer": {
                    "type": "string",
                    "format": "uuid"
                },
                "deleted_at": {
                    "$ref": "#/definitions/database.DeletedAt"
                },
                "eps": {
                    "type": "string",
                    "format": "uuid"
                },
                "flow": {
                    "$ref": "#/definitions/source.Flow"
                },
                "giropay": {
                    "type": "string",
                    "format": "uuid"
                },
                "id": {
                    "type": "string"
                },
                "ideal": {
                    "type": "string",
                    "format": "uuid"
                },
                "klarna": {
                    "type": "string",
                    "format": "uuid"
                },
                "livemode": {
                    "type": "boolean"
                },
                "metadata": {
                    "$ref": "#/definitions/core.JSONB"
                },
                "multibanco": {
                    "type": "string",
                    "format": "uuid"
                },
                "object": {
                    "type": "string"
                },
                "owner": {
                    "type": "string",
                    "format": "uuid"
                },
                "p24": {
                    "type": "string",
                    "format": "uuid"
                },
                "receiver": {
                    "type": "string",
                    "format": "uuid"
                },
                "redirect": {
                    "type": "string",
                    "format": "uuid"
                },
                "sepa_debit": {
                    "type": "string",
                    "format": "uuid"
                },
                "sofort": {
                    "type": "string",
                    "format": "uuid"
                },
                "source_order": {
                    "type": "string",
                    "format": "uuid"
                },
                "statement_descriptor": {
                    "type": "string"
                },
                "status": {
                    "$ref": "#/definitions/source.Status"
                },
                "three_d_secure": {
                    "type": "string",
                    "format": "uuid"
                },
                "type": {
                    "$ref": "#/definitions/source.Type"
                },
                "updated_at": {
                    "type": "string"
                },
                "usage": {
                    "$ref": "#/definitions/source.Usage"
                },
                "wechat": {
                    "type": "string",
                    "format": "uuid"
                }
            }
        },
        "source.Status": {
            "type": "string",
            "enum": [
                "canceled",
                "chargeable",
                "consumed",
                "failed",
                "pending"
            ],
            "x-enum-varnames": [
                "StatusCanceled",
                "StatusChargeable",
                "StatusConsumed",
                "StatusFailed",
                "StatusPending"
            ]
        },
        "source.Type": {
            "type": "string",
            "enum": [
                "ach_reusable_transfer",
                "ach_debit",
                "alipay",
                "bancontact",
                "card",
                "card_present",
                "eps",
                "giropay",
                "ideal",
                "multibanco",
                "klarna",
                "p24",
                "sepa_debit",
                "sofort",
                "three_d_secure",
                "wechat"
            ],
            "x-enum-varnames": [
                "TypeAchreusableTransfer",
                "TypeAchDebit",
                "TypeAlipay",
                "TypeBancontact",
                "TypeCard",
                "TypeCardPresent",
                "TypeEps",
                "TypeGiropay",
                "TypeIdeal",
                "TypeMultibanco",
                "TypeKlarna",
                "TypeP24",
                "TypeSepaDebit",
                "TypeSofort",
                "TypeThreeDSecure",
                "TypeWechat"
            ]
        },
        "source.Usage": {
            "type": "string",
            "enum": [
                "reusable",
                "single_use"
            ],
            "x-enum-varnames": [
                "UsageReusable",
                "UsageSingleUse"
            ]
        },
        "subscription.Subscription": {
            "type": "object",
            "properties": {
                "automatic_tax": {
                    "type": "boolean"
                },
                "billing_cycle_anchor": {
                    "description": "Determines the date of the first full invoice, and, for plans with ` + "`" + `month` + "`" + ` or ` + "`" + `year` + "`" + ` intervals, the day of the month for subsequent invoices. The timestamp is in UTC format.",
                    "type": "integer"
                },
                "billing_thresholds": {
                    "type": "string",
                    "format": "uuid"
                },
                "cancel_at": {
                    "description": "A date in the future at which the subscription will automatically get canceled",
                    "type": "integer"
                },
                "cancel_at_period_end": {
                    "description": "If the subscription has been canceled with the ` + "`" + `at_period_end` + "`" + ` flag set to ` + "`" + `true` + "`" + `, ` + "`" + `cancel_at_period_end` + "`" + ` on the subscription will be true. You can use this attribute to determine whether a subscription that has a status of active is scheduled to be canceled at the end of the current period.",
                    "type": "boolean"
                },
                "canceled_at": {
                    "description": "If the subscription has been canceled, the date of that cancellation. If the subscription was canceled with ` + "`" + `cancel_at_period_end` + "`" + `, ` + "`" + `canceled_at` + "`" + ` will reflect the time of the most recent update request, not the end of the subscription period when the subscription is automatically moved to a canceled state.",
                    "type": "integer"
                },
                "collection_method": {
                    "description": "Either ` + "`" + `charge_automatically` + "`" + `, or ` + "`" + `send_invoice` + "`" + `. When charging automatically, Stripe will attempt to pay this subscription at the end of the cycle using the default source attached to the customer. When sending an invoice, Stripe will email your customer an invoice with payment instructions and mark the subscription as ` + "`" + `active` + "`" + `.",
                    "type": "string"
                },
                "created_at": {
                    "type": "string"
                },
                "currency": {
                    "description": "Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).",
                    "type": "string"
                },
                "current_period_end": {
                    "description": "End of the current period that the subscription has been invoiced for. At the end of this period, a new invoice will be created.",
                    "type": "integer"
                },
                "current_period_start": {
                    "description": "Start of the current period that the subscription has been invoiced for.",
                    "type": "integer"
                },
                "customer": {
                    "type": "string",
                    "format": "uuid"
                },
                "days_until_due": {
                    "description": "Number of days a customer has to pay invoices generated by this subscription. This value will be ` + "`" + `null` + "`" + ` for subscriptions where ` + "`" + `collection_method=charge_automatically` + "`" + `.",
                    "type": "integer"
                },
                "default_payment_method": {
                    "type": "string",
                    "format": "uuid"
                },
                "default_tax_rates": {
                    "description": "The tax rates that will apply to any subscription item that does not have ` + "`" + `tax_rates` + "`" + ` set. Invoices created will have their ` + "`" + `default_tax_rates` + "`" + ` populated from the subscription.",
                    "type": "string",
                    "format": "uuid"
                },
                "deleted_at": {
                    "$ref": "#/definitions/database.DeletedAt"
                },
                "description": {
                    "description": "The subscription's description, meant to be displayable to the customer. Use this field to optionally store an explanation of the subscription for rendering in Stripe surfaces.",
                    "type": "string"
                },
                "discount": {
                    "type": "string",
                    "format": "uuid"
                },
                "ended_at": {
                    "description": "If the subscription has ended, the date the subscription ended.",
                    "type": "integer"
                },
                "id": {
                    "type": "string"
                },
                "livemode": {
                    "type": "boolean"
                },
                "metadata": {
                    "$ref": "#/definitions/core.JSONB"
                },
                "next_pending_invoice_item_invoice": {
                    "description": "Specifies the approximate timestamp on which any pending invoice items will be billed according to the schedule provided at ` + "`" + `pending_invoice_item_interval` + "`" + `.",
                    "type": "integer"
                },
                "object": {
                    "type": "string"
                },
                "pause_collection": {
                    "type": "string",
                    "format": "uuid"
                },
                "payment_settings": {
                    "type": "string",
                    "format": "uuid"
                },
                "pending_invoice_item_interval": {
                    "type": "string",
                    "format": "uuid"
                },
                "pending_setup_intent": {
                    "type": "string",
                    "format": "uuid"
                },
                "pending_update": {
                    "type": "string",
                    "format": "uuid"
                },
                "price": {
                    "type": "string",
                    "format": "uuid"
                },
                "schedule": {
                    "type": "string",
                    "format": "uuid"
                },
                "start_date": {
                    "description": "Date when the subscription was first created. The date might differ from the ` + "`" + `created` + "`" + ` date due to backdating.",
                    "type": "integer"
                },
                "status": {
                    "description": "Possible values are ` + "`" + `incomplete` + "`" + `, ` + "`" + `incomplete_expired` + "`" + `, ` + "`" + `trialing` + "`" + `, ` + "`" + `active` + "`" + `, ` + "`" + `past_due` + "`" + `, ` + "`" + `canceled` + "`" + `, or ` + "`" + `unpaid` + "`" + `.   For ` + "`" + `collection_method=charge_automatically` + "`" + ` a subscription moves into ` + "`" + `incomplete` + "`" + ` if the initial payment attempt fails. A subscription in this state can only have metadata and default_source updated. Once the first invoice is paid, the subscription moves into an ` + "`" + `active` + "`" + ` state. If the first invoice is not paid within 23 hours, the subscription transitions to ` + "`" + `incomplete_expired` + "`" + `. This is a terminal state, the open invoice will be voided and no further invoices will be generated.   A subscription that is currently in a trial period is ` + "`" + `trialing` + "`" + ` and moves to ` + "`" + `active` + "`" + ` when the trial period is over.   If subscription ` + "`" + `collection_method=charge_automatically` + "`" + ` it becomes ` + "`" + `past_due` + "`" + ` when payment to renew it fails and ` + "`" + `canceled` + "`" + ` or ` + "`" + `unpaid` + "`" + ` (depending on your subscriptions settings) when Stripe has exhausted all payment retry attempts.   If subscription ` + "`" + `collection_method=send_invoice` + "`" + ` it becomes ` + "`" + `past_due` + "`" + ` when its invoice is not paid by the due date, and ` + "`" + `canceled` + "`" + ` or ` + "`" + `unpaid` + "`" + ` if it is still not paid by an additional deadline after that. Note that when a subscription has a status of ` + "`" + `unpaid` + "`" + `, no subsequent invoices will be attempted (invoices will be created, but then immediately automatically closed). After receiving updated payment information from a customer, you may choose to reopen and pay their closed invoices.",
                    "type": "string"
                },
                "trial_end": {
                    "description": "If the subscription has a trial, the end of that trial.",
                    "type": "integer"
                },
                "trial_start": {
                    "description": "If the subscription has a trial, the beginning of that trial.",
                    "type": "integer"
                },
                "updated_at": {
                    "type": "string"
                }
            }
        },
        "subscriptionItem.SubscriptionItem": {
            "type": "object",
            "properties": {
                "created_at": {
                    "type": "string"
                },
                "deleted_at": {
                    "$ref": "#/definitions/database.DeletedAt"
                },
                "id": {
                    "type": "string"
                },
                "livemode": {
                    "type": "boolean"
                },
                "metadata": {
                    "$ref": "#/definitions/core.JSONB"
                },
                "object": {
                    "type": "string"
                },
                "price": {
                    "type": "string",
                    "format": "uuid"
                },
                "quantity": {
                    "description": "The [quantity](https://stripe.com/docs/subscriptions/quantities) of the plan to which the customer should be subscribed.",
                    "type": "integer"
                },
                "subscription": {
                    "type": "string",
                    "format": "uuid"
                },
                "tax_rates": {
                    "description": "The tax rates which apply to this ` + "`" + `subscription_item` + "`" + `. When set, the ` + "`" + `default_tax_rates` + "`" + ` on the subscription do not apply to this ` + "`" + `subscription_item` + "`" + `.",
                    "type": "string",
                    "format": "uuid"
                },
                "updated_at": {
                    "type": "string"
                }
            }
        },
        "subscriptionSchedule.SubscriptionSchedule": {
            "type": "object",
            "properties": {
                "canceled_at": {
                    "description": "Time at which the subscription schedule was canceled. Measured in seconds since the Unix epoch.",
                    "type": "integer"
                },
                "completed_at": {
                    "description": "Time at which the subscription schedule was completed. Measured in seconds since the Unix epoch.",
                    "type": "integer"
                },
                "created_at": {
                    "type": "string"
                },
                "customer": {
                    "type": "string",
                    "format": "uuid"
                },
                "default_settings": {
                    "type": "string",
                    "format": "uuid"
                },
                "deleted_at": {
                    "$ref": "#/definitions/database.DeletedAt"
                },
                "end_behavior": {
                    "description": "Behavior of the subscription schedule and underlying subscription when it ends. Possible values are ` + "`" + `release` + "`" + ` or ` + "`" + `cancel` + "`" + ` with the default being ` + "`" + `release` + "`" + `. ` + "`" + `release` + "`" + ` will end the subscription schedule and keep the underlying subscription running.` + "`" + `cancel` + "`" + ` will end the subscription schedule and cancel the underlying subscription.",
                    "type": "string"
                },
                "end_date": {
                    "description": "The end of this phase of the subscription schedule.",
                    "type": "integer"
                },
                "id": {
                    "type": "string"
                },
                "livemode": {
                    "type": "boolean"
                },
                "metadata": {
                    "$ref": "#/definitions/core.JSONB"
                },
                "object": {
                    "type": "string"
                },
                "phases": {
                    "description": "Configuration for the subscription schedule's phases.",
                    "type": "string",
                    "format": "uuid"
                },
                "released_at": {
                    "description": "Time at which the subscription schedule was released. Measured in seconds since the Unix epoch.",
                    "type": "string"
                },
                "released_subscription": {
                    "description": "ID of the subscription once managed by the subscription schedule (if it is released).",
                    "type": "string"
                },
                "start_date": {
                    "description": "The start of this phase of the subscription schedule.",
                    "type": "integer"
                },
                "status": {
                    "description": "The present status of the subscription schedule. Possible values are ` + "`" + `not_started` + "`" + `, ` + "`" + `active` + "`" + `, ` + "`" + `completed` + "`" + `, ` + "`" + `released` + "`" + `, and ` + "`" + `canceled` + "`" + `. You can read more about the different states in our [behavior guide](https://stripe.com/docs/billing/subscriptions/subscription-schedules).",
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                }
            }
        },
        "usageRecord.UsageRecord": {
            "type": "object",
            "properties": {
                "created_at": {
                    "type": "string"
                },
                "deleted_at": {
                    "$ref": "#/definitions/database.DeletedAt"
                },
                "id": {
                    "type": "string"
                },
                "livemode": {
                    "type": "boolean"
                },
                "metadata": {
                    "$ref": "#/definitions/core.JSONB"
                },
                "object": {
                    "description": "String representing the object's type. Objects of the same type share the same value.",
                    "type": "string"
                },
                "quantity": {
                    "description": "The usage quantity for the specified date.",
                    "type": "integer"
                },
                "subscription_item": {
                    "description": "The ID of the subscription item this usage record contains data for.",
                    "type": "string"
                },
                "timestamp": {
                    "description": "The timestamp when this usage occurred.",
                    "type": "integer"
                },
                "updated_at": {
                    "type": "string"
                }
            }
        },
        "uuid.NullUUID": {
            "type": "object",
            "properties": {
                "uuid": {
                    "type": "string"
                },
                "valid": {
                    "description": "Valid is true if UUID is not NULL",
                    "type": "boolean"
                }
            }
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "2.0",
	Host:             "localhost:3000",
	BasePath:         "/api",
	Schemes:          []string{"http"},
	Title:            "Fiber Swagger Example API",
	Description:      "This is a sample server server.",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
