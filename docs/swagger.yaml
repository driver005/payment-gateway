basePath: /api
definitions:
  account.Account:
    properties:
      business_profile:
        format: uuid
        type: string
      created_at:
        type: string
      deleted_at:
        $ref: '#/definitions/database.DeletedAt'
      id:
        type: string
      livemode:
        type: boolean
      metadata:
        $ref: '#/definitions/core.JSONB'
      object:
        type: string
      updated_at:
        type: string
    type: object
  attempt.SetupAttempt:
    properties:
      attach_to_self:
        type: boolean
      created_at:
        type: string
      customer:
        format: uuid
        type: string
      deleted_at:
        $ref: '#/definitions/database.DeletedAt'
      flow_directions:
        items:
          type: string
        type: array
      id:
        type: string
      livemode:
        type: boolean
      metadata:
        $ref: '#/definitions/core.JSONB'
      object:
        type: string
      payment_method:
        format: uuid
        type: string
      payment_method_details:
        format: uuid
        type: string
      setup_error:
        format: uuid
        type: string
      setup_intent:
        format: uuid
        type: string
      status:
        $ref: '#/definitions/attempt.Status'
      updated_at:
        type: string
      usage:
        $ref: '#/definitions/attempt.Usage'
    type: object
  attempt.Status:
    enum:
    - requires_confirmation
    - requires_action
    - processing
    - succeeded
    - failed
    - abandoned
    type: string
    x-enum-varnames:
    - StatusRequiresConfirmation
    - StatusRequiresAction
    - StatusProcessing
    - StatusSucceeded
    - StatusFailed
    - StatusAbandoned
  attempt.Usage:
    enum:
    - off_session
    - on_session
    type: string
    x-enum-varnames:
    - UsageOffSession
    - UsageOnSession
  balance.Balance:
    properties:
      available:
        description: Funds that are available to be transferred or paid out, whether
          automatically by Stripe or explicitly via the [Transfers API](https://stripe.com/docs/api#transfers)
          or [Payouts API](https://stripe.com/docs/api#payouts). The available balance
          for each currency and payment type can be found in the `source_types` property.
        items:
          format: uuid
          type: string
        type: array
      connect_reserved:
        description: Funds held due to negative balances on connected Custom accounts.
          The connect reserve balance for each currency and payment type can be found
          in the `source_types` property.
        items:
          format: uuid
          type: string
        type: array
      created_at:
        type: string
      deleted_at:
        $ref: '#/definitions/database.DeletedAt'
      id:
        type: string
      instant_available:
        description: Funds that can be paid out using Instant Payouts.
        items:
          format: uuid
          type: string
        type: array
      issuing:
        format: uuid
        type: string
      livemode:
        type: boolean
      metadata:
        $ref: '#/definitions/core.JSONB'
      object:
        type: string
      pending:
        description: Funds that are not yet available in the balance, due to the 7-day
          rolling pay cycle. The pending balance for each currency, and for each payment
          type, can be found in the `source_types` property.
        items:
          format: uuid
          type: string
        type: array
      updated_at:
        type: string
    type: object
  balance.BalanceTransaction:
    properties:
      amount:
        description: Gross amount of the transaction, in %s.
        type: integer
      available_on:
        description: The date the transaction's net funds will become available in
          the Stripe balance.
        type: integer
      created_at:
        type: string
      currency:
        description: Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html),
          in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
        type: string
      deleted_at:
        $ref: '#/definitions/database.DeletedAt'
      description:
        description: An arbitrary string attached to the object. Often useful for
          displaying to users.
        type: string
      exchange_rate:
        description: The exchange rate used, if applicable, for this transaction.
          Specifically, if money was converted from currency A to currency B, then
          the `amount` in currency A, times `exchange_rate`, would be the `amount`
          in currency B. For example, suppose you charged a customer 10.00 EUR. Then
          the PaymentIntent's `amount` would be `1000` and `currency` would be `eur`.
          Suppose this was converted into 12.34 USD in your Stripe account. Then the
          BalanceTransaction's `amount` would be `1234`, `currency` would be `usd`,
          and `exchange_rate` would be `1.234`.
        type: number
      fee:
        description: Fees (in %s) paid for this transaction.
        type: integer
      fee_details:
        description: Detailed breakdown of fees (in %s) paid for this transaction.
        items:
          format: uuid
          type: string
        type: array
      id:
        type: string
      livemode:
        type: boolean
      metadata:
        $ref: '#/definitions/core.JSONB'
      net:
        description: Net amount of the transaction, in %s.
        type: integer
      object:
        type: string
      reporting_category:
        description: '[Learn more](https://stripe.com/docs/reports/reporting-categories)
          about how reporting categories can help you understand balance transactions
          from an accounting perspective.'
        type: string
      source:
        type: string
      status:
        allOf:
        - $ref: '#/definitions/balance.Status'
        description: If the transaction's net funds are available in the Stripe balance
          yet. Either `available` or `pending`.
      type:
        allOf:
        - $ref: '#/definitions/balance.Type'
        description: 'Transaction type: `adjustment`, `advance`, `advance_funding`,
          `anticipation_repayment`, `application_fee`, `application_fee_refund`, `charge`,
          `connect_collection_transfer`, `contribution`, `issuing_authorization_hold`,
          `issuing_authorization_release`, `issuing_dispute`, `issuing_transaction`,
          `payment`, `payment_failure_refund`, `payment_refund`, `payout`, `payout_cancel`,
          `payout_failure`, `refund`, `refund_failure`, `reserve_transaction`, `reserved_funds`,
          `stripe_fee`, `stripe_fx_fee`, `tax_fee`, `topup`, `topup_reversal`, `transfer`,
          `transfer_cancel`, `transfer_failure`, or `transfer_refund`. [Learn more](https://stripe.com/docs/reports/balance-transaction-types)
          about balance transaction types and what they represent. If you are looking
          to classify transactions for accounting purposes, you might want to consider
          `reporting_category` instead.'
      updated_at:
        type: string
    type: object
  balance.Status:
    enum:
    - available
    - pending
    type: string
    x-enum-varnames:
    - StatusAvailable
    - StatusPending
  balance.Type:
    enum:
    - adjustment
    - advance
    - advance_funding
    - anticipation_repayment
    - application_fee
    - application_fee_refund
    - charge
    - connect_collection_transfer
    - contribution
    - issuing_authorization_hold
    - issuing_authorization_release
    - issuing_dispute
    - issuing_transaction
    - payment
    - payment_failure_refund
    - payment_refund
    - payout
    - payout_cancel
    - payout_failure
    - refund
    - refund_failure
    - reserve_transaction
    - reserved_funds
    - reporting_category
    - stripe_fee
    - stripe_fx_fee
    - tax_fee
    - topup
    - topup_reversal
    - transfer
    - transfer_cancel
    - transfer_failure
    - transfer_refund
    type: string
    x-enum-varnames:
    - TypeAdjustment
    - TypeAdvance
    - TypeAdvanceFunding
    - TypeAnticipationRepayment
    - TypeApplicationFee
    - TypeApplicationFeeRefund
    - TypeCharge
    - TypeConnectCollectionTransfer
    - TypeContribution
    - TypeIssuingAuthorizationHold
    - TypeIssuingAuthorizationRelease
    - TypeIssuingDispute
    - TypeIssuingTransaction
    - TypePayment
    - TypePaymentFailureRefund
    - TypePaymentRefund
    - TypePayout
    - TypePayoutCancel
    - TypePayoutFailure
    - TypeRefund
    - TypeRefundFailure
    - TypeReserveTransaction
    - TypeReservedFunds
    - TypeReportingCategory
    - TypeStripeFee
    - TypeStripeFxFee
    - TypeTaxFee
    - TypeTopup
    - TypeTopupReversal
    - TypeTransfer
    - TypeTransferCancel
    - TypeTransferFailure
    - TypeTransferRefund
  bank.AccountHolderType:
    enum:
    - individual
    - company
    type: string
    x-enum-varnames:
    - AccountHolderTypeIndividual
    - AccountHolderTypeCompany
  bank.AccountType:
    enum:
    - checking
    - savings
    - futsu
    - toza
    type: string
    x-enum-varnames:
    - AccountTypeChecking
    - AccountTypeSavings
    - AccountTypeFutsu
    - AccountTypeToza
  bank.BankAccount:
    properties:
      account:
        $ref: '#/definitions/account.Account'
      account_holder_name:
        type: string
      account_holder_type:
        $ref: '#/definitions/bank.AccountHolderType'
      account_id:
        $ref: '#/definitions/uuid.NullUUID'
      account_type:
        $ref: '#/definitions/bank.AccountType'
      available_payout_methods:
        items:
          type: string
        type: array
      bank_name:
        type: string
      country:
        type: string
      created_at:
        type: string
      currency:
        type: string
      customer:
        $ref: '#/definitions/customer.Customer'
      customer_id:
        $ref: '#/definitions/uuid.NullUUID'
      default_for_currency:
        type: boolean
      deleted_at:
        $ref: '#/definitions/database.DeletedAt'
      fingerprint:
        type: string
      id:
        type: string
      last4:
        type: string
      livemode:
        type: boolean
      metadata:
        $ref: '#/definitions/core.JSONB'
      object:
        type: string
      routing_number:
        type: string
      status:
        $ref: '#/definitions/bank.Status'
      updated_at:
        type: string
    type: object
  bank.Status:
    enum:
    - new
    - validated
    - verified
    - verification_failed
    - errored
    type: string
    x-enum-varnames:
    - StatusNew
    - StatusValidated
    - StatusVerified
    - StatusVerificationFailed
    - StatusErrored
  card.AddressLine1Check:
    enum:
    - pass
    - fail
    - unavailable
    - unchecked
    type: string
    x-enum-varnames:
    - AddressLine1CheckPass
    - AddressLine1CheckFail
    - AddressLine1CheckUnavailable
    - AddressLine1CheckUnchecked
  card.AddressZipCheck:
    enum:
    - pass
    - fail
    - unavailable
    - unchecked
    type: string
    x-enum-varnames:
    - AddressZipCheckPass
    - AddressZipCheckFail
    - AddressZipCheckUnavailable
    - AddressZipCheckUnchecked
  card.Brand:
    enum:
    - American Express
    - Diners Club
    - Discover
    - JCB
    - MasterCard
    - UnionPay
    - Visa
    - Unknown
    type: string
    x-enum-varnames:
    - BrandAmericanExpress
    - BrandDinersClub
    - BrandDiscover
    - BrandJCB
    - BrandMasterCard
    - BrandUnionPay
    - BrandVisa
    - BrandUnknown
  card.CvcCheck:
    enum:
    - pass
    - fail
    - unavailable
    - unchecked
    type: string
    x-enum-varnames:
    - CvcCheckPass
    - CvcCheckFail
    - CvcCheckUnavailable
    - CvcCheckUnchecked
  card.Funding:
    enum:
    - credit
    - debit
    - prepaid
    - unknown
    type: string
    x-enum-varnames:
    - FundingCredit
    - FundingDebit
    - FundingPrepaid
    - FundingUnknown
  card.TokenizationMethod:
    enum:
    - android_pay
    - apple_pay
    - masterpass
    - visa_checkout
    - unknown
    type: string
    x-enum-varnames:
    - TokenizationMethodAndroidPay
    - TokenizationMethodApplePay
    - TokenizationMethodMasterpass
    - TokenizationMethodVisaCheckout
    - TokenizationMethodUnknown
  cash.CashBalance:
    properties:
      available:
        allOf:
        - $ref: '#/definitions/core.JSONB'
        description: A hash of all cash balances available to this customer. You cannot
          delete a customer with any cash balances, even if the balance is 0. Amounts
          are represented in the [smallest currency unit](https://stripe.com/docs/currencies#zero-decimal).
      created_at:
        type: string
      customer:
        description: The ID of the customer whose cash balance this object represents.
        type: string
      deleted_at:
        $ref: '#/definitions/database.DeletedAt'
      id:
        type: string
      livemode:
        type: boolean
      metadata:
        $ref: '#/definitions/core.JSONB'
      object:
        type: string
      setting_reconciliation_mode:
        description: The configuration for how funds that land in the customer cash
          balance are reconciled.
        type: string
      setting_using_merchant_default:
        description: A flag to indicate if reconciliation mode returned is the user's
          default or is specific to this customer cash balance
        type: boolean
      updated_at:
        type: string
    type: object
  charge.Charge:
    properties:
      amount:
        type: integer
      amount_captured:
        type: integer
      amount_refunded:
        type: integer
      balance_transaction:
        format: uuid
        type: string
      billing_details:
        format: uuid
        type: string
      calculated_statement_descriptor:
        type: string
      captured:
        type: boolean
      created_at:
        type: string
      currency:
        type: string
      customer:
        format: uuid
        type: string
      deleted_at:
        $ref: '#/definitions/database.DeletedAt'
      description:
        type: string
      disputed:
        type: boolean
      failure_balance_transaction:
        format: uuid
        type: string
      failure_code:
        type: string
      failure_message:
        type: string
      fraud_details:
        format: uuid
        type: string
      id:
        type: string
      livemode:
        type: boolean
      metadata:
        $ref: '#/definitions/core.JSONB'
      object:
        type: string
      outcome:
        format: uuid
        type: string
      paid:
        type: boolean
      payment_method:
        format: uuid
        type: string
      payment_method_details:
        format: uuid
        type: string
      radar_options:
        format: uuid
        type: string
      receipt_email:
        type: string
      receipt_number:
        type: string
      receipt_url:
        type: string
      refunded:
        type: boolean
      review:
        format: uuid
        type: string
      shipping:
        format: uuid
        type: string
      statement_descriptor:
        type: string
      statement_descriptor_suffix:
        type: string
      status:
        $ref: '#/definitions/charge.Status'
      updated_at:
        type: string
    type: object
  charge.Status:
    enum:
    - succeeded
    - pending
    - failed
    type: string
    x-enum-varnames:
    - StatusSucceeded
    - StatusPending
    - StatusFailed
  checkout.BillingAddressCollection:
    enum:
    - auto
    - required
    type: string
    x-enum-varnames:
    - BillingAddressCollectionAuto
    - BillingAddressCollectionRequired
  checkout.CheckoutSession:
    properties:
      after_expiration:
        format: uuid
        type: string
      allow_promotion_codes:
        type: boolean
      amount_subtotal:
        type: integer
      amount_total:
        type: integer
      automatic_tax:
        type: boolean
      billing_address_collection:
        $ref: '#/definitions/checkout.BillingAddressCollection'
      cancel_url:
        type: string
      client_reference_id:
        type: string
      consent:
        format: uuid
        type: string
      consent_collection:
        format: uuid
        type: string
      created_at:
        type: string
      currency:
        type: string
      custom_text:
        format: uuid
        type: string
      customer:
        format: uuid
        type: string
      customer_creation:
        $ref: '#/definitions/checkout.CustomerCreation'
      customer_details:
        format: uuid
        type: string
      customer_email:
        type: string
      deleted_at:
        $ref: '#/definitions/database.DeletedAt'
      expires_at:
        type: integer
      id:
        type: string
      invoice:
        format: uuid
        type: string
      invoice_creation:
        format: uuid
        type: string
      line_items:
        items:
          format: uuid
          type: string
        type: array
      livemode:
        type: boolean
      locale:
        $ref: '#/definitions/checkout.Locale'
      metadata:
        $ref: '#/definitions/core.JSONB'
      mode:
        $ref: '#/definitions/checkout.Mode'
      object:
        type: string
      payment_intent:
        format: uuid
        type: string
      payment_link:
        format: uuid
        type: string
      payment_method_collection:
        $ref: '#/definitions/checkout.PaymentMethodCollection'
      payment_method_options:
        format: uuid
        type: string
      payment_method_types:
        items:
          type: string
        type: array
      payment_status:
        $ref: '#/definitions/checkout.PaymentStatus'
      phone_number_collection:
        type: boolean
      recovered_from:
        type: string
      setup_intent:
        format: uuid
        type: string
      shipping_address_collection:
        format: uuid
        type: string
      shipping_cost:
        format: uuid
        type: string
      shipping_details:
        format: uuid
        type: string
      shipping_options:
        items:
          format: uuid
          type: string
        type: array
      status:
        $ref: '#/definitions/checkout.Status'
      submit_type:
        $ref: '#/definitions/checkout.SubmitType'
      subscription:
        format: uuid
        type: string
      success_url:
        type: string
      tax_id_collection:
        type: boolean
      total_details:
        format: uuid
        type: string
      updated_at:
        type: string
      url:
        type: string
    type: object
  checkout.CustomerCreation:
    enum:
    - if_required
    - always
    type: string
    x-enum-varnames:
    - CustomerCreationIfRequired
    - CustomerCreationAlways
  checkout.Locale:
    enum:
    - auto
    - bg
    - cs
    - da
    - de
    - el
    - en
    - en-GB
    - es
    - es-419
    - et
    - fi
    - fil
    - fr
    - fr-CA
    - hr
    - hu
    - id
    - it
    - ja
    - ko
    - lt
    - lv
    - ms
    - mt
    - nb
    - nl
    - pl
    - pt
    - pt-BR
    - ro
    - ru
    - sk
    - sl
    - sv
    - th
    - tr
    - vi
    - zh
    - zh-HK
    - zh-TW
    type: string
    x-enum-varnames:
    - Localeauto
    - Localebg
    - Localecs
    - Localeda
    - Localede
    - Localeel
    - Localeen
    - Localeen_GB
    - Localees
    - Localees_419
    - Localeet
    - Localefi
    - Localefil
    - Localefr
    - Localefr_CA
    - Localehr
    - Localehu
    - Localeid
    - Localeit
    - Localeja
    - Localeko
    - Localelt
    - Localelv
    - Localems
    - Localemt
    - Localenb
    - Localenl
    - Localepl
    - Localept
    - Localept_BR
    - Localero
    - Localeru
    - Localesk
    - Localesl
    - Localesv
    - Localeth
    - Localetr
    - Localevi
    - Localezh
    - Localezh_HK
    - Localezh_TW
  checkout.Mode:
    enum:
    - payment
    - setup
    - subscription
    type: string
    x-enum-varnames:
    - ModePayment
    - ModeSetup
    - ModeSubscription
  checkout.PaymentMethodCollection:
    enum:
    - always
    - if_required
    type: string
    x-enum-varnames:
    - PaymentMethodCollectionAlways
    - PaymentMethodCollectionIfRequired
  checkout.PaymentStatus:
    enum:
    - paid
    - unpaid
    - no_payment_required
    type: string
    x-enum-varnames:
    - PaymentStatusPaid
    - PaymentStatusUnpaid
    - PaymentStatusNoPaymentRequired
  checkout.Status:
    enum:
    - open
    - complete
    - expired
    type: string
    x-enum-varnames:
    - StatusOpen
    - StatusComplete
    - StatusExpired
  checkout.SubmitType:
    enum:
    - auto
    - pay
    - book
    - donate
    type: string
    x-enum-varnames:
    - SubmitTypeAuto
    - SubmitTypePay
    - SubmitTypeBook
    - SubmitTypeDonate
  core.JSONB:
    additionalProperties: true
    type: object
  coupon.Coupon:
    properties:
      amount_off:
        type: integer
      applies_to:
        items:
          type: string
        type: array
      created_at:
        type: string
      currency:
        type: string
      deleted_at:
        $ref: '#/definitions/database.DeletedAt'
      duration:
        $ref: '#/definitions/coupon.Duration'
      duration_in_months:
        type: integer
      id:
        type: string
      livemode:
        type: boolean
      max_redemptions:
        type: integer
      metadata:
        $ref: '#/definitions/core.JSONB'
      name:
        type: string
      object:
        type: string
      percent_off:
        type: number
      redeem_by:
        type: integer
      times_redeemed:
        type: integer
      updated_at:
        type: string
      valid:
        type: boolean
    type: object
  coupon.Duration:
    enum:
    - once
    - repeating
    - forever
    type: string
    x-enum-varnames:
    - DurationOnce
    - DurationRepeating
    - DurationForever
  credit.CreditNote:
    properties:
      amount:
        description: The integer amount in %s representing the total amount of the
          credit note, including tax.
        type: integer
      created_at:
        type: string
      currency:
        description: Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html),
          in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
        type: string
      customer:
        format: uuid
        type: string
      customer_balance_transaction:
        format: uuid
        type: string
      deleted_at:
        $ref: '#/definitions/database.DeletedAt'
      discount_amount:
        description: The integer amount in %s representing the total amount of discount
          that was credited.
        type: integer
      id:
        type: string
      invoice:
        format: uuid
        type: string
      lines:
        description: The aggregate amounts calculated per discount for all line items.
        items:
          format: uuid
          type: string
        type: array
      livemode:
        type: boolean
      memo:
        description: Customer-facing text that appears on the credit note PDF.
        type: string
      metadata:
        $ref: '#/definitions/core.JSONB'
      number:
        description: A unique number that identifies this particular credit note and
          appears on the PDF of the credit note and its associated invoice.
        type: string
      object:
        type: string
      out_of_band_amount:
        description: Amount that was credited outside of Stripe.
        type: integer
      pdf:
        description: The link to download the PDF of the credit note.
        type: string
      reason:
        description: Reason for issuing this credit note, one of `duplicate`, `fraudulent`,
          `order_change`, or `product_unsatisfactory`
        format: uuid
        type: string
      refund:
        format: uuid
        type: string
      status:
        description: Status of this credit note, one of `issued` or `void`. Learn
          more about [voiding credit notes](https://stripe.com/docs/billing/invoices/credit-notes#voiding).
        format: uuid
        type: string
      subtotal:
        description: The integer amount in %s representing the amount of the credit
          note, excluding exclusive tax and invoice level discounts.
        type: integer
      subtotal_excluding_tax:
        description: The integer amount in %s representing the amount of the credit
          note, excluding all tax and invoice level discounts.
        type: integer
      tax_amounts:
        description: The aggregate amounts calculated per tax rate for all line items.
        items:
          format: uuid
          type: string
        type: array
      total:
        description: The integer amount in %s representing the total amount of the
          credit note, including tax and all discount.
        type: integer
      total_excluding_tax:
        description: The integer amount in %s representing the total amount of the
          credit note, excluding tax, but including discounts.
        type: integer
      type:
        allOf:
        - $ref: '#/definitions/credit.Type'
        description: Type of this credit note, one of `pre_payment` or `post_payment`.
          A `pre_payment` credit note means it was issued when the invoice was open.
          A `post_payment` credit note means it was issued when the invoice was paid.
      updated_at:
        type: string
      voided_at:
        description: The time that the credit note was voided.
        type: string
    type: object
  credit.Type:
    enum:
    - pre_payment
    - post_payment
    type: string
    x-enum-varnames:
    - TypePrePayment
    - TypePostPayment
  customer.Customer:
    properties:
      address:
        format: uuid
        type: string
      balance:
        type: integer
      created_at:
        type: string
      currency:
        description: CashBalance          *CashBalance                     `json:"cash_balance,omitempty"`
        type: string
      deleted_at:
        $ref: '#/definitions/database.DeletedAt'
      delinquent:
        type: boolean
      description:
        type: string
      email:
        description: Discount             *Discount                        `json:"discount,omitempty"`
        type: string
      id:
        type: string
      invoice_credit_balance:
        $ref: '#/definitions/core.JSONB'
      invoice_prefix:
        type: string
      invoice_settings:
        format: uuid
        type: string
      livemode:
        type: boolean
      metadata:
        $ref: '#/definitions/core.JSONB'
      name:
        type: string
      next_invoice_sequence:
        type: integer
      object:
        type: string
      phone:
        type: string
      preferred_locales:
        items:
          type: string
        type: array
      shipping:
        format: uuid
        type: string
      tax:
        description: |-
          Sources              *ApmsSourcesSourceList                  `json:"sources,omitempty"`
          Subscriptions        *SubscriptionList                       `json:"subscriptions,omitempty"`
        format: uuid
        type: string
      tax_exempt:
        $ref: '#/definitions/customer.TaxExempt'
      updated_at:
        type: string
    type: object
  customer.TaxExempt:
    enum:
    - none
    - exempt
    - reverse
    type: string
    x-enum-varnames:
    - TaxExemptNone
    - TaxExemptExempt
    - TaxExemptReverse
  database.DeletedAt:
    properties:
      time:
        type: string
      valid:
        description: Valid is true if Time is not NULL
        type: boolean
    type: object
  discount.Discount:
    properties:
      amount:
        type: integer
      checkout_session:
        type: string
      coupon:
        format: uuid
        type: string
      created_at:
        type: string
      customer:
        format: uuid
        type: string
      deleted_at:
        $ref: '#/definitions/database.DeletedAt'
      end:
        type: integer
      id:
        type: string
      invoice:
        type: string
      invoice_item:
        type: string
      livemode:
        type: boolean
      metadata:
        $ref: '#/definitions/core.JSONB'
      object:
        type: string
      promotion_code:
        format: uuid
        type: string
      start:
        type: integer
      subscription:
        type: string
      updated_at:
        type: string
    type: object
  dispute.Dispute:
    properties:
      amount:
        description: Disputed amount. Usually the amount of the charge, but can differ
          (usually because of currency fluctuation or because only part of the order
          is disputed).
        type: integer
      balance_transactions:
        description: List of zero, one, or two balance transactions that show funds
          withdrawn and reinstated to your Stripe account as a result of this dispute.
        items:
          format: uuid
          type: string
        type: array
      charge:
        format: uuid
        type: string
      created_at:
        type: string
      currency:
        description: Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html),
          in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
        type: string
      deleted_at:
        $ref: '#/definitions/database.DeletedAt'
      evidence:
        format: uuid
        type: string
      evidence_details:
        format: uuid
        type: string
      id:
        type: string
      is_charge_refundable:
        description: If true, it is still possible to refund the disputed payment.
          Once the payment has been fully refunded, no further funds will be withdrawn
          from your Stripe account as a result of this dispute.
        type: boolean
      livemode:
        type: boolean
      metadata:
        $ref: '#/definitions/core.JSONB'
      object:
        type: string
      payment_intent:
        format: uuid
        type: string
      reason:
        allOf:
        - $ref: '#/definitions/dispute.Reason'
        description: Reason given by cardholder for dispute. Possible values are `bank_cannot_process`,
          `check_returned`, `credit_not_processed`, `customer_initiated`, `debit_not_authorized`,
          `duplicate`, `fraudulent`, `general`, `incorrect_account_details`, `insufficient_funds`,
          `product_not_received`, `product_unacceptable`, `subscription_canceled`,
          or `unrecognized`. Read more about [dispute reasons](https://stripe.com/docs/disputes/categories).
      status:
        allOf:
        - $ref: '#/definitions/dispute.Status'
        description: Current status of dispute. Possible values are `warning_needs_response`,
          `warning_under_review`, `warning_closed`, `needs_response`, `under_review`,
          `charge_refunded`, `won`, or `lost`.
      updated_at:
        type: string
    type: object
  dispute.Reason:
    enum:
    - bank_cannot_process
    - check_returned
    - credit_not_processed
    - customer_initiated
    - debit_not_authorized
    - duplicate
    - fraudulent
    - general
    - incorrect_account_details
    - insufficient_funds
    - product_not_received
    - product_unacceptable
    - subscription_canceled
    - unrecognized
    type: string
    x-enum-varnames:
    - ReasonBankCannotProcess
    - ReasonCheckReturned
    - ReasonCreditNotProcessed
    - ReasonCustomerInitiated
    - ReasonDebitNotAuthorized
    - ReasonDuplicate
    - ReasonFraudulent
    - ReasonGeneral
    - ReasonIncorrectAccountDetails
    - ReasonInsufficientFunds
    - ReasonProductNotReceived
    - ReasonProductUnacceptable
    - ReasonSubscriptionCanceled
    - ReasonUnrecognized
  dispute.Status:
    enum:
    - warning_needs_response
    - warning_under_review
    - warning_closed
    - needs_response
    - under_review
    - charge_refunded
    - won
    - lost
    type: string
    x-enum-varnames:
    - StatusWarningNeedsResponse
    - StatusWarningUnderReview
    - StatusWarningClosed
    - StatusNeedsResponse
    - StatusUnderReview
    - StatusChargeRefunded
    - StatusWon
    - StatusLost
  file.File:
    properties:
      created_at:
        type: string
      deleted_at:
        $ref: '#/definitions/database.DeletedAt'
      expires_at:
        description: The time at which the file expires and is no longer available
          in epoch seconds.
        type: integer
      filename:
        description: A filename for the file, suitable for saving to a filesystem.
        type: string
      id:
        type: string
      links:
        format: uuid
        type: string
      livemode:
        type: boolean
      metadata:
        $ref: '#/definitions/core.JSONB'
      object:
        type: string
      purpose:
        allOf:
        - $ref: '#/definitions/file.Purpose'
        description: The [purpose](https://stripe.com/docs/file-upload#uploading-a-file)
          of the uploaded file.
      size:
        description: The size in bytes of the file object.
        type: integer
      title:
        description: A user friendly title for the document.
        type: string
      type:
        description: The type of the file returned (e.g., `csv`, `pdf`, `jpg`, or
          `png`).
        type: string
      updated_at:
        type: string
      url:
        description: The URL from which the file can be downloaded using your live
          secret API key.
        type: string
    type: object
  file.Purpose:
    enum:
    - account_requirement
    - additional_verification
    - business_icon
    - business_logo
    - customer_signature
    - dispute_evidence
    - document_provider_identity_document
    - finance_report_run
    - identity_document
    - identity_document_downloadable
    - pci_document
    - selfie
    - sigma_scheduled_query
    - tax_document_user_upload
    - terminal_reader_splashscreen
    type: string
    x-enum-varnames:
    - PurposeAccountRequirement
    - PurposeAdditionalVerification
    - PurposeBusinessIcon
    - PurposeBusinesslogo
    - PurposeCustomerSignature
    - PurposeDisputeEvidence
    - PurposeDocumentProviderIdentityDocument
    - PurposeFinanceReportRun
    - PurposeIdentityDocument
    - PurposeIdentityDocumentDownloadable
    - PurposePciDocument
    - PurposeSelfie
    - PurposeSigmaScheduledQuery
    - PurposeTaxDocumentUserUpload
    - PurposeTerminalReaderSplashscreen
  github_com_driver005_gateway_internal_intent.CancellationReason:
    enum:
    - duplicate
    - fraudulent
    - requested_by_customer
    - abandoned
    - failed_invoice
    - void_invoice
    - automatic
    type: string
    x-enum-varnames:
    - CancellationReasonDuplicate
    - CancellationReasonFraudulent
    - CancellationReasonRequestedByCustomer
    - CancellationReasonAbandoned
    - CancellationReasonFailedInvoice
    - CancellationReasonVoidInvoice
    - CancellationReasonAutomatic
  github_com_driver005_gateway_internal_intent.Status:
    enum:
    - requires_payment_method
    - requires_confirmation
    - requires_action
    - processing
    - requires_capture
    - canceled
    - succeeded
    type: string
    x-enum-varnames:
    - StatusRequiresPaymentMethod
    - StatusRequiresConfirmation
    - StatusRequiresAction
    - StatusProcessing
    - StatusRequiresCapture
    - StatusCanceled
    - StatusSucceeded
  github_com_driver005_gateway_internal_setup_intent.CancellationReason:
    enum:
    - abandoned
    - requested_by_customer
    - duplicate
    type: string
    x-enum-varnames:
    - CancellationReasonAbandoned
    - CancellationReasonRequestedByCustomer
    - CancellationReasonDuplicate
  github_com_driver005_gateway_internal_setup_intent.Status:
    enum:
    - requires_payment_method
    - requires_confirmation
    - requires_action
    - processing
    - succeeded
    - failed
    - abandoned
    type: string
    x-enum-varnames:
    - StatusRequiresPaymentMethod
    - StatusRequiresConfirmation
    - StatusRequiresAction
    - StatusProcessing
    - StatusSucceeded
    - StatusFailed
    - StatusAbandoned
  github_com_driver005_gateway_payment_card.Card:
    properties:
      account:
        format: uuid
        type: string
      address_city:
        type: string
      address_country:
        type: string
      address_line1:
        type: string
      address_line1_check:
        $ref: '#/definitions/card.AddressLine1Check'
      address_line2:
        type: string
      address_state:
        type: string
      address_zip:
        type: string
      address_zip_check:
        $ref: '#/definitions/card.AddressZipCheck'
      available_payout_methods:
        items:
          type: string
        type: array
      brand:
        $ref: '#/definitions/card.Brand'
      country:
        type: string
      created_at:
        type: string
      currency:
        type: string
      customer:
        format: uuid
        type: string
      cvc_check:
        $ref: '#/definitions/card.CvcCheck'
      default_for_currency:
        type: boolean
      deleted_at:
        $ref: '#/definitions/database.DeletedAt'
      dynamic_last4:
        type: string
      exp_month:
        type: integer
      exp_year:
        type: integer
      fingerprint:
        type: string
      funding:
        $ref: '#/definitions/card.Funding'
      id:
        type: string
      last4:
        type: string
      livemode:
        type: boolean
      metadata:
        $ref: '#/definitions/core.JSONB'
      name:
        type: string
      object:
        type: string
      status:
        type: string
      tokenization_method:
        $ref: '#/definitions/card.TokenizationMethod'
      updated_at:
        type: string
    type: object
  intent.CaptureMethod:
    enum:
    - automatic
    - manual
    type: string
    x-enum-varnames:
    - CaptureMethodAutomatic
    - CaptureMethodManual
  intent.ConfirmationMethod:
    enum:
    - automatic
    - manual
    type: string
    x-enum-varnames:
    - ConfirmationMethodAutomatic
    - ConfirmationMethodManual
  intent.PaymentIntent:
    properties:
      amount:
        type: integer
      amount_capturable:
        type: integer
      amount_details:
        format: uuid
        type: string
      amount_received:
        type: integer
      automatic_payment_methods:
        type: boolean
      canceled_at:
        type: integer
      cancellation_reason:
        $ref: '#/definitions/github_com_driver005_gateway_internal_intent.CancellationReason'
      capture_method:
        $ref: '#/definitions/intent.CaptureMethod'
      client_secret:
        type: string
      confirmation_method:
        $ref: '#/definitions/intent.ConfirmationMethod'
      created_at:
        type: string
      currency:
        type: string
      customer:
        format: uuid
        type: string
      deleted_at:
        $ref: '#/definitions/database.DeletedAt'
      description:
        type: string
      id:
        type: string
      last_payment_error:
        format: uuid
        type: string
      latest_charge:
        format: uuid
        type: string
      livemode:
        type: boolean
      metadata:
        $ref: '#/definitions/core.JSONB'
      next_action:
        format: uuid
        type: string
      object:
        type: string
      payment_method:
        format: uuid
        type: string
      payment_method_options:
        format: uuid
        type: string
      payment_method_types:
        items:
          type: string
        type: array
      processing:
        format: uuid
        type: string
      receipt_email:
        type: string
      review:
        format: uuid
        type: string
      setup_future_usage:
        $ref: '#/definitions/intent.SetupFutureUsage'
      shipping:
        format: uuid
        type: string
      statement_descriptor:
        type: string
      statement_descriptor_suffix:
        type: string
      status:
        $ref: '#/definitions/github_com_driver005_gateway_internal_intent.Status'
      updated_at:
        type: string
    type: object
  intent.SetupFutureUsage:
    enum:
    - off_session
    - on_session
    type: string
    x-enum-varnames:
    - SetupFutureUsageOffSession
    - SetupFutureUsageOnSession
  intent.SetupIntent:
    properties:
      attach_to_self:
        type: boolean
      cancellation_reason:
        $ref: '#/definitions/github_com_driver005_gateway_internal_setup_intent.CancellationReason'
      client_secret:
        type: string
      created_at:
        type: string
      customer:
        format: uuid
        type: string
      deleted_at:
        $ref: '#/definitions/database.DeletedAt'
      description:
        type: string
      flow_directions:
        items:
          type: string
        type: array
      id:
        type: string
      last_setup_error:
        format: uuid
        type: string
      livemode:
        type: boolean
      mandate:
        format: uuid
        type: string
      metadata:
        $ref: '#/definitions/core.JSONB'
      next_action:
        format: uuid
        type: string
      object:
        type: string
      payment_method:
        format: uuid
        type: string
      payment_method_types:
        items:
          type: string
        type: array
      single_use_mandate:
        format: uuid
        type: string
      status:
        $ref: '#/definitions/github_com_driver005_gateway_internal_setup_intent.Status'
      updated_at:
        type: string
      usage:
        $ref: '#/definitions/intent.Usage'
    type: object
  intent.Usage:
    enum:
    - off_session
    - on_session
    type: string
    x-enum-varnames:
    - UsageOffSession
    - UsageOnSession
  invoice.BillingReason:
    enum:
    - subscription_cycle
    - subscription_create
    - subscription_update
    - subscription_threshold
    - subscription
    - manual
    - upcoming
    type: string
    x-enum-varnames:
    - BillingReasonSubscriptionCycle
    - BillingReasonSubscriptionCreate
    - BillingReasonSubscriptionUpdate
    - BillingReasonSubscriptionThreshold
    - BillingReasonSubscription
    - BillingReasonManual
    - BillingReasonUpcoming
  invoice.CollectionMethod:
    enum:
    - charge_automatically
    - send_invoice
    type: string
    x-enum-varnames:
    - CollectionMethodChargeAutomatically
    - CollectionMethodSendInvoiced
  invoice.Invoice:
    properties:
      account_country:
        type: string
      account_name:
        type: string
      account_tax_ids:
        format: uuid
        type: string
      amount_due:
        type: integer
      amount_paid:
        type: integer
      amount_remaining:
        type: integer
      attempt_count:
        type: integer
      attempted:
        type: boolean
      auto_advance:
        type: boolean
      automatic_tax:
        format: uuid
        type: string
      billing_reason:
        $ref: '#/definitions/invoice.BillingReason'
      charge:
        format: uuid
        type: string
      collection_method:
        $ref: '#/definitions/invoice.CollectionMethod'
      created_at:
        type: string
      currency:
        type: string
      custom_fields:
        items:
          format: uuid
          type: string
        type: array
      customer:
        format: uuid
        type: string
      customer_address:
        format: uuid
        type: string
      customer_email:
        type: string
      customer_name:
        type: string
      customer_phone:
        type: string
      customer_shipping:
        format: uuid
        type: string
      customer_tax_exempt:
        $ref: '#/definitions/customer.TaxExempt'
      customer_tax_ids:
        items:
          format: uuid
          type: string
        type: array
      default_payment_method:
        format: uuid
        type: string
      default_tax_rates:
        format: uuid
        type: string
      deleted_at:
        $ref: '#/definitions/database.DeletedAt'
      description:
        type: string
      discountable:
        type: boolean
      discounts:
        items:
          format: uuid
          type: string
        type: array
      due_date:
        type: string
      ending_balance:
        type: integer
      footer:
        type: string
      from_invoice:
        format: uuid
        type: string
      hosted_invoice_url:
        type: string
      id:
        type: string
      invoice_pdf:
        type: string
      last_finalization_error:
        format: uuid
        type: string
      latest_revision:
        format: uuid
        type: string
      lines:
        items:
          format: uuid
          type: string
        type: array
      livemode:
        type: boolean
      metadata:
        $ref: '#/definitions/core.JSONB'
      next_payment_attempt:
        type: integer
      number:
        type: string
      object:
        type: string
      paid:
        type: boolean
      paid_out_of_band:
        type: boolean
      payment_intent:
        format: uuid
        type: string
      payment_settings:
        format: uuid
        type: string
      period_end:
        type: string
      period_start:
        type: string
      post_payment_credit_notes_amount:
        type: integer
      pre_payment_credit_notes_amount:
        type: integer
      price:
        format: uuid
        type: string
      quantity:
        type: integer
      receipt_number:
        type: string
      rendering_options:
        format: uuid
        type: string
      starting_balance:
        type: integer
      statement_descriptor:
        type: string
      status:
        $ref: '#/definitions/invoice.Status'
      status_transitions:
        format: uuid
        type: string
      subscription:
        format: uuid
        type: string
      subscription_proration_date:
        type: integer
      subtotal:
        type: integer
      subtotal_excluding_tax:
        type: integer
      tax:
        type: integer
      threshold_reason:
        format: uuid
        type: string
      total:
        type: integer
      total_excluding_tax:
        type: integer
      total_tax_amounts:
        items:
          format: uuid
          type: string
        type: array
      updated_at:
        type: string
      webhooks_delivered_at:
        type: integer
    type: object
  invoice.Status:
    enum:
    - draft
    - open
    - paid
    - uncollectible
    - void
    type: string
    x-enum-varnames:
    - StatusDraft
    - StatusOpen
    - StatusPaid
    - StatusUncollectible
    - StatusVoid
  invoiceItem.Invoiceitem:
    properties:
      amount:
        description: Amount (in the `currency` specified) of the invoice item. This
          should always be equal to `unit_amount * quantity`.
        type: integer
      created_at:
        type: string
      currency:
        description: Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html),
          in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
        type: string
      customer:
        format: uuid
        type: string
      date:
        description: Time at which the object was created. Measured in seconds since
          the Unix epoch.
        type: integer
      deleted_at:
        $ref: '#/definitions/database.DeletedAt'
      description:
        description: An arbitrary string attached to the object. Often useful for
          displaying to users.
        type: string
      discountable:
        description: If true, discounts will apply to this invoice item. Always false
          for prorations.
        type: boolean
      discounts:
        description: The discounts which apply to the invoice item. Item discounts
          are applied before invoice discounts. Use `expand[]=discounts` to expand
          each discount.
        items:
          format: uuid
          type: string
        type: array
      id:
        type: string
      invoice:
        format: uuid
        type: string
      livemode:
        type: boolean
      metadata:
        $ref: '#/definitions/core.JSONB'
      object:
        type: string
      period_end:
        description: Unique identifier for the object.
        type: integer
      period_start:
        type: integer
      price:
        format: uuid
        type: string
      proration:
        description: Whether the invoice item was created automatically as a proration
          adjustment when the customer switched plans.
        type: boolean
      quantity:
        description: Quantity of units for the invoice item. If the invoice item is
          a proration, the quantity of the subscription that the proration was computed
          for.
        type: integer
      subscription:
        format: uuid
        type: string
      subscription_item:
        format: uuid
        type: string
      tax_rates:
        description: The tax rates which apply to the invoice item. When set, the
          `default_tax_rates` on the invoice do not apply to this invoice item.
        format: uuid
        type: string
      unit_amount:
        description: Unit amount (in the `currency` specified) of the invoice item.
        type: integer
      unit_amount_decimal:
        description: Same as `unit_amount`, but contains a decimal value with at most
          12 decimal places.
        type: number
      updated_at:
        type: string
    type: object
  item.LineItem:
    properties:
      amount:
        type: integer
      amount_excluding_tax:
        type: integer
      created_at:
        type: string
      currency:
        type: string
      deleted_at:
        $ref: '#/definitions/database.DeletedAt'
      description:
        type: string
      discountable:
        type: boolean
      discounts:
        items:
          format: uuid
          type: string
        type: array
      id:
        type: string
      livemode:
        type: boolean
      metadata:
        $ref: '#/definitions/core.JSONB'
      object:
        type: string
      period_end:
        type: string
      period_start:
        type: string
      price:
        format: uuid
        type: string
      product:
        format: uuid
        type: string
      proration:
        type: boolean
      proration_details:
        format: uuid
        type: string
      quantity:
        type: integer
      subscription:
        type: string
      subscription_item:
        type: string
      tax_rates:
        items:
          format: uuid
          type: string
        type: array
      type:
        type: string
      unit_amount_excluding_tax:
        type: number
      updated_at:
        type: string
    type: object
  link.PaymentLink:
    properties:
      active:
        type: boolean
      after_completion:
        format: uuid
        type: string
      allow_promotion_codes:
        type: boolean
      application_fee_amount:
        type: integer
      application_fee_percent:
        type: number
      automatic_tax:
        type: boolean
      billing_address_collection:
        type: string
      consent_collection:
        format: uuid
        type: string
      created_at:
        type: string
      currency:
        type: string
      custom_text:
        format: uuid
        type: string
      customer_creation:
        type: string
      deleted_at:
        $ref: '#/definitions/database.DeletedAt'
      id:
        type: string
      line_items:
        items:
          format: uuid
          type: string
        type: array
      livemode:
        type: boolean
      metadata:
        $ref: '#/definitions/core.JSONB'
      object:
        type: string
      payment_intent_data:
        format: uuid
        type: string
      payment_method_collection:
        type: string
      payment_method_types:
        items:
          type: string
        type: array
      phone_number_collection:
        type: boolean
      shipping_address_collection:
        format: uuid
        type: string
      shipping_options:
        items:
          format: uuid
          type: string
        type: array
      submit_type:
        type: string
      subscription_data:
        format: uuid
        type: string
      tax_id_collection:
        type: boolean
      updated_at:
        type: string
      url:
        type: string
    type: object
  mandate.Mandate:
    properties:
      created_at:
        type: string
      deleted_at:
        $ref: '#/definitions/database.DeletedAt'
      id:
        type: string
      livemode:
        type: boolean
      metadata:
        $ref: '#/definitions/core.JSONB'
      object:
        type: string
      payment_method:
        format: uuid
        type: string
      payment_method_details:
        format: uuid
        type: string
      single_use:
        format: uuid
        type: string
      status:
        $ref: '#/definitions/mandate.Status'
      type:
        $ref: '#/definitions/mandate.Type'
      updated_at:
        type: string
    type: object
  mandate.Status:
    enum:
    - active
    - inactive
    - pending
    type: string
    x-enum-varnames:
    - StatusActive
    - StatusInactive
    - StatusPending
  mandate.Type:
    enum:
    - multi_use
    - single_use
    type: string
    x-enum-varnames:
    - TypeMultiUse
    - TypeSingleUse
  method.PaymentMethod:
    properties:
      acss_debit:
        format: uuid
        type: string
      affirm:
        format: uuid
        type: string
      afterpay_clearpay:
        format: uuid
        type: string
      alipay:
        format: uuid
        type: string
      au_becs_debit:
        format: uuid
        type: string
      bacs_debit:
        format: uuid
        type: string
      bancontact:
        format: uuid
        type: string
      billing_details:
        format: uuid
        type: string
      blik:
        format: uuid
        type: string
      boleto:
        format: uuid
        type: string
      btc_pay:
        format: uuid
        type: string
      card:
        format: uuid
        type: string
      card_present:
        format: uuid
        type: string
      created_at:
        type: string
      customer:
        format: uuid
        type: string
      customer_balance:
        format: uuid
        type: string
      deleted_at:
        $ref: '#/definitions/database.DeletedAt'
      eps:
        format: uuid
        type: string
      fpx:
        format: uuid
        type: string
      giropay:
        format: uuid
        type: string
      grabpay:
        format: uuid
        type: string
      id:
        type: string
      ideal:
        format: uuid
        type: string
      interac_present:
        format: uuid
        type: string
      klarna:
        format: uuid
        type: string
      konbini:
        format: uuid
        type: string
      link:
        format: uuid
        type: string
      livemode:
        type: boolean
      metadata:
        $ref: '#/definitions/core.JSONB'
      object:
        type: string
      oxxo:
        format: uuid
        type: string
      p24:
        format: uuid
        type: string
      paynow:
        format: uuid
        type: string
      pix:
        format: uuid
        type: string
      promptpay:
        format: uuid
        type: string
      radar_options:
        format: uuid
        type: string
      sepa_debit:
        format: uuid
        type: string
      sofort:
        format: uuid
        type: string
      type:
        $ref: '#/definitions/method.Type'
      updated_at:
        type: string
      us_bank_account:
        format: uuid
        type: string
      wechat_pay:
        format: uuid
        type: string
    type: object
  method.Type:
    enum:
    - acss_debit
    - affirm
    - afterpay_clearpay
    - alipay
    - au_becs_debit
    - bacs_debit
    - bancontact
    - blik
    - boleto
    - btcpay
    - card
    - card_present
    - customer_balance
    - eps
    - fpx
    - giropay
    - grabpay
    - ideal
    - interac_present
    - klarna
    - konbini
    - link
    - oxxo
    - p24
    - paynow
    - pix
    - promptpay
    - sepa_debit
    - sofort
    - us_bank_account
    - wechat_pay
    type: string
    x-enum-varnames:
    - TypeAcssDebit
    - TypeAffirm
    - TypeAfterpayClearpay
    - TypeAlipay
    - TypeAuBecsDebit
    - TypeBacsDebit
    - TypeBancontact
    - TypeBlik
    - TypeBoleto
    - TypeBtcpay
    - TypeCard
    - TypeCardPresent
    - TypeCustomerBalance
    - TypeEps
    - TypeFpx
    - TypeGiropay
    - TypeGrabpay
    - TypeIdeal
    - TypeInteracPresent
    - TypeKlarna
    - TypeKonbini
    - TypeLink
    - TypeOxxo
    - TypeP24
    - TypePaynow
    - TypePix
    - TypePromptpay
    - TypeSepaDebit
    - TypeSofort
    - TypeUsBankAccount
    - TypeWechatPay
  payout.Method:
    enum:
    - standard
    - instant
    type: string
    x-enum-varnames:
    - MethodStandard
    - MethodInstant
  payout.Payout:
    properties:
      amount:
        type: integer
      arrival_date:
        type: integer
      automatic:
        type: boolean
      balance_transaction:
        format: uuid
        type: string
      created_at:
        type: string
      currency:
        type: string
      deleted_at:
        $ref: '#/definitions/database.DeletedAt'
      description:
        type: string
      destination:
        type: string
      failure_balance_transaction:
        format: uuid
        type: string
      failure_code:
        type: string
      failure_message:
        type: string
      id:
        type: string
      livemode:
        type: boolean
      metadata:
        $ref: '#/definitions/core.JSONB'
      method:
        $ref: '#/definitions/payout.Method'
      object:
        type: string
      original_payout:
        format: uuid
        type: string
      reversed_by:
        format: uuid
        type: string
      source_type:
        $ref: '#/definitions/payout.SourceType'
      statement_descriptor:
        type: string
      status:
        $ref: '#/definitions/payout.Status'
      type:
        $ref: '#/definitions/payout.Type'
      updated_at:
        type: string
    type: object
  payout.SourceType:
    enum:
    - card
    - fpx
    - bank_account
    type: string
    x-enum-varnames:
    - SourceTypeCard
    - SourceTypeFpx
    - SourceTypeBankAccount
  payout.Status:
    enum:
    - paid
    - pending
    - in_transit
    - canceled
    - failed
    type: string
    x-enum-varnames:
    - StatusPaid
    - StatusPending
    - StatusInTransit
    - StatusCanceled
    - StatusFailed
  payout.Type:
    enum:
    - bank_account
    - card
    type: string
    x-enum-varnames:
    - TypeBankAccount
    - TypeCard
  plan.Plan:
    properties:
      active:
        description: Whether the plan can be used for new purchases.
        type: boolean
      aggregate_usage:
        description: Specifies a usage aggregation strategy for plans of `usage_type=metered`.
          Allowed values are `sum` for summing up all usage during a period, `last_during_period`
          for using the last usage record reported within a period, `last_ever` for
          using the last usage record ever (across period bounds) or `max` which uses
          the usage record with the maximum reported usage during a period. Defaults
          to `sum`.
        type: string
      amount:
        description: The unit amount in %s to be charged, represented as a whole integer
          if possible. Only set if `billing_scheme=per_unit`.
        type: integer
      amount_decimal:
        description: The unit amount in %s to be charged, represented as a decimal
          string with at most 12 decimal places. Only set if `billing_scheme=per_unit`.
        type: number
      billing_scheme:
        description: Describes how to compute the price per period. Either `per_unit`
          or `tiered`. `per_unit` indicates that the fixed amount (specified in `amount`)
          will be charged per unit in `quantity` (for plans with `usage_type=licensed`),
          or per unit of total usage (for plans with `usage_type=metered`). `tiered`
          indicates that the unit pricing will be computed using a tiering strategy
          as defined using the `tiers` and `tiers_mode` attributes.
        type: string
      created_at:
        type: string
      currency:
        description: Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html),
          in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
        type: string
      deleted_at:
        $ref: '#/definitions/database.DeletedAt'
      id:
        type: string
      interval:
        description: The frequency at which a subscription is billed. One of `day`,
          `week`, `month` or `year`.
        type: string
      interval_count:
        description: The number of intervals (specified in the `interval` attribute)
          between subscription billings. For example, `interval=month` and `interval_count=3`
          bills every 3 months.
        type: integer
      livemode:
        type: boolean
      metadata:
        $ref: '#/definitions/core.JSONB'
      nickname:
        description: A brief description of the plan, hidden from customers.
        type: string
      object:
        type: string
      product:
        format: uuid
        type: string
      tiers:
        description: Each element represents a pricing tier. This parameter requires
          `billing_scheme` to be set to `tiered`. See also the documentation for `billing_scheme`.
        items:
          format: uuid
          type: string
        type: array
      tiers_mode:
        description: Defines if the tiering price should be `graduated` or `volume`
          based. In `volume`-based tiering, the maximum quantity within a period determines
          the per unit price. In `graduated` tiering, pricing can change as the quantity
          grows.
        type: string
      transform_usage:
        format: uuid
        type: string
      trial_period_days:
        description: Default number of trial days when subscribing a customer to this
          plan using [`trial_from_plan=true`](https://stripe.com/docs/api#create_subscription-trial_from_plan).
        type: integer
      updated_at:
        type: string
      usage_type:
        description: Configures how the quantity per period should be determined.
          Can be either `metered` or `licensed`. `licensed` automatically bills the
          `quantity` set when adding it to a subscription. `metered` aggregates the
          total usage based on usage records. Defaults to `licensed`.
        type: string
    type: object
  price.BillingScheme:
    enum:
    - per_unit
    - tiered
    type: string
    x-enum-varnames:
    - BillingSchemePerUnit
    - BillingSchemeTiered
  price.Price:
    properties:
      active:
        type: boolean
      billing_scheme:
        $ref: '#/definitions/price.BillingScheme'
      created_at:
        type: string
      currency:
        type: string
      deleted_at:
        $ref: '#/definitions/database.DeletedAt'
      id:
        type: string
      livemode:
        type: boolean
      lookup_key:
        type: string
      metadata:
        $ref: '#/definitions/core.JSONB'
      nickname:
        type: string
      object:
        type: string
      product:
        format: uuid
        type: string
      recurring:
        format: uuid
        type: string
      tax_behavior:
        $ref: '#/definitions/price.TaxBehavior'
      tiers:
        items:
          format: uuid
          type: string
        type: array
      tiers_mode:
        $ref: '#/definitions/price.TiersMode'
      transform_quantity:
        format: uuid
        type: string
      type:
        $ref: '#/definitions/price.Type'
      unit_amount:
        type: integer
      unit_amount_decimal:
        type: number
      updated_at:
        type: string
    type: object
  price.TaxBehavior:
    enum:
    - inclusive
    - exclusive
    - unspecified
    type: string
    x-enum-varnames:
    - TaxBehaviorInclusive
    - TaxBehaviorExclusive
    - TaxBehaviorUnspecified
  price.TiersMode:
    enum:
    - graduated
    - volume
    type: string
    x-enum-varnames:
    - TiersModeGraduated
    - TiersModeVolume
  price.Type:
    enum:
    - one_time
    - recurring
    type: string
    x-enum-varnames:
    - TypeOneTime
    - TypeRecurring
  product.Product:
    properties:
      active:
        type: boolean
      created_at:
        type: string
      deleted_at:
        $ref: '#/definitions/database.DeletedAt'
      description:
        type: string
      id:
        type: string
      images:
        items:
          type: string
        type: array
      livemode:
        type: boolean
      metadata:
        $ref: '#/definitions/core.JSONB'
      name:
        type: string
      object:
        type: string
      package_dimensions:
        format: uuid
        type: string
      shippable:
        type: boolean
      statement_descriptor:
        type: string
      tax_code:
        format: uuid
        type: string
      unit_label:
        type: string
      updated:
        type: integer
      updated_at:
        type: string
      url:
        type: string
    type: object
  promotion.PromotionCode:
    properties:
      active:
        type: boolean
      code:
        type: string
      coupon:
        format: uuid
        type: string
      created_at:
        type: string
      customer:
        format: uuid
        type: string
      deleted_at:
        $ref: '#/definitions/database.DeletedAt'
      expires_at:
        type: integer
      first_time_transaction:
        type: boolean
      id:
        type: string
      livemode:
        type: boolean
      max_redemptions:
        type: integer
      metadata:
        $ref: '#/definitions/core.JSONB'
      minimum_amount:
        type: integer
      minimum_amount_currency:
        type: string
      object:
        type: string
      times_redeemed:
        type: integer
      updated_at:
        type: string
    type: object
  quote.Quote:
    properties:
      amount_subtotal:
        description: Total before any discounts or taxes are applied.
        type: integer
      amount_total:
        description: Total after discounts and taxes are applied.
        type: integer
      automatic_tax:
        type: boolean
      collection_method:
        description: Either `charge_automatically`, or `send_invoice`. When charging
          automatically, Stripe will attempt to pay invoices at the end of the subscription
          cycle or on finalization using the default payment method attached to the
          subscription or customer. When sending an invoice, Stripe will email your
          customer an invoice with payment instructions and mark the subscription
          as `active`. Defaults to `charge_automatically`.
        type: string
      computed:
        format: uuid
        type: string
      created_at:
        type: string
      currency:
        description: Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html),
          in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
        type: string
      customer:
        format: uuid
        type: string
      default_tax_rates:
        items:
          format: uuid
          type: string
        type: array
      deleted_at:
        $ref: '#/definitions/database.DeletedAt'
      description:
        description: A description that will be displayed on the quote PDF.
        type: string
      discounts:
        items:
          format: uuid
          type: string
        type: array
      expires_at:
        description: The date on which the quote will be canceled if in `open` or
          `draft` status. Measured in seconds since the Unix epoch.
        type: integer
      footer:
        description: A footer that will be displayed on the quote PDF.
        type: string
      header:
        description: A header that will be displayed on the quote PDF.
        type: string
      id:
        type: string
      invoice:
        format: uuid
        type: string
      invoice_settings:
        description: Unique identifier for the object.
        format: uuid
        type: string
      line_items:
        items:
          format: uuid
          type: string
        type: array
      livemode:
        type: boolean
      metadata:
        $ref: '#/definitions/core.JSONB'
      number:
        description: A unique number that identifies this particular quote. This number
          is assigned once the quote is [finalized](https://stripe.com/docs/quotes/overview#finalize).
        type: string
      object:
        type: string
      status:
        description: The status of the quote.
        type: string
      status_transitions:
        format: uuid
        type: string
      subscription:
        format: uuid
        type: string
      subscription_data:
        format: uuid
        type: string
      subscription_schedule:
        format: uuid
        type: string
      total_details:
        format: uuid
        type: string
      updated_at:
        type: string
    type: object
  refund.FailureReason:
    enum:
    - lost_or_stolen_card
    - expired_or_canceled_card
    - unknown
    type: string
    x-enum-varnames:
    - FailureReasonLostOrStolenCard
    - FailureReasonExpiredOrCanceledCard
    - FailureReasonUnknown
  refund.Reason:
    enum:
    - duplicate
    - fraudulent
    - requested_by_customer
    - expired_uncaptured_charge
    type: string
    x-enum-varnames:
    - ReasonDuplicate
    - ReasonFraudulent
    - ReasonRequestedByCustomer
    - ReasonExpiredUncapturedCharge
  refund.Refund:
    properties:
      amount:
        type: integer
      balance_transaction:
        format: uuid
        type: string
      charge:
        format: uuid
        type: string
      created_at:
        type: string
      currency:
        type: string
      deleted_at:
        $ref: '#/definitions/database.DeletedAt'
      description:
        type: string
      failure_balance_transaction:
        format: uuid
        type: string
      failure_reason:
        $ref: '#/definitions/refund.FailureReason'
      id:
        type: string
      instructions_email:
        type: string
      livemode:
        type: boolean
      metadata:
        $ref: '#/definitions/core.JSONB'
      next_action:
        format: uuid
        type: string
      object:
        type: string
      payment_intent:
        format: uuid
        type: string
      reason:
        $ref: '#/definitions/refund.Reason'
      receipt_number:
        type: string
      status:
        $ref: '#/definitions/refund.Status'
      updated_at:
        type: string
    type: object
  refund.Status:
    enum:
    - pending
    - requires_action
    - succeeded
    - failed
    - canceled
    type: string
    x-enum-varnames:
    - StatusPending
    - StatusRequiresAction
    - StatusSucceeded
    - StatusFailed
    - StatusCanceled
  source.Flow:
    enum:
    - redirect
    - receiver
    - code_verification
    - none
    type: string
    x-enum-varnames:
    - FlowRedirect
    - FlowReceiver
    - FlowCodeVerification
    - FlowNone
  source.Source:
    properties:
      ach_credit_transfer:
        format: uuid
        type: string
      ach_debit:
        format: uuid
        type: string
      acss_debit:
        format: uuid
        type: string
      alipay:
        format: uuid
        type: string
      amount:
        type: integer
      au_becs_debit:
        format: uuid
        type: string
      bancontact:
        format: uuid
        type: string
      card:
        format: uuid
        type: string
      card_present:
        format: uuid
        type: string
      client_secret:
        type: string
      code_verification:
        format: uuid
        type: string
      created_at:
        type: string
      currency:
        type: string
      customer:
        format: uuid
        type: string
      deleted_at:
        $ref: '#/definitions/database.DeletedAt'
      eps:
        format: uuid
        type: string
      flow:
        $ref: '#/definitions/source.Flow'
      giropay:
        format: uuid
        type: string
      id:
        type: string
      ideal:
        format: uuid
        type: string
      klarna:
        format: uuid
        type: string
      livemode:
        type: boolean
      metadata:
        $ref: '#/definitions/core.JSONB'
      multibanco:
        format: uuid
        type: string
      object:
        type: string
      owner:
        format: uuid
        type: string
      p24:
        format: uuid
        type: string
      receiver:
        format: uuid
        type: string
      redirect:
        format: uuid
        type: string
      sepa_debit:
        format: uuid
        type: string
      sofort:
        format: uuid
        type: string
      source_order:
        format: uuid
        type: string
      statement_descriptor:
        type: string
      status:
        $ref: '#/definitions/source.Status'
      three_d_secure:
        format: uuid
        type: string
      type:
        $ref: '#/definitions/source.Type'
      updated_at:
        type: string
      usage:
        $ref: '#/definitions/source.Usage'
      wechat:
        format: uuid
        type: string
    type: object
  source.Status:
    enum:
    - canceled
    - chargeable
    - consumed
    - failed
    - pending
    type: string
    x-enum-varnames:
    - StatusCanceled
    - StatusChargeable
    - StatusConsumed
    - StatusFailed
    - StatusPending
  source.Type:
    enum:
    - ach_reusable_transfer
    - ach_debit
    - alipay
    - bancontact
    - card
    - card_present
    - eps
    - giropay
    - ideal
    - multibanco
    - klarna
    - p24
    - sepa_debit
    - sofort
    - three_d_secure
    - wechat
    type: string
    x-enum-varnames:
    - TypeAchreusableTransfer
    - TypeAchDebit
    - TypeAlipay
    - TypeBancontact
    - TypeCard
    - TypeCardPresent
    - TypeEps
    - TypeGiropay
    - TypeIdeal
    - TypeMultibanco
    - TypeKlarna
    - TypeP24
    - TypeSepaDebit
    - TypeSofort
    - TypeThreeDSecure
    - TypeWechat
  source.Usage:
    enum:
    - reusable
    - single_use
    type: string
    x-enum-varnames:
    - UsageReusable
    - UsageSingleUse
  subscription.Subscription:
    properties:
      automatic_tax:
        type: boolean
      billing_cycle_anchor:
        description: Determines the date of the first full invoice, and, for plans
          with `month` or `year` intervals, the day of the month for subsequent invoices.
          The timestamp is in UTC format.
        type: integer
      billing_thresholds:
        format: uuid
        type: string
      cancel_at:
        description: A date in the future at which the subscription will automatically
          get canceled
        type: integer
      cancel_at_period_end:
        description: If the subscription has been canceled with the `at_period_end`
          flag set to `true`, `cancel_at_period_end` on the subscription will be true.
          You can use this attribute to determine whether a subscription that has
          a status of active is scheduled to be canceled at the end of the current
          period.
        type: boolean
      canceled_at:
        description: If the subscription has been canceled, the date of that cancellation.
          If the subscription was canceled with `cancel_at_period_end`, `canceled_at`
          will reflect the time of the most recent update request, not the end of
          the subscription period when the subscription is automatically moved to
          a canceled state.
        type: integer
      collection_method:
        description: Either `charge_automatically`, or `send_invoice`. When charging
          automatically, Stripe will attempt to pay this subscription at the end of
          the cycle using the default source attached to the customer. When sending
          an invoice, Stripe will email your customer an invoice with payment instructions
          and mark the subscription as `active`.
        type: string
      created_at:
        type: string
      currency:
        description: Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html),
          in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
        type: string
      current_period_end:
        description: End of the current period that the subscription has been invoiced
          for. At the end of this period, a new invoice will be created.
        type: integer
      current_period_start:
        description: Start of the current period that the subscription has been invoiced
          for.
        type: integer
      customer:
        format: uuid
        type: string
      days_until_due:
        description: Number of days a customer has to pay invoices generated by this
          subscription. This value will be `null` for subscriptions where `collection_method=charge_automatically`.
        type: integer
      default_payment_method:
        format: uuid
        type: string
      default_tax_rates:
        description: The tax rates that will apply to any subscription item that does
          not have `tax_rates` set. Invoices created will have their `default_tax_rates`
          populated from the subscription.
        format: uuid
        type: string
      deleted_at:
        $ref: '#/definitions/database.DeletedAt'
      description:
        description: The subscription's description, meant to be displayable to the
          customer. Use this field to optionally store an explanation of the subscription
          for rendering in Stripe surfaces.
        type: string
      discount:
        format: uuid
        type: string
      ended_at:
        description: If the subscription has ended, the date the subscription ended.
        type: integer
      id:
        type: string
      livemode:
        type: boolean
      metadata:
        $ref: '#/definitions/core.JSONB'
      next_pending_invoice_item_invoice:
        description: Specifies the approximate timestamp on which any pending invoice
          items will be billed according to the schedule provided at `pending_invoice_item_interval`.
        type: integer
      object:
        type: string
      pause_collection:
        format: uuid
        type: string
      payment_settings:
        format: uuid
        type: string
      pending_invoice_item_interval:
        format: uuid
        type: string
      pending_setup_intent:
        format: uuid
        type: string
      pending_update:
        format: uuid
        type: string
      price:
        format: uuid
        type: string
      schedule:
        format: uuid
        type: string
      start_date:
        description: Date when the subscription was first created. The date might
          differ from the `created` date due to backdating.
        type: integer
      status:
        description: Possible values are `incomplete`, `incomplete_expired`, `trialing`,
          `active`, `past_due`, `canceled`, or `unpaid`.   For `collection_method=charge_automatically`
          a subscription moves into `incomplete` if the initial payment attempt fails.
          A subscription in this state can only have metadata and default_source updated.
          Once the first invoice is paid, the subscription moves into an `active`
          state. If the first invoice is not paid within 23 hours, the subscription
          transitions to `incomplete_expired`. This is a terminal state, the open
          invoice will be voided and no further invoices will be generated.   A subscription
          that is currently in a trial period is `trialing` and moves to `active`
          when the trial period is over.   If subscription `collection_method=charge_automatically`
          it becomes `past_due` when payment to renew it fails and `canceled` or `unpaid`
          (depending on your subscriptions settings) when Stripe has exhausted all
          payment retry attempts.   If subscription `collection_method=send_invoice`
          it becomes `past_due` when its invoice is not paid by the due date, and
          `canceled` or `unpaid` if it is still not paid by an additional deadline
          after that. Note that when a subscription has a status of `unpaid`, no subsequent
          invoices will be attempted (invoices will be created, but then immediately
          automatically closed). After receiving updated payment information from
          a customer, you may choose to reopen and pay their closed invoices.
        type: string
      trial_end:
        description: If the subscription has a trial, the end of that trial.
        type: integer
      trial_start:
        description: If the subscription has a trial, the beginning of that trial.
        type: integer
      updated_at:
        type: string
    type: object
  subscriptionItem.SubscriptionItem:
    properties:
      created_at:
        type: string
      deleted_at:
        $ref: '#/definitions/database.DeletedAt'
      id:
        type: string
      livemode:
        type: boolean
      metadata:
        $ref: '#/definitions/core.JSONB'
      object:
        type: string
      price:
        format: uuid
        type: string
      quantity:
        description: The [quantity](https://stripe.com/docs/subscriptions/quantities)
          of the plan to which the customer should be subscribed.
        type: integer
      subscription:
        format: uuid
        type: string
      tax_rates:
        description: The tax rates which apply to this `subscription_item`. When set,
          the `default_tax_rates` on the subscription do not apply to this `subscription_item`.
        format: uuid
        type: string
      updated_at:
        type: string
    type: object
  subscriptionSchedule.SubscriptionSchedule:
    properties:
      canceled_at:
        description: Time at which the subscription schedule was canceled. Measured
          in seconds since the Unix epoch.
        type: integer
      completed_at:
        description: Time at which the subscription schedule was completed. Measured
          in seconds since the Unix epoch.
        type: integer
      created_at:
        type: string
      customer:
        format: uuid
        type: string
      default_settings:
        format: uuid
        type: string
      deleted_at:
        $ref: '#/definitions/database.DeletedAt'
      end_behavior:
        description: Behavior of the subscription schedule and underlying subscription
          when it ends. Possible values are `release` or `cancel` with the default
          being `release`. `release` will end the subscription schedule and keep the
          underlying subscription running.`cancel` will end the subscription schedule
          and cancel the underlying subscription.
        type: string
      end_date:
        description: The end of this phase of the subscription schedule.
        type: integer
      id:
        type: string
      livemode:
        type: boolean
      metadata:
        $ref: '#/definitions/core.JSONB'
      object:
        type: string
      phases:
        description: Configuration for the subscription schedule's phases.
        format: uuid
        type: string
      released_at:
        description: Time at which the subscription schedule was released. Measured
          in seconds since the Unix epoch.
        type: string
      released_subscription:
        description: ID of the subscription once managed by the subscription schedule
          (if it is released).
        type: string
      start_date:
        description: The start of this phase of the subscription schedule.
        type: integer
      status:
        description: The present status of the subscription schedule. Possible values
          are `not_started`, `active`, `completed`, `released`, and `canceled`. You
          can read more about the different states in our [behavior guide](https://stripe.com/docs/billing/subscriptions/subscription-schedules).
        type: string
      updated_at:
        type: string
    type: object
  usageRecord.UsageRecord:
    properties:
      created_at:
        type: string
      deleted_at:
        $ref: '#/definitions/database.DeletedAt'
      id:
        type: string
      livemode:
        type: boolean
      metadata:
        $ref: '#/definitions/core.JSONB'
      object:
        description: String representing the object's type. Objects of the same type
          share the same value.
        type: string
      quantity:
        description: The usage quantity for the specified date.
        type: integer
      subscription_item:
        description: The ID of the subscription item this usage record contains data
          for.
        type: string
      timestamp:
        description: The timestamp when this usage occurred.
        type: integer
      updated_at:
        type: string
    type: object
  uuid.NullUUID:
    properties:
      uuid:
        type: string
      valid:
        description: Valid is true if UUID is not NULL
        type: boolean
    type: object
host: localhost:3000
info:
  contact:
    email: support@swagger.io
    name: API Support
    url: http://www.swagger.io/support
  description: This is a sample server server.
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: http://swagger.io/terms/
  title: Fiber Swagger Example API
  version: "2.0"
paths:
  /v1//subscription_items/{id}/usage_record_summaries:
    get:
      consumes:
      - application/json
      description: Get all existing UsageRecords.
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/usageRecord.UsageRecord'
            type: array
      summary: get all existing UsageRecords
      tags:
      - UsageRecord
  /v1/balance:
    get:
      consumes:
      - application/json
      description: Get Balance by given ID or 404 error.
      parameters:
      - description: Balance ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/balance.Balance'
      summary: get Balance by given ID or 404 error.
      tags:
      - Balance
  /v1/balance_transactions:
    get:
      consumes:
      - application/json
      description: Get all existing BalanceTransaction.
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/balance.BalanceTransaction'
            type: array
      summary: get all existing BalanceTransaction
      tags:
      - BalanceTransaction
  /v1/balance_transactions/{id}:
    get:
      consumes:
      - application/json
      description: Get BalanceTransaction by given ID or 404 error.
      parameters:
      - description: BalanceTransaction ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/balance.BalanceTransaction'
      summary: get BalanceTransaction by given ID or 404 error.
      tags:
      - BalanceTransaction
  /v1/charges:
    get:
      consumes:
      - application/json
      description: Get all existing Charges.
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/charge.Charge'
            type: array
      summary: get all existing Charges
      tags:
      - Charge
    post:
      consumes:
      - application/json
      description: Create a new Charge.
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/charge.Charge'
      summary: create a new Charge
      tags:
      - Charge
  /v1/charges/{id}:
    delete:
      consumes:
      - application/json
      description: Delete Charge by given ID.
      parameters:
      - description: Charge ID
        in: body
        name: id
        required: true
        schema:
          type: string
      produces:
      - application/json
      responses:
        "204":
          description: ok
          schema:
            type: string
      summary: delete Charge by given ID
      tags:
      - Charge
    get:
      consumes:
      - application/json
      description: Get Charge by given ID or 404 error.
      parameters:
      - description: Charge ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/charge.Charge'
      summary: get Charge by given ID or 404 error.
      tags:
      - Charge
    post:
      consumes:
      - application/json
      description: Update Charge.
      parameters:
      - description: Charge ID
        in: body
        name: id
        required: true
        schema:
          type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/charge.Charge'
      summary: update Charge
      tags:
      - Charge
  /v1/charges/{id}/capture:
    post:
      consumes:
      - application/json
      description: Capture Charge.
      parameters:
      - description: Charge ID
        in: body
        name: id
        required: true
        schema:
          type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/charge.Charge'
      summary: capture Charge
      tags:
      - Charge
  /v1/checkout/sessions:
    get:
      consumes:
      - application/json
      description: Get all existing CheckoutSessions.
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/checkout.CheckoutSession'
            type: array
      summary: get all existing CheckoutSessions
      tags:
      - CheckoutSession
    post:
      consumes:
      - application/json
      description: Create a new CheckoutSession.
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/checkout.CheckoutSession'
      summary: create a new CheckoutSession
      tags:
      - CheckoutSession
  /v1/checkout/sessions/{id}:
    delete:
      consumes:
      - application/json
      description: Delete CheckoutSession by given ID.
      parameters:
      - description: CheckoutSession ID
        in: body
        name: id
        required: true
        schema:
          type: string
      produces:
      - application/json
      responses:
        "204":
          description: ok
          schema:
            type: string
      summary: delete CheckoutSession by given ID
      tags:
      - CheckoutSession
    get:
      consumes:
      - application/json
      description: Get CheckoutSession by given ID or 404 error.
      parameters:
      - description: CheckoutSession ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/checkout.CheckoutSession'
      summary: get CheckoutSession by given ID or 404 error.
      tags:
      - CheckoutSession
    post:
      consumes:
      - application/json
      description: Update CheckoutSession.
      parameters:
      - description: CheckoutSession ID
        in: body
        name: id
        required: true
        schema:
          type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/checkout.CheckoutSession'
      summary: update CheckoutSession
      tags:
      - CheckoutSession
  /v1/checkout/sessions/{id}/expire:
    post:
      consumes:
      - application/json
      description: Expire CheckoutSession.
      parameters:
      - description: CheckoutSession ID
        in: body
        name: id
        required: true
        schema:
          type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/checkout.CheckoutSession'
      summary: expire CheckoutSession
      tags:
      - CheckoutSession
  /v1/coupons:
    get:
      consumes:
      - application/json
      description: Get all existing Coupons.
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/coupon.Coupon'
            type: array
      summary: get all existing Coupons
      tags:
      - Coupon
    post:
      consumes:
      - application/json
      description: Create a new Coupon.
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/coupon.Coupon'
      summary: create a new Coupon
      tags:
      - Coupon
  /v1/coupons/{id}:
    delete:
      consumes:
      - application/json
      description: Delete Coupon by given ID.
      parameters:
      - description: Coupon ID
        in: body
        name: id
        required: true
        schema:
          type: string
      produces:
      - application/json
      responses:
        "204":
          description: ok
          schema:
            type: string
      summary: delete Coupon by given ID
      tags:
      - Coupon
    get:
      consumes:
      - application/json
      description: Get Coupon by given ID or 404 error.
      parameters:
      - description: Coupon ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/coupon.Coupon'
      summary: get Coupon by given ID or 404 error.
      tags:
      - Coupon
    post:
      consumes:
      - application/json
      description: Update Coupon.
      parameters:
      - description: Coupon ID
        in: body
        name: id
        required: true
        schema:
          type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/coupon.Coupon'
      summary: update Coupon
      tags:
      - Coupon
  /v1/credit_notes:
    get:
      consumes:
      - application/json
      description: Get all existing LineItems.
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/item.LineItem'
            type: array
      summary: get all existing LineItems
      tags:
      - LineItem
    post:
      consumes:
      - application/json
      description: Create a new LineItem.
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/item.LineItem'
      summary: create a new LineItem
      tags:
      - LineItem
  /v1/credit_notes/{id}:
    delete:
      consumes:
      - application/json
      description: Delete LineItem by given ID.
      parameters:
      - description: LineItem ID
        in: body
        name: id
        required: true
        schema:
          type: string
      produces:
      - application/json
      responses:
        "204":
          description: ok
          schema:
            type: string
      summary: delete LineItem by given ID
      tags:
      - LineItem
    get:
      consumes:
      - application/json
      description: Get LineItem by given ID or 404 error.
      parameters:
      - description: LineItem ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/item.LineItem'
      summary: get LineItem by given ID or 404 error.
      tags:
      - LineItem
    post:
      consumes:
      - application/json
      description: Update LineItem.
      parameters:
      - description: LineItem ID
        in: body
        name: id
        required: true
        schema:
          type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/item.LineItem'
      summary: update LineItem
      tags:
      - LineItem
  /v1/credit_notes/{id}/lines:
    get:
      consumes:
      - application/json
      description: Get CreditNote by given ID and return his Linitems.
      parameters:
      - description: CreditNote ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/credit.CreditNote'
      summary: get CreditNote by given ID and return his Linitems.
      tags:
      - CreditNote
  /v1/credit_notes/{id}/void:
    get:
      consumes:
      - application/json
      description: Update CreditNote to status void.
      parameters:
      - description: CreditNote ID
        in: body
        name: id
        required: true
        schema:
          type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/credit.CreditNote'
      summary: update CreditNote to status void
      tags:
      - CreditNote
  /v1/customers:
    get:
      consumes:
      - application/json
      description: Get all existing Customers.
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/customer.Customer'
            type: array
      summary: get all existing Customers
      tags:
      - Customer
    post:
      consumes:
      - application/json
      description: Create a new Customer.
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/customer.Customer'
      summary: create a new Customer
      tags:
      - Customer
  /v1/customers/{id}:
    delete:
      consumes:
      - application/json
      description: Delete Customer by given ID.
      parameters:
      - description: Customer ID
        in: body
        name: id
        required: true
        schema:
          type: string
      produces:
      - application/json
      responses:
        "204":
          description: ok
          schema:
            type: string
      summary: delete Customer by given ID
      tags:
      - Customer
    get:
      consumes:
      - application/json
      description: Get Customer by given ID or 404 error.
      parameters:
      - description: Customer ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/customer.Customer'
      summary: get Customer by given ID or 404 error.
      tags:
      - Customer
    post:
      consumes:
      - application/json
      description: Update Customer.
      parameters:
      - description: Customer ID
        in: body
        name: id
        required: true
        schema:
          type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/customer.Customer'
      summary: update Customer
      tags:
      - Customer
  /v1/customers/{id}/cash_balance:
    get:
      consumes:
      - application/json
      description: Get all existing CashBalances.
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/cash.CashBalance'
            type: array
      summary: get all existing CashBalances
      tags:
      - CashBalance
    post:
      consumes:
      - application/json
      description: Create a new CashBalance.
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/cash.CashBalance'
      summary: create a new CashBalance
      tags:
      - CashBalance
  /v1/customers/{id}/cash_balance/{id}:
    delete:
      consumes:
      - application/json
      description: Delete CashBalance by given ID.
      parameters:
      - description: CashBalance ID
        in: body
        name: id
        required: true
        schema:
          type: string
      produces:
      - application/json
      responses:
        "204":
          description: ok
          schema:
            type: string
      summary: delete CashBalance by given ID
      tags:
      - CashBalance
    get:
      consumes:
      - application/json
      description: Get CashBalance by given ID or 404 error.
      parameters:
      - description: CashBalance ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/cash.CashBalance'
      summary: get CashBalance by given ID or 404 error.
      tags:
      - CashBalance
    post:
      consumes:
      - application/json
      description: Update CashBalance.
      parameters:
      - description: CashBalance ID
        in: body
        name: id
        required: true
        schema:
          type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/cash.CashBalance'
      summary: update CashBalance
      tags:
      - CashBalance
  /v1/customers/{id}/discount:
    get:
      consumes:
      - application/json
      description: Get all existing Discounts.
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/discount.Discount'
            type: array
      summary: get all existing Discounts
      tags:
      - Discount
    post:
      consumes:
      - application/json
      description: Create a new Discount.
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/discount.Discount'
      summary: create a new Discount
      tags:
      - Discount
  /v1/customers/{id}/discount/{id}:
    delete:
      consumes:
      - application/json
      description: Delete Discount by given ID.
      parameters:
      - description: Discount ID
        in: body
        name: id
        required: true
        schema:
          type: string
      produces:
      - application/json
      responses:
        "204":
          description: ok
          schema:
            type: string
      summary: delete Discount by given ID
      tags:
      - Discount
    get:
      consumes:
      - application/json
      description: Get Discount by given ID or 404 error.
      parameters:
      - description: Discount ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/discount.Discount'
      summary: get Discount by given ID or 404 error.
      tags:
      - Discount
    post:
      consumes:
      - application/json
      description: Update Discount.
      parameters:
      - description: Discount ID
        in: body
        name: id
        required: true
        schema:
          type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/discount.Discount'
      summary: update Discount
      tags:
      - Discount
  /v1/customers/{id}/sources:
    get:
      consumes:
      - application/json
      description: Get all existing Cards.
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/github_com_driver005_gateway_payment_card.Card'
            type: array
      summary: get all existing Cards
      tags:
      - Card
    post:
      consumes:
      - application/json
      description: Attaching Source to Customer by given ID.
      parameters:
      - description: Source ID
        in: body
        name: id
        required: true
        schema:
          type: string
      produces:
      - application/json
      responses:
        "204":
          description: ok
          schema:
            type: string
      summary: attaching Source to Customer by given ID
      tags:
      - Source
  /v1/customers/{id}/sources/{id}:
    delete:
      consumes:
      - application/json
      description: dettaching Source from Customer by given ID.
      parameters:
      - description: Source ID
        in: body
        name: id
        required: true
        schema:
          type: string
      produces:
      - application/json
      responses:
        "204":
          description: ok
          schema:
            type: string
      summary: dettaching Source from Customer by given ID
      tags:
      - Source
    get:
      consumes:
      - application/json
      description: Get Card by given ID or 404 error.
      parameters:
      - description: Card ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/github_com_driver005_gateway_payment_card.Card'
      summary: get Card by given ID or 404 error.
      tags:
      - Card
    post:
      consumes:
      - application/json
      description: Update Card.
      parameters:
      - description: Card ID
        in: body
        name: id
        required: true
        schema:
          type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/github_com_driver005_gateway_payment_card.Card'
      summary: update Card
      tags:
      - Card
  /v1/customers/{id}/sources/{id}/verify:
    post:
      consumes:
      - application/json
      description: Verify BankAccount.
      parameters:
      - description: BankAccount ID
        in: body
        name: id
        required: true
        schema:
          type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/bank.BankAccount'
      summary: verify BankAccount
      tags:
      - BankAccount
  /v1/customers/{id}/tax_ids:
    get:
      consumes:
      - application/json
      description: Get all existing Customers.
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/customer.Customer'
            type: array
      summary: get all existing Customers
      tags:
      - Customer
    post:
      consumes:
      - application/json
      description: Create a new Customer.
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/customer.Customer'
      summary: create a new Customer
      tags:
      - Customer
  /v1/customers/{id}/tax_ids/{tax_id}:
    delete:
      consumes:
      - application/json
      description: Delete Customer by given ID.
      parameters:
      - description: Customer ID
        in: body
        name: id
        required: true
        schema:
          type: string
      produces:
      - application/json
      responses:
        "204":
          description: ok
          schema:
            type: string
      summary: delete Customer by given ID
      tags:
      - Customer
    get:
      consumes:
      - application/json
      description: Get Customer by given ID or 404 error.
      parameters:
      - description: Customer ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/customer.Customer'
      summary: get Customer by given ID or 404 error.
      tags:
      - Customer
  /v1/disputes:
    get:
      consumes:
      - application/json
      description: Get all existing Disputes.
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/dispute.Dispute'
            type: array
      summary: get all existing Disputes
      tags:
      - Dispute
    post:
      consumes:
      - application/json
      description: Create a new Dispute.
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dispute.Dispute'
      summary: create a new Dispute
      tags:
      - Dispute
  /v1/disputes/{id}:
    delete:
      consumes:
      - application/json
      description: Delete Dispute by given ID.
      parameters:
      - description: Dispute ID
        in: body
        name: id
        required: true
        schema:
          type: string
      produces:
      - application/json
      responses:
        "204":
          description: ok
          schema:
            type: string
      summary: delete Dispute by given ID
      tags:
      - Dispute
    get:
      consumes:
      - application/json
      description: Get Dispute by given ID or 404 error.
      parameters:
      - description: Dispute ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dispute.Dispute'
      summary: get Dispute by given ID or 404 error.
      tags:
      - Dispute
    post:
      consumes:
      - application/json
      description: Update Dispute.
      parameters:
      - description: Dispute ID
        in: body
        name: id
        required: true
        schema:
          type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dispute.Dispute'
      summary: update Dispute
      tags:
      - Dispute
  /v1/disputes/{id}/close:
    post:
      consumes:
      - application/json
      description: Close Dispute.
      parameters:
      - description: Dispute ID
        in: body
        name: id
        required: true
        schema:
          type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dispute.Dispute'
      summary: close Dispute
      tags:
      - Dispute
  /v1/files:
    get:
      consumes:
      - application/json
      description: Get all existing Files.
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/file.File'
            type: array
      summary: get all existing Files
      tags:
      - File
    post:
      consumes:
      - application/json
      description: Create a new File.
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/file.File'
      summary: create a new File
      tags:
      - File
  /v1/files/{id}:
    delete:
      consumes:
      - application/json
      description: Delete File by given ID.
      parameters:
      - description: File ID
        in: body
        name: id
        required: true
        schema:
          type: string
      produces:
      - application/json
      responses:
        "204":
          description: ok
          schema:
            type: string
      summary: delete File by given ID
      tags:
      - File
    get:
      consumes:
      - application/json
      description: Get File by given ID or 404 error.
      parameters:
      - description: File ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/file.File'
      summary: get File by given ID or 404 error.
      tags:
      - File
    post:
      consumes:
      - application/json
      description: Update File.
      parameters:
      - description: File ID
        in: body
        name: id
        required: true
        schema:
          type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/file.File'
      summary: update File
      tags:
      - File
  /v1/invoiceitems:
    get:
      consumes:
      - application/json
      description: Get all existing Invoiceitems.
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/invoiceItem.Invoiceitem'
            type: array
      summary: get all existing Invoiceitems
      tags:
      - Invoiceitem
    post:
      consumes:
      - application/json
      description: Create a new Invoiceitem.
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/invoiceItem.Invoiceitem'
      summary: create a new Invoiceitem
      tags:
      - Invoiceitem
  /v1/invoiceitems/{id}:
    delete:
      consumes:
      - application/json
      description: Delete Invoiceitem by given ID.
      parameters:
      - description: Invoiceitem ID
        in: body
        name: id
        required: true
        schema:
          type: string
      produces:
      - application/json
      responses:
        "204":
          description: ok
          schema:
            type: string
      summary: delete Invoiceitem by given ID
      tags:
      - Invoiceitem
    get:
      consumes:
      - application/json
      description: Get Invoiceitem by given ID or 404 error.
      parameters:
      - description: Invoiceitem ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/invoiceItem.Invoiceitem'
      summary: get Invoiceitem by given ID or 404 error.
      tags:
      - Invoiceitem
    post:
      consumes:
      - application/json
      description: Update Invoiceitem.
      parameters:
      - description: Invoiceitem ID
        in: body
        name: id
        required: true
        schema:
          type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/invoiceItem.Invoiceitem'
      summary: update Invoiceitem
      tags:
      - Invoiceitem
  /v1/invoices:
    get:
      consumes:
      - application/json
      description: Get all existing Invoices.
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/invoice.Invoice'
            type: array
      summary: get all existing Invoices
      tags:
      - Invoice
    post:
      consumes:
      - application/json
      description: Create a new Invoice.
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/invoice.Invoice'
      summary: create a new Invoice
      tags:
      - Invoice
  /v1/invoices/{id}:
    delete:
      consumes:
      - application/json
      description: Delete Invoice by given ID.
      parameters:
      - description: Invoice ID
        in: body
        name: id
        required: true
        schema:
          type: string
      produces:
      - application/json
      responses:
        "204":
          description: ok
          schema:
            type: string
      summary: delete Invoice by given ID
      tags:
      - Invoice
    get:
      consumes:
      - application/json
      description: Get Invoice by given ID or 404 error.
      parameters:
      - description: Invoice ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/invoice.Invoice'
      summary: get Invoice by given ID or 404 error.
      tags:
      - Invoice
    post:
      consumes:
      - application/json
      description: Update Invoice.
      parameters:
      - description: Invoice ID
        in: body
        name: id
        required: true
        schema:
          type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/invoice.Invoice'
      summary: update Invoice
      tags:
      - Invoice
  /v1/invoices/{id}/cancel:
    post:
      consumes:
      - application/json
      description: Cancel Invoice.
      parameters:
      - description: Invoice ID
        in: body
        name: id
        required: true
        schema:
          type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/invoice.Invoice'
      summary: cancel Invoice
      tags:
      - Invoice
  /v1/invoices/{id}/capture:
    post:
      consumes:
      - application/json
      description: Capture Invoice.
      parameters:
      - description: Invoice ID
        in: body
        name: id
        required: true
        schema:
          type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/invoice.Invoice'
      summary: capture Invoice
      tags:
      - Invoice
  /v1/invoices/{id}/finalize:
    post:
      consumes:
      - application/json
      description: Finalize Invoice.
      parameters:
      - description: Invoice ID
        in: body
        name: id
        required: true
        schema:
          type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/invoice.Invoice'
      summary: finalize Invoice
      tags:
      - Invoice
  /v1/invoices/{id}/mark_uncollectible:
    post:
      consumes:
      - application/json
      description: Mark Invoice as uncollectible.
      parameters:
      - description: Invoice ID
        in: body
        name: id
        required: true
        schema:
          type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/invoice.Invoice'
      summary: mark Invoice as uncollectible
      tags:
      - Invoice
  /v1/invoices/{id}/pay:
    post:
      consumes:
      - application/json
      description: Pay Invoice.
      parameters:
      - description: Invoice ID
        in: body
        name: id
        required: true
        schema:
          type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/invoice.Invoice'
      summary: pay Invoice
      tags:
      - Invoice
  /v1/invoices/{id}/send:
    post:
      consumes:
      - application/json
      description: Send Invoice.
      parameters:
      - description: Invoice ID
        in: body
        name: id
        required: true
        schema:
          type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/invoice.Invoice'
      summary: send Invoice
      tags:
      - Invoice
  /v1/invoices/{id}/upcoming:
    post:
      consumes:
      - application/json
      description: Upcoming Invoice.
      parameters:
      - description: Invoice ID
        in: body
        name: id
        required: true
        schema:
          type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/invoice.Invoice'
      summary: upcoming Invoice
      tags:
      - Invoice
  /v1/invoices/{id}/void:
    post:
      consumes:
      - application/json
      description: Void Invoice.
      parameters:
      - description: Invoice ID
        in: body
        name: id
        required: true
        schema:
          type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/invoice.Invoice'
      summary: void Invoice
      tags:
      - Invoice
  /v1/mandates:
    get:
      consumes:
      - application/json
      description: Get all existing Mandates.
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/mandate.Mandate'
            type: array
      summary: get all existing Mandates
      tags:
      - Mandate
    post:
      consumes:
      - application/json
      description: Create a new Mandate.
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/mandate.Mandate'
      summary: create a new Mandate
      tags:
      - Mandate
  /v1/mandates/{id}:
    delete:
      consumes:
      - application/json
      description: Delete Mandate by given ID.
      parameters:
      - description: Mandate ID
        in: body
        name: id
        required: true
        schema:
          type: string
      produces:
      - application/json
      responses:
        "204":
          description: ok
          schema:
            type: string
      summary: delete Mandate by given ID
      tags:
      - Mandate
    get:
      consumes:
      - application/json
      description: Get Mandate by given ID or 404 error.
      parameters:
      - description: Mandate ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/mandate.Mandate'
      summary: get Mandate by given ID or 404 error.
      tags:
      - Mandate
    post:
      consumes:
      - application/json
      description: Update Mandate.
      parameters:
      - description: Mandate ID
        in: body
        name: id
        required: true
        schema:
          type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/mandate.Mandate'
      summary: update Mandate
      tags:
      - Mandate
  /v1/payment_intents:
    get:
      consumes:
      - application/json
      description: Get all existing PaymentIntents.
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/intent.PaymentIntent'
            type: array
      summary: get all existing PaymentIntents
      tags:
      - PaymentIntent
    post:
      consumes:
      - application/json
      description: Create a new PaymentIntent.
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/intent.PaymentIntent'
      summary: create a new PaymentIntent
      tags:
      - PaymentIntent
  /v1/payment_intents/{id}:
    delete:
      consumes:
      - application/json
      description: Delete PaymentIntent by given ID.
      parameters:
      - description: PaymentIntent ID
        in: body
        name: id
        required: true
        schema:
          type: string
      produces:
      - application/json
      responses:
        "204":
          description: ok
          schema:
            type: string
      summary: delete PaymentIntent by given ID
      tags:
      - PaymentIntent
    get:
      consumes:
      - application/json
      description: Get PaymentIntent by given ID or 404 error.
      parameters:
      - description: PaymentIntent ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/intent.PaymentIntent'
      summary: get PaymentIntent by given ID or 404 error.
      tags:
      - PaymentIntent
    post:
      consumes:
      - application/json
      description: Update PaymentIntent.
      parameters:
      - description: PaymentIntent ID
        in: body
        name: id
        required: true
        schema:
          type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/intent.PaymentIntent'
      summary: update PaymentIntent
      tags:
      - PaymentIntent
  /v1/payment_links:
    get:
      consumes:
      - application/json
      description: Get all existing PaymentLinks.
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/link.PaymentLink'
            type: array
      summary: get all existing PaymentLinks
      tags:
      - PaymentLink
    post:
      consumes:
      - application/json
      description: Create a new PaymentLink.
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/link.PaymentLink'
      summary: create a new PaymentLink
      tags:
      - PaymentLink
  /v1/payment_links/{id}:
    delete:
      consumes:
      - application/json
      description: Delete PaymentLink by given ID.
      parameters:
      - description: PaymentLink ID
        in: body
        name: id
        required: true
        schema:
          type: string
      produces:
      - application/json
      responses:
        "204":
          description: ok
          schema:
            type: string
      summary: delete PaymentLink by given ID
      tags:
      - PaymentLink
    get:
      consumes:
      - application/json
      description: Get PaymentLink by given ID or 404 error.
      parameters:
      - description: PaymentLink ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/link.PaymentLink'
      summary: get PaymentLink by given ID or 404 error.
      tags:
      - PaymentLink
    post:
      consumes:
      - application/json
      description: Update PaymentLink.
      parameters:
      - description: PaymentLink ID
        in: body
        name: id
        required: true
        schema:
          type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/link.PaymentLink'
      summary: update PaymentLink
      tags:
      - PaymentLink
  /v1/payment_methods:
    get:
      consumes:
      - application/json
      description: Get all existing PaymentMethods.
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/method.PaymentMethod'
            type: array
      summary: get all existing PaymentMethods
      tags:
      - PaymentMethod
    post:
      consumes:
      - application/json
      description: Create a new PaymentMethod.
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/method.PaymentMethod'
      summary: create a new PaymentMethod
      tags:
      - PaymentMethod
  /v1/payment_methods/{id}:
    delete:
      consumes:
      - application/json
      description: Delete PaymentMethod by given ID.
      parameters:
      - description: PaymentMethod ID
        in: body
        name: id
        required: true
        schema:
          type: string
      produces:
      - application/json
      responses:
        "204":
          description: ok
          schema:
            type: string
      summary: delete PaymentMethod by given ID
      tags:
      - PaymentMethod
    get:
      consumes:
      - application/json
      description: Get PaymentMethod by given ID or 404 error.
      parameters:
      - description: PaymentMethod ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/method.PaymentMethod'
      summary: get PaymentMethod by given ID or 404 error.
      tags:
      - PaymentMethod
    post:
      consumes:
      - application/json
      description: Update PaymentMethod.
      parameters:
      - description: PaymentMethod ID
        in: body
        name: id
        required: true
        schema:
          type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/method.PaymentMethod'
      summary: update PaymentMethod
      tags:
      - PaymentMethod
  /v1/payment_methods/{id}/attach:
    post:
      consumes:
      - application/json
      description: Attaching PaymentMethod to Customer by given ID.
      parameters:
      - description: PaymentMethod ID
        in: body
        name: id
        required: true
        schema:
          type: string
      produces:
      - application/json
      responses:
        "204":
          description: ok
          schema:
            type: string
      summary: attaching PaymentMethod to Customer by given ID
      tags:
      - PaymentMethod
  /v1/payment_methods/{id}/dettach:
    post:
      consumes:
      - application/json
      description: dettaching PaymentMethod from Customer by given ID.
      parameters:
      - description: PaymentMethod ID
        in: body
        name: id
        required: true
        schema:
          type: string
      produces:
      - application/json
      responses:
        "204":
          description: ok
          schema:
            type: string
      summary: dettaching PaymentMethod from Customer by given ID
      tags:
      - PaymentMethod
  /v1/payouts:
    get:
      consumes:
      - application/json
      description: Get all existing Payouts.
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/payout.Payout'
            type: array
      summary: get all existing Payouts
      tags:
      - Payout
    post:
      consumes:
      - application/json
      description: Create a new Payout.
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/payout.Payout'
      summary: create a new Payout
      tags:
      - Payout
  /v1/payouts/{id}:
    delete:
      consumes:
      - application/json
      description: Delete Payout by given ID.
      parameters:
      - description: Payout ID
        in: body
        name: id
        required: true
        schema:
          type: string
      produces:
      - application/json
      responses:
        "204":
          description: ok
          schema:
            type: string
      summary: delete Payout by given ID
      tags:
      - Payout
    get:
      consumes:
      - application/json
      description: Get Payout by given ID or 404 error.
      parameters:
      - description: Payout ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/payout.Payout'
      summary: get Payout by given ID or 404 error.
      tags:
      - Payout
    post:
      consumes:
      - application/json
      description: Update Payout.
      parameters:
      - description: Payout ID
        in: body
        name: id
        required: true
        schema:
          type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/payout.Payout'
      summary: update Payout
      tags:
      - Payout
  /v1/payouts/{id}/cancele:
    post:
      consumes:
      - application/json
      description: Cancel Payout.
      parameters:
      - description: Payout ID
        in: body
        name: id
        required: true
        schema:
          type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/payout.Payout'
      summary: cancel Payout
      tags:
      - Payout
  /v1/payouts/{id}/reverse:
    post:
      consumes:
      - application/json
      description: Reverse Payout.
      parameters:
      - description: Payout ID
        in: body
        name: id
        required: true
        schema:
          type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/payout.Payout'
      summary: reverse Payout
      tags:
      - Payout
  /v1/plans:
    get:
      consumes:
      - application/json
      description: Get all existing Plans.
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/plan.Plan'
            type: array
      summary: get all existing Plans
      tags:
      - Plan
    post:
      consumes:
      - application/json
      description: Create a new Plan.
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/plan.Plan'
      summary: create a new Plan
      tags:
      - Plan
  /v1/plans/{id}:
    delete:
      consumes:
      - application/json
      description: Delete Plan by given ID.
      parameters:
      - description: Plan ID
        in: body
        name: id
        required: true
        schema:
          type: string
      produces:
      - application/json
      responses:
        "204":
          description: ok
          schema:
            type: string
      summary: delete Plan by given ID
      tags:
      - Plan
    get:
      consumes:
      - application/json
      description: Get Plan by given ID or 404 error.
      parameters:
      - description: Plan ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/plan.Plan'
      summary: get Plan by given ID or 404 error.
      tags:
      - Plan
    post:
      consumes:
      - application/json
      description: Update Plan.
      parameters:
      - description: Plan ID
        in: body
        name: id
        required: true
        schema:
          type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/plan.Plan'
      summary: update Plan
      tags:
      - Plan
  /v1/prices:
    get:
      consumes:
      - application/json
      description: Get all existing Prices.
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/price.Price'
            type: array
      summary: get all existing Prices
      tags:
      - Price
    post:
      consumes:
      - application/json
      description: Create a new Price.
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/price.Price'
      summary: create a new Price
      tags:
      - Price
  /v1/prices/{id}:
    delete:
      consumes:
      - application/json
      description: Delete Price by given ID.
      parameters:
      - description: Price ID
        in: body
        name: id
        required: true
        schema:
          type: string
      produces:
      - application/json
      responses:
        "204":
          description: ok
          schema:
            type: string
      summary: delete Price by given ID
      tags:
      - Price
    get:
      consumes:
      - application/json
      description: Get Price by given ID or 404 error.
      parameters:
      - description: Price ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/price.Price'
      summary: get Price by given ID or 404 error.
      tags:
      - Price
    post:
      consumes:
      - application/json
      description: Update Price.
      parameters:
      - description: Price ID
        in: body
        name: id
        required: true
        schema:
          type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/price.Price'
      summary: update Price
      tags:
      - Price
  /v1/products:
    get:
      consumes:
      - application/json
      description: Get all existing Products.
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/product.Product'
            type: array
      summary: get all existing Products
      tags:
      - Product
    post:
      consumes:
      - application/json
      description: Create a new Product.
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/product.Product'
      summary: create a new Product
      tags:
      - Product
  /v1/products/{id}:
    delete:
      consumes:
      - application/json
      description: Delete Product by given ID.
      parameters:
      - description: Product ID
        in: body
        name: id
        required: true
        schema:
          type: string
      produces:
      - application/json
      responses:
        "204":
          description: ok
          schema:
            type: string
      summary: delete Product by given ID
      tags:
      - Product
    get:
      consumes:
      - application/json
      description: Get Product by given ID or 404 error.
      parameters:
      - description: Product ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/product.Product'
      summary: get Product by given ID or 404 error.
      tags:
      - Product
    post:
      consumes:
      - application/json
      description: Update Product.
      parameters:
      - description: Product ID
        in: body
        name: id
        required: true
        schema:
          type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/product.Product'
      summary: update Product
      tags:
      - Product
  /v1/promotion_codes:
    get:
      consumes:
      - application/json
      description: Get all existing PromotionCodes.
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/promotion.PromotionCode'
            type: array
      summary: get all existing PromotionCodes
      tags:
      - PromotionCode
    post:
      consumes:
      - application/json
      description: Create a new PromotionCode.
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/promotion.PromotionCode'
      summary: create a new PromotionCode
      tags:
      - PromotionCode
  /v1/promotion_codes/{id}:
    delete:
      consumes:
      - application/json
      description: Delete PromotionCode by given ID.
      parameters:
      - description: PromotionCode ID
        in: body
        name: id
        required: true
        schema:
          type: string
      produces:
      - application/json
      responses:
        "204":
          description: ok
          schema:
            type: string
      summary: delete PromotionCode by given ID
      tags:
      - PromotionCode
    get:
      consumes:
      - application/json
      description: Get PromotionCode by given ID or 404 error.
      parameters:
      - description: PromotionCode ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/promotion.PromotionCode'
      summary: get PromotionCode by given ID or 404 error.
      tags:
      - PromotionCode
    post:
      consumes:
      - application/json
      description: Update PromotionCode.
      parameters:
      - description: PromotionCode ID
        in: body
        name: id
        required: true
        schema:
          type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/promotion.PromotionCode'
      summary: update PromotionCode
      tags:
      - PromotionCode
  /v1/quotes:
    get:
      consumes:
      - application/json
      description: Get all existing Quotes.
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/quote.Quote'
            type: array
      summary: get all existing Quotes
      tags:
      - Quote
    post:
      consumes:
      - application/json
      description: Create a new Quote.
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/quote.Quote'
      summary: create a new Quote
      tags:
      - Quote
  /v1/quotes/{id}:
    delete:
      consumes:
      - application/json
      description: Delete Quote by given ID.
      parameters:
      - description: Quote ID
        in: body
        name: id
        required: true
        schema:
          type: string
      produces:
      - application/json
      responses:
        "204":
          description: ok
          schema:
            type: string
      summary: delete Quote by given ID
      tags:
      - Quote
    get:
      consumes:
      - application/json
      description: Get Quote by given ID or 404 error.
      parameters:
      - description: Quote ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/quote.Quote'
      summary: get Quote by given ID or 404 error.
      tags:
      - Quote
    post:
      consumes:
      - application/json
      description: Update Quote.
      parameters:
      - description: Quote ID
        in: body
        name: id
        required: true
        schema:
          type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/quote.Quote'
      summary: update Quote
      tags:
      - Quote
  /v1/quotes/{id}/accept:
    post:
      consumes:
      - application/json
      description: Accept Quote.
      parameters:
      - description: Quote ID
        in: body
        name: id
        required: true
        schema:
          type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/quote.Quote'
      summary: accept Quote
      tags:
      - Quote
  /v1/quotes/{id}/cancel:
    post:
      consumes:
      - application/json
      description: Cancel Quote.
      parameters:
      - description: Quote ID
        in: body
        name: id
        required: true
        schema:
          type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/quote.Quote'
      summary: cancel Quote
      tags:
      - Quote
  /v1/quotes/{id}/finalize:
    post:
      consumes:
      - application/json
      description: Finalize Quote.
      parameters:
      - description: Quote ID
        in: body
        name: id
        required: true
        schema:
          type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/quote.Quote'
      summary: finalize Quote
      tags:
      - Quote
  /v1/refunds:
    get:
      consumes:
      - application/json
      description: Get all existing Refunds.
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/refund.Refund'
            type: array
      summary: get all existing Refunds
      tags:
      - Refund
    post:
      consumes:
      - application/json
      description: Create a new Refund.
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/refund.Refund'
      summary: create a new Refund
      tags:
      - Refund
  /v1/refunds/{id}:
    delete:
      consumes:
      - application/json
      description: Delete Refund by given ID.
      parameters:
      - description: Refund ID
        in: body
        name: id
        required: true
        schema:
          type: string
      produces:
      - application/json
      responses:
        "204":
          description: ok
          schema:
            type: string
      summary: delete Refund by given ID
      tags:
      - Refund
    get:
      consumes:
      - application/json
      description: Get Refund by given ID or 404 error.
      parameters:
      - description: Refund ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/refund.Refund'
      summary: get Refund by given ID or 404 error.
      tags:
      - Refund
    post:
      consumes:
      - application/json
      description: Update Refund.
      parameters:
      - description: Refund ID
        in: body
        name: id
        required: true
        schema:
          type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/refund.Refund'
      summary: update Refund
      tags:
      - Refund
  /v1/refunds/{id}/cancele:
    post:
      consumes:
      - application/json
      description: Cancel Refund.
      parameters:
      - description: Refund ID
        in: body
        name: id
        required: true
        schema:
          type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/refund.Refund'
      summary: cancel Refund
      tags:
      - Refund
  /v1/setup_attempts:
    get:
      consumes:
      - application/json
      description: Get all existing SetupAttempts.
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/attempt.SetupAttempt'
            type: array
      summary: get all existing SetupAttempts
      tags:
      - SetupAttempt
    post:
      consumes:
      - application/json
      description: Create a new SetupAttempt.
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/attempt.SetupAttempt'
      summary: create a new SetupAttempt
      tags:
      - SetupAttempt
  /v1/setup_attempts/{id}:
    delete:
      consumes:
      - application/json
      description: Delete SetupAttempt by given ID.
      parameters:
      - description: SetupAttempt ID
        in: body
        name: id
        required: true
        schema:
          type: string
      produces:
      - application/json
      responses:
        "204":
          description: ok
          schema:
            type: string
      summary: delete SetupAttempt by given ID
      tags:
      - SetupAttempt
    get:
      consumes:
      - application/json
      description: Get SetupAttempt by given ID or 404 error.
      parameters:
      - description: SetupAttempt ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/attempt.SetupAttempt'
      summary: get SetupAttempt by given ID or 404 error.
      tags:
      - SetupAttempt
    post:
      consumes:
      - application/json
      description: Update SetupAttempt.
      parameters:
      - description: SetupAttempt ID
        in: body
        name: id
        required: true
        schema:
          type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/attempt.SetupAttempt'
      summary: update SetupAttempt
      tags:
      - SetupAttempt
  /v1/setup_intents:
    get:
      consumes:
      - application/json
      description: Get all existing SetupIntents.
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/intent.SetupIntent'
            type: array
      summary: get all existing SetupIntents
      tags:
      - SetupIntent
    post:
      consumes:
      - application/json
      description: Create a new SetupIntent.
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/intent.SetupIntent'
      summary: create a new SetupIntent
      tags:
      - SetupIntent
  /v1/setup_intents/{id}:
    delete:
      consumes:
      - application/json
      description: Delete SetupIntent by given ID.
      parameters:
      - description: SetupIntent ID
        in: body
        name: id
        required: true
        schema:
          type: string
      produces:
      - application/json
      responses:
        "204":
          description: ok
          schema:
            type: string
      summary: delete SetupIntent by given ID
      tags:
      - SetupIntent
    get:
      consumes:
      - application/json
      description: Get SetupIntent by given ID or 404 error.
      parameters:
      - description: SetupIntent ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/intent.SetupIntent'
      summary: get SetupIntent by given ID or 404 error.
      tags:
      - SetupIntent
    post:
      consumes:
      - application/json
      description: Update SetupIntent.
      parameters:
      - description: SetupIntent ID
        in: body
        name: id
        required: true
        schema:
          type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/intent.SetupIntent'
      summary: update SetupIntent
      tags:
      - SetupIntent
  /v1/setup_intents/{id}/cancele:
    post:
      consumes:
      - application/json
      description: Cancel SetupIntent.
      parameters:
      - description: SetupIntent ID
        in: body
        name: id
        required: true
        schema:
          type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/intent.SetupIntent'
      summary: cancel SetupIntent
      tags:
      - SetupIntent
  /v1/setup_intents/{id}/confirm:
    post:
      consumes:
      - application/json
      description: Confirm SetupIntent.
      parameters:
      - description: SetupIntent ID
        in: body
        name: id
        required: true
        schema:
          type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/intent.SetupIntent'
      summary: confirm SetupIntent
      tags:
      - SetupIntent
  /v1/sources:
    get:
      consumes:
      - application/json
      description: Get all existing Sources.
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/source.Source'
            type: array
      summary: get all existing Sources
      tags:
      - Source
    post:
      consumes:
      - application/json
      description: Create a new Source.
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/source.Source'
      summary: create a new Source
      tags:
      - Source
  /v1/sources/{id}:
    delete:
      consumes:
      - application/json
      description: Delete Source by given ID.
      parameters:
      - description: Source ID
        in: body
        name: id
        required: true
        schema:
          type: string
      produces:
      - application/json
      responses:
        "204":
          description: ok
          schema:
            type: string
      summary: delete Source by given ID
      tags:
      - Source
    get:
      consumes:
      - application/json
      description: Get Source by given ID or 404 error.
      parameters:
      - description: Source ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/source.Source'
      summary: get Source by given ID or 404 error.
      tags:
      - Source
    post:
      consumes:
      - application/json
      description: Update Source.
      parameters:
      - description: Source ID
        in: body
        name: id
        required: true
        schema:
          type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/source.Source'
      summary: update Source
      tags:
      - Source
  /v1/subscription_items:
    get:
      consumes:
      - application/json
      description: Get all existing SubscriptionItems.
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/subscriptionItem.SubscriptionItem'
            type: array
      summary: get all existing SubscriptionItems
      tags:
      - SubscriptionItem
    post:
      consumes:
      - application/json
      description: Create a new SubscriptionItem.
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/subscriptionItem.SubscriptionItem'
      summary: create a new SubscriptionItem
      tags:
      - SubscriptionItem
  /v1/subscription_items/{id}:
    delete:
      consumes:
      - application/json
      description: Delete SubscriptionItem by given ID.
      parameters:
      - description: SubscriptionItem ID
        in: body
        name: id
        required: true
        schema:
          type: string
      produces:
      - application/json
      responses:
        "204":
          description: ok
          schema:
            type: string
      summary: delete SubscriptionItem by given ID
      tags:
      - SubscriptionItem
    get:
      consumes:
      - application/json
      description: Get SubscriptionItem by given ID or 404 error.
      parameters:
      - description: SubscriptionItem ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/subscriptionItem.SubscriptionItem'
      summary: get SubscriptionItem by given ID or 404 error.
      tags:
      - SubscriptionItem
    post:
      consumes:
      - application/json
      description: Update SubscriptionItem.
      parameters:
      - description: SubscriptionItem ID
        in: body
        name: id
        required: true
        schema:
          type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/subscriptionItem.SubscriptionItem'
      summary: update SubscriptionItem
      tags:
      - SubscriptionItem
  /v1/subscription_items/{id}/usage_records:
    get:
      consumes:
      - application/json
      description: Get UsageRecord by given ID or 404 error.
      parameters:
      - description: UsageRecord ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/usageRecord.UsageRecord'
      summary: get UsageRecord by given ID or 404 error.
      tags:
      - UsageRecord
  /v1/subscription_schedules:
    get:
      consumes:
      - application/json
      description: Get all existing SubscriptionSchedules.
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/subscriptionSchedule.SubscriptionSchedule'
            type: array
      summary: get all existing SubscriptionSchedules
      tags:
      - SubscriptionSchedule
    post:
      consumes:
      - application/json
      description: Create a new SubscriptionSchedule.
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/subscriptionSchedule.SubscriptionSchedule'
      summary: create a new SubscriptionSchedule
      tags:
      - SubscriptionSchedule
  /v1/subscription_schedules/{id}:
    delete:
      consumes:
      - application/json
      description: Delete SubscriptionSchedule by given ID.
      parameters:
      - description: SubscriptionSchedule ID
        in: body
        name: id
        required: true
        schema:
          type: string
      produces:
      - application/json
      responses:
        "204":
          description: ok
          schema:
            type: string
      summary: delete SubscriptionSchedule by given ID
      tags:
      - SubscriptionSchedule
    get:
      consumes:
      - application/json
      description: Get SubscriptionSchedule by given ID or 404 error.
      parameters:
      - description: SubscriptionSchedule ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/subscriptionSchedule.SubscriptionSchedule'
      summary: get SubscriptionSchedule by given ID or 404 error.
      tags:
      - SubscriptionSchedule
    post:
      consumes:
      - application/json
      description: Update SubscriptionSchedule.
      parameters:
      - description: SubscriptionSchedule ID
        in: body
        name: id
        required: true
        schema:
          type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/subscriptionSchedule.SubscriptionSchedule'
      summary: update SubscriptionSchedule
      tags:
      - SubscriptionSchedule
  /v1/subscription_schedules/{id}/cancele:
    post:
      consumes:
      - application/json
      description: Cancel SubscriptionSchedule.
      parameters:
      - description: SubscriptionSchedule ID
        in: body
        name: id
        required: true
        schema:
          type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/subscriptionSchedule.SubscriptionSchedule'
      summary: cancel SubscriptionSchedule
      tags:
      - SubscriptionSchedule
  /v1/subscription_schedules/{id}/release:
    post:
      consumes:
      - application/json
      description: Release SubscriptionSchedule.
      parameters:
      - description: SubscriptionSchedule ID
        in: body
        name: id
        required: true
        schema:
          type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/subscriptionSchedule.SubscriptionSchedule'
      summary: release SubscriptionSchedule
      tags:
      - SubscriptionSchedule
  /v1/subscriptions:
    get:
      consumes:
      - application/json
      description: Get all existing Subscriptions.
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/subscription.Subscription'
            type: array
      summary: get all existing Subscriptions
      tags:
      - Subscription
    post:
      consumes:
      - application/json
      description: Create a new Subscription.
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/subscription.Subscription'
      summary: create a new Subscription
      tags:
      - Subscription
  /v1/subscriptions/{id}:
    delete:
      consumes:
      - application/json
      description: Delete Subscription by given ID.
      parameters:
      - description: Subscription ID
        in: body
        name: id
        required: true
        schema:
          type: string
      produces:
      - application/json
      responses:
        "204":
          description: ok
          schema:
            type: string
      summary: delete Subscription by given ID
      tags:
      - Subscription
    get:
      consumes:
      - application/json
      description: Get Subscription by given ID or 404 error.
      parameters:
      - description: Subscription ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/subscription.Subscription'
      summary: get Subscription by given ID or 404 error.
      tags:
      - Subscription
    post:
      consumes:
      - application/json
      description: Update Subscription.
      parameters:
      - description: Subscription ID
        in: body
        name: id
        required: true
        schema:
          type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/subscription.Subscription'
      summary: update Subscription
      tags:
      - Subscription
  /v1/usage_record:
    post:
      consumes:
      - application/json
      description: Create a new UsageRecord.
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/usageRecord.UsageRecord'
      summary: create a new UsageRecord
      tags:
      - UsageRecord
  /v1/usage_record/{id}:
    delete:
      consumes:
      - application/json
      description: Delete UsageRecord by given ID.
      parameters:
      - description: UsageRecord ID
        in: body
        name: id
        required: true
        schema:
          type: string
      produces:
      - application/json
      responses:
        "204":
          description: ok
          schema:
            type: string
      summary: delete UsageRecord by given ID
      tags:
      - UsageRecord
    post:
      consumes:
      - application/json
      description: Update UsageRecord.
      parameters:
      - description: UsageRecord ID
        in: body
        name: id
        required: true
        schema:
          type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/usageRecord.UsageRecord'
      summary: update UsageRecord
      tags:
      - UsageRecord
schemes:
- http
swagger: "2.0"
